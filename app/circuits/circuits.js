(function() {
  var circuitsCtrl, ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('circuits', {
      url: '/circuits',
      templateUrl: '/circuits/circuits.html',
      controller: circuitsCtrl
    });
    return navbarProvider.add('/circuits', 'Circuits', 30);
  });

  circuitsCtrl = function($scope, jeebus) {
    var setup;
    $scope.myDefs = {
      Pipe: {
        name: 'Pipeline',
        width: 160,
        icon: '\uf061',
        pins: [
          {
            name: 'In',
            dir: 'in'
          }, {
            name: 'Out',
            dir: 'out'
          }
        ]
      },
      Printer: {
        width: 120,
        shade: 'lightblue',
        icon: '\uf02f',
        pins: [
          {
            name: 'In',
            dir: 'in'
          }, {
            name: 'In2',
            dir: 'in'
          }
        ]
      }
    };
    $scope.myData = {
      gadgets: [
        {
          id: 'g1',
          x: 800,
          y: 70,
          title: 'Gadget One',
          type: 'Printer'
        }, {
          id: 'g2',
          x: 800,
          y: 170,
          title: 'Gadget Two',
          type: 'Pipe'
        }
      ],
      wires: [
        {
          from: "g2.Out",
          to: "g1.In",
          cap: 0
        }
      ],
      feeds: {
        "g1.In": {
          data: ["some data", "more data"],
          x: 800,
          y: 270
        }
      },
      labels: {
        "In": "g2.In"
      }
    };
    setup = function() {
      return jeebus.attach('circuit').on('sync', function() {
        return $scope.circuits = this.rows;
      });
    };
    if ($scope.serverStatus === 'connected') {
      setup();
    }
    return $scope.$on('ws-open', setup);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2lyY3VpdHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxnQkFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxTQUFDLGNBQUQsRUFBaUIsY0FBakIsR0FBQTtBQUNSLElBQUEsY0FBYyxDQUFDLEtBQWYsQ0FBcUIsVUFBckIsRUFDRTtBQUFBLE1BQUEsR0FBQSxFQUFLLFdBQUw7QUFBQSxNQUNBLFdBQUEsRUFBYSx5QkFEYjtBQUFBLE1BRUEsVUFBQSxFQUFZLFlBRlo7S0FERixDQUFBLENBQUE7V0FJQSxjQUFjLENBQUMsR0FBZixDQUFtQixXQUFuQixFQUFnQyxVQUFoQyxFQUE0QyxFQUE1QyxFQUxRO0VBQUEsQ0FBVixDQUZBLENBQUE7O0FBQUEsRUFTQSxZQUFBLEdBQWUsU0FBQyxNQUFELEVBQVMsTUFBVCxHQUFBO0FBQ2IsUUFBQSxLQUFBO0FBQUEsSUFBQSxNQUFNLENBQUMsTUFBUCxHQUNFO0FBQUEsTUFBQSxJQUFBLEVBQ0U7QUFBQSxRQUFBLElBQUEsRUFBTSxVQUFOO0FBQUEsUUFDQSxLQUFBLEVBQU8sR0FEUDtBQUFBLFFBRUEsSUFBQSxFQUFNLFFBRk47QUFBQSxRQUdBLElBQUEsRUFBTTtVQUNKO0FBQUEsWUFBRSxJQUFBLEVBQU0sSUFBUjtBQUFBLFlBQWMsR0FBQSxFQUFLLElBQW5CO1dBREksRUFFSjtBQUFBLFlBQUUsSUFBQSxFQUFNLEtBQVI7QUFBQSxZQUFlLEdBQUEsRUFBSyxLQUFwQjtXQUZJO1NBSE47T0FERjtBQUFBLE1BUUEsT0FBQSxFQUNFO0FBQUEsUUFBQSxLQUFBLEVBQU8sR0FBUDtBQUFBLFFBQ0EsS0FBQSxFQUFPLFdBRFA7QUFBQSxRQUVBLElBQUEsRUFBTSxRQUZOO0FBQUEsUUFHQSxJQUFBLEVBQU07VUFDSjtBQUFBLFlBQUUsSUFBQSxFQUFNLElBQVI7QUFBQSxZQUFjLEdBQUEsRUFBSyxJQUFuQjtXQURJLEVBRUo7QUFBQSxZQUFFLElBQUEsRUFBTSxLQUFSO0FBQUEsWUFBZSxHQUFBLEVBQUssSUFBcEI7V0FGSTtTQUhOO09BVEY7S0FERixDQUFBO0FBQUEsSUFrQkEsTUFBTSxDQUFDLE1BQVAsR0FDRTtBQUFBLE1BQUEsT0FBQSxFQUFTO1FBQ1A7QUFBQSxVQUFFLEVBQUEsRUFBRyxJQUFMO0FBQUEsVUFBVyxDQUFBLEVBQUUsR0FBYjtBQUFBLFVBQWtCLENBQUEsRUFBRSxFQUFwQjtBQUFBLFVBQXdCLEtBQUEsRUFBTSxZQUE5QjtBQUFBLFVBQTRDLElBQUEsRUFBTSxTQUFsRDtTQURPLEVBRVA7QUFBQSxVQUFFLEVBQUEsRUFBRyxJQUFMO0FBQUEsVUFBVyxDQUFBLEVBQUUsR0FBYjtBQUFBLFVBQWtCLENBQUEsRUFBRSxHQUFwQjtBQUFBLFVBQXlCLEtBQUEsRUFBTSxZQUEvQjtBQUFBLFVBQTZDLElBQUEsRUFBTSxNQUFuRDtTQUZPO09BQVQ7QUFBQSxNQUlBLEtBQUEsRUFBTztRQUNMO0FBQUEsVUFBRSxJQUFBLEVBQU0sUUFBUjtBQUFBLFVBQWtCLEVBQUEsRUFBSSxPQUF0QjtBQUFBLFVBQStCLEdBQUEsRUFBSyxDQUFwQztTQURLO09BSlA7QUFBQSxNQU9BLEtBQUEsRUFDRTtBQUFBLFFBQUEsT0FBQSxFQUFTO0FBQUEsVUFBRSxJQUFBLEVBQU0sQ0FBRSxXQUFGLEVBQWUsV0FBZixDQUFSO0FBQUEsVUFBc0MsQ0FBQSxFQUFHLEdBQXpDO0FBQUEsVUFBOEMsQ0FBQSxFQUFHLEdBQWpEO1NBQVQ7T0FSRjtBQUFBLE1BU0EsTUFBQSxFQUNFO0FBQUEsUUFBQSxJQUFBLEVBQU0sT0FBTjtPQVZGO0tBbkJGLENBQUE7QUFBQSxJQStCQSxLQUFBLEdBQVEsU0FBQSxHQUFBO2FBQ04sTUFBTSxDQUFDLE1BQVAsQ0FBYyxTQUFkLENBQ0UsQ0FBQyxFQURILENBQ00sTUFETixFQUNjLFNBQUEsR0FBQTtlQUNWLE1BQU0sQ0FBQyxRQUFQLEdBQWtCLElBQUMsQ0FBQSxLQURUO01BQUEsQ0FEZCxFQURNO0lBQUEsQ0EvQlIsQ0FBQTtBQW9DQSxJQUFBLElBQVksTUFBTSxDQUFDLFlBQVAsS0FBdUIsV0FBbkM7QUFBQSxNQUFBLEtBQUEsQ0FBQSxDQUFBLENBQUE7S0FwQ0E7V0FxQ0EsTUFBTSxDQUFDLEdBQVAsQ0FBVyxTQUFYLEVBQXNCLEtBQXRCLEVBdENhO0VBQUEsQ0FUZixDQUFBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJuZyA9IGFuZ3VsYXIubW9kdWxlICdteUFwcCdcblxubmcuY29uZmlnICgkc3RhdGVQcm92aWRlciwgbmF2YmFyUHJvdmlkZXIpIC0+XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlICdjaXJjdWl0cycsXG4gICAgdXJsOiAnL2NpcmN1aXRzJ1xuICAgIHRlbXBsYXRlVXJsOiAnL2NpcmN1aXRzL2NpcmN1aXRzLmh0bWwnXG4gICAgY29udHJvbGxlcjogY2lyY3VpdHNDdHJsXG4gIG5hdmJhclByb3ZpZGVyLmFkZCAnL2NpcmN1aXRzJywgJ0NpcmN1aXRzJywgMzBcblxuY2lyY3VpdHNDdHJsID0gKCRzY29wZSwgamVlYnVzKSAtPlxuICAkc2NvcGUubXlEZWZzID1cbiAgICBQaXBlOlxuICAgICAgbmFtZTogJ1BpcGVsaW5lJ1xuICAgICAgd2lkdGg6IDE2MFxuICAgICAgaWNvbjogJ1xcdWYwNjEnICMgZmEtYXJyb3ctcmlnaHRcbiAgICAgIHBpbnM6IFtcbiAgICAgICAgeyBuYW1lOiAnSW4nLCBkaXI6ICdpbicgfVxuICAgICAgICB7IG5hbWU6ICdPdXQnLCBkaXI6ICdvdXQnIH1cbiAgICAgIF1cbiAgICBQcmludGVyOlxuICAgICAgd2lkdGg6IDEyMFxuICAgICAgc2hhZGU6ICdsaWdodGJsdWUnXG4gICAgICBpY29uOiAnXFx1ZjAyZicgIyBmYS1wcmludFxuICAgICAgcGluczogW1xuICAgICAgICB7IG5hbWU6ICdJbicsIGRpcjogJ2luJyB9XG4gICAgICAgIHsgbmFtZTogJ0luMicsIGRpcjogJ2luJyB9XG4gICAgICBdXG4gICAgICBcbiAgJHNjb3BlLm15RGF0YSA9XG4gICAgZ2FkZ2V0czogW1xuICAgICAgeyBpZDonZzEnLCB4OjgwMCwgeTo3MCwgdGl0bGU6J0dhZGdldCBPbmUnLCB0eXBlOiAnUHJpbnRlcicgfVxuICAgICAgeyBpZDonZzInLCB4OjgwMCwgeToxNzAsIHRpdGxlOidHYWRnZXQgVHdvJywgdHlwZTogJ1BpcGUnIH1cbiAgICBdXG4gICAgd2lyZXM6IFtcbiAgICAgIHsgZnJvbTogXCJnMi5PdXRcIiwgdG86IFwiZzEuSW5cIiwgY2FwOiAwIH1cbiAgICBdXG4gICAgZmVlZHM6XG4gICAgICBcImcxLkluXCI6IHsgZGF0YTogWyBcInNvbWUgZGF0YVwiLCBcIm1vcmUgZGF0YVwiIF0sIHg6IDgwMCwgeTogMjcwIH1cbiAgICBsYWJlbHM6XG4gICAgICBcIkluXCI6IFwiZzIuSW5cIlxuICBcbiAgc2V0dXAgPSAtPlxuICAgIGplZWJ1cy5hdHRhY2ggJ2NpcmN1aXQnXG4gICAgICAub24gJ3N5bmMnLCAtPlxuICAgICAgICAkc2NvcGUuY2lyY3VpdHMgPSBAcm93c1xuICAgICAgXG4gIHNldHVwKCkgIGlmICRzY29wZS5zZXJ2ZXJTdGF0dXMgaXMgJ2Nvbm5lY3RlZCdcbiAgJHNjb3BlLiRvbiAnd3Mtb3BlbicsIHNldHVwXG4iXX0=
