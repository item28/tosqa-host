(function() {
  var circuitsCtrl, ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('circuits', {
      url: '/circuits',
      templateUrl: '/circuits/circuits.html',
      controller: circuitsCtrl
    });
    return navbarProvider.add('/circuits', 'Circuits', 30);
  });

  circuitsCtrl = function($scope, jeebus) {
    var updatePinList;
    $scope.gadgets = {
      Pipe: {
        name: 'Pipeline',
        width: 160,
        shade: 'lightyellow',
        icon: '\uf061',
        pins: [
          {
            name: 'In',
            dir: 'in'
          }, {
            name: 'Out',
            dir: 'out'
          }
        ]
      },
      Printer: {
        width: 120,
        shade: 'lightblue',
        icon: '\uf02f',
        pins: [
          {
            name: 'In',
            dir: 'in'
          }, {
            name: 'In2',
            dir: 'in'
          }
        ]
      }
    };
    $scope.circuit = {
      gadgets: [
        {
          id: 'g1',
          x: 120,
          y: 100,
          title: 'Gadget One',
          type: 'Printer'
        }, {
          id: 'g2',
          x: 120,
          y: 200,
          title: 'Gadget Two',
          type: 'Pipe'
        }
      ],
      wires: [
        {
          from: 'g2.Out',
          to: 'g1.In',
          cap: 0
        }
      ],
      feeds: {
        'g1.In': [
          'some data', {
            Tag: 'blah',
            Msg: 'tagged data'
          }
        ]
      },
      labels: {
        In: 'g2.In'
      }
    };
    updatePinList = function() {
      var g, p, _i, _j, _len, _len1, _ref, _ref1;
      $scope.inputPins = [];
      _ref = $scope.circuit.gadgets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        g = _ref[_i];
        _ref1 = $scope.gadgets[g.type].pins;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          if (p.dir === 'in') {
            $scope.inputPins.push("" + g.id + "." + p.name);
          }
        }
      }
      return $scope.inputPins.sort();
    };
    $scope.$watch('addPin', function(pin) {
      var _base;
      if (pin) {
        if ((_base = $scope.circuit.feeds)[pushin] == null) {
          _base[pushin] = [];
        }
        console.log('addFeed', pin, $scope.circuit.feeds[pin].length);
        $scope.circuit.feeds[pin].push('');
        return $scope.addPin = null;
      }
    });
    $scope.delFeed = function(pin, index) {
      var items;
      items = $scope.circuit.feeds[pin];
      console.log('delFeed', pin, index, items[index]);
      items.splice(index, 1);
      if (items.length === 0) {
        return delete $scope.circuit.feeds[pin];
      }
    };
    $scope.$watch('currSel.id', function(x) {
      console.log('fix id', x);
      return updatePinList();
    });
    $scope.$watch('currSel.title', function(x) {
      return console.log('fix title', x);
    });
    return $scope.$on('circuit', function() {
      var args, event;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return console.log.apply(console, ['C:'].concat(__slice.call(args)));
    });
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2lyY3VpdHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxnQkFBQTtJQUFBLGtCQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLE9BQU8sQ0FBQyxNQUFSLENBQWUsT0FBZixDQUFMLENBQUE7O0FBQUEsRUFFQSxFQUFFLENBQUMsTUFBSCxDQUFVLFNBQUMsY0FBRCxFQUFpQixjQUFqQixHQUFBO0FBQ1IsSUFBQSxjQUFjLENBQUMsS0FBZixDQUFxQixVQUFyQixFQUNFO0FBQUEsTUFBQSxHQUFBLEVBQUssV0FBTDtBQUFBLE1BQ0EsV0FBQSxFQUFhLHlCQURiO0FBQUEsTUFFQSxVQUFBLEVBQVksWUFGWjtLQURGLENBQUEsQ0FBQTtXQUlBLGNBQWMsQ0FBQyxHQUFmLENBQW1CLFdBQW5CLEVBQWdDLFVBQWhDLEVBQTRDLEVBQTVDLEVBTFE7RUFBQSxDQUFWLENBRkEsQ0FBQTs7QUFBQSxFQVNBLFlBQUEsR0FBZSxTQUFDLE1BQUQsRUFBUyxNQUFULEdBQUE7QUFDYixRQUFBLGFBQUE7QUFBQSxJQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7QUFBQSxNQUFBLElBQUEsRUFDRTtBQUFBLFFBQUEsSUFBQSxFQUFNLFVBQU47QUFBQSxRQUNBLEtBQUEsRUFBTyxHQURQO0FBQUEsUUFFQSxLQUFBLEVBQU8sYUFGUDtBQUFBLFFBR0EsSUFBQSxFQUFNLFFBSE47QUFBQSxRQUlBLElBQUEsRUFBTTtVQUNKO0FBQUEsWUFBRSxJQUFBLEVBQU0sSUFBUjtBQUFBLFlBQWMsR0FBQSxFQUFLLElBQW5CO1dBREksRUFFSjtBQUFBLFlBQUUsSUFBQSxFQUFNLEtBQVI7QUFBQSxZQUFlLEdBQUEsRUFBSyxLQUFwQjtXQUZJO1NBSk47T0FERjtBQUFBLE1BU0EsT0FBQSxFQUNFO0FBQUEsUUFBQSxLQUFBLEVBQU8sR0FBUDtBQUFBLFFBQ0EsS0FBQSxFQUFPLFdBRFA7QUFBQSxRQUVBLElBQUEs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Q0FBYSxLQUFiLEVBQW9CLENBQXBCLENBRkEsQ0FBQTtBQUdBLE1BQUEsSUFBcUMsS0FBSyxDQUFDLE1BQU4sS0FBZ0IsQ0FBckQ7ZUFBQSxNQUFBLENBQUEsTUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFNLENBQUEsR0FBQSxFQUE1QjtPQUplO0lBQUEsQ0E5Q2pCLENBQUE7QUFBQSxJQW9EQSxNQUFNLENBQUMsTUFBUCxDQUFjLFlBQWQsRUFBNEIsU0FBQyxDQUFELEdBQUE7QUFDMUIsTUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLFFBQVosRUFBc0IsQ0FBdEIsQ0FBQSxDQUFBO2FBQ0EsYUFBQSxDQUFBLEVBRjBCO0lBQUEsQ0FBNUIsQ0FwREEsQ0FBQTtBQUFBLElBdURBLE1BQU0sQ0FBQyxNQUFQLENBQWMsZUFBZCxFQUErQixTQUFDLENBQUQsR0FBQTthQUM3QixPQUFPLENBQUMsR0FBUixDQUFZLFdBQVosRUFBeUIsQ0FBekIsRUFENkI7SUFBQSxDQUEvQixDQXZEQSxDQUFBO1dBMERBLE1BQU0sQ0FBQyxHQUFQLENBQVcsU0FBWCxFQUFzQixTQUFBLEdBQUE7QUFDcEIsVUFBQSxXQUFBO0FBQUEsTUFEcUIsc0JBQU8sOERBQzVCLENBQUE7YUFBQSxPQUFPLENBQUMsR0FBUixnQkFBWSxDQUFBLElBQU0sU0FBQSxhQUFBLElBQUEsQ0FBQSxDQUFsQixFQURvQjtJQUFBLENBQXRCLEVBM0RhO0VBQUEsQ0FUZixDQUFBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJuZyA9IGFuZ3VsYXIubW9kdWxlICdteUFwcCdcblxubmcuY29uZmlnICgkc3RhdGVQcm92aWRlciwgbmF2YmFyUHJvdmlkZXIpIC0+XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlICdjaXJjdWl0cycsXG4gICAgdXJsOiAnL2NpcmN1aXRzJ1xuICAgIHRlbXBsYXRlVXJsOiAnL2NpcmN1aXRzL2NpcmN1aXRzLmh0bWwnXG4gICAgY29udHJvbGxlcjogY2lyY3VpdHNDdHJsXG4gIG5hdmJhclByb3ZpZGVyLmFkZCAnL2NpcmN1aXRzJywgJ0NpcmN1aXRzJywgMzBcblxuY2lyY3VpdHNDdHJsID0gKCRzY29wZSwgamVlYnVzKSAtPlxuICAkc2NvcGUuZ2FkZ2V0cyA9XG4gICAgUGlwZTpcbiAgICAgIG5hbWU6ICdQaXBlbGluZSdcbiAgICAgIHdpZHRoOiAxNjBcbiAgICAgIHNoYWRlOiAnbGlnaHR5ZWxsb3cnXG4gICAgICBpY29uOiAnXFx1ZjA2MScgIyBmYS1hcnJvdy1yaWdodFxuICAgICAgcGluczogW1xuICAgICAgICB7IG5hbWU6ICdJbicsIGRpcjogJ2luJyB9XG4gICAgICAgIHsgbmFtZTogJ091dCcsIGRpcjogJ291dCcgfVxuICAgICAgXVxuICAgIFByaW50ZXI6XG4gICAgICB3aWR0aDogMTIwXG4gICAgICBzaGFkZTogJ2xpZ2h0Ymx1ZSdcbiAgICAgIGljb246ICdcXHVmMDJmJyAjIGZhLXByaW50XG4gICAgICBwaW5zOiBbXG4gICAgICAgIHsgbmFtZTogJ0luJywgZGlyOiAnaW4nIH1cbiAgICAgICAgeyBuYW1lOiAnSW4yJywgZGlyOiAnaW4nIH1cbiAgICAgIF1cbiAgICAgIFxuICAkc2NvcGUuY2lyY3VpdCA9XG4gICAgZ2FkZ2V0czogW1xuICAgICAgeyBpZDogJ2cxJywgeDogMTIwLCB5OiAxMDAsIHRpdGxlOiAnR2FkZ2V0IE9uZScsIHR5cGU6ICdQcmludGVyJyB9XG4gICAgICB7IGlkOiAnZzInLCB4OiAxMjAsIHk6IDIwMCwgdGl0bGU6ICdHYWRnZXQgVHdvJywgdHlwZTogJ1BpcGUnIH1cbiAgICBdXG4gICAgd2lyZXM6IFtcbiAgICAgIHsgZnJvbTogJ2cyLk91dCcsIHRvOiAnZzEuSW4nLCBjYXA6IDAgfVxuICAgIF1cbiAgICBmZWVkczpcbiAgICAgICdnMS5Jbic6IFsgJ3NvbWUgZGF0YScsIHsgVGFnOiAnYmxhaCcsIE1zZzogJ3RhZ2dlZCBkYXRhJyB9IF1cbiAgICBsYWJlbHM6XG4gICAgICBJbjogJ2cyLkluJ1xuICAgICAgXG4gIHVwZGF0ZVBpbkxpc3QgPSAoKSAtPlxuICAgICRzY29wZS5pbnB1dFBpbnMgPSBbXVxuICAgIGZvciBnIGluICRzY29wZS5jaXJjdWl0LmdhZGdldHNcbiAgICAgIGZvciBwIGluICRzY29wZS5nYWRnZXRzW2cudHlwZV0ucGlucyB3aGVuIHAuZGlyIGlzICdpbidcbiAgICAgICAgJHNjb3BlLmlucHV0UGlucy5wdXNoIFwiI3tnLmlkfS4je3AubmFtZX1cIlxuICAgICRzY29wZS5pbnB1dFBpbnMuc29ydCgpXG4gIFxuICAkc2NvcGUuJHdhdGNoICdhZGRQaW4nLCAocGluKSAtPlxuICAgIGlmIHBpblxuICAgICAgJHNjb3BlLmNpcmN1aXQuZmVlZHNbcHVzaGluXSA/PSBbXVxuICAgICAgY29uc29sZS5sb2cgJ2FkZEZlZWQnLCBwaW4sICRzY29wZS5jaXJjdWl0LmZlZWRzW3Bpbl0ubGVuZ3RoXG4gICAgICAkc2NvcGUuY2lyY3VpdC5mZWVkc1twaW5dLnB1c2ggJydcbiAgICAgICRzY29wZS5hZGRQaW4gPSBudWxsXG4gICAgXG4gICRzY29wZS5kZWxGZWVkID0gKHBpbiwgaW5kZXgpIC0+XG4gICAgaXRlbXMgPSAkc2NvcGUuY2lyY3VpdC5mZWVkc1twaW5dXG4gICAgY29uc29sZS5sb2cgJ2RlbEZlZWQnLCBwaW4sIGluZGV4LCBpdGVtc1tpbmRleF1cbiAgICBpdGVtcy5zcGxpY2UgaW5kZXgsIDFcbiAgICBkZWxldGUgJHNjb3BlLmNpcmN1aXQuZmVlZHNbcGluXSAgaWYgaXRlbXMubGVuZ3RoIGlzIDBcbiAgXG4gICRzY29wZS4kd2F0Y2ggJ2N1cnJTZWwuaWQnLCAoeCkgLT5cbiAgICBjb25zb2xlLmxvZyAnZml4IGlkJywgeFxuICAgIHVwZGF0ZVBpbkxpc3QoKSAjIGZvciBuZXcgYW5kIGRlbGV0ZWQgZ2FkZ2V0c1xuICAkc2NvcGUuJHdhdGNoICdjdXJyU2VsLnRpdGxlJywgKHgpIC0+XG4gICAgY29uc29sZS5sb2cgJ2ZpeCB0aXRsZScsIHhcbiAgICBcbiAgJHNjb3BlLiRvbiAnY2lyY3VpdCcsIChldmVudCwgYXJncy4uLikgLT5cbiAgICBjb25zb2xlLmxvZyAnQzonLCBhcmdzLi4uXG4gICAgXG4gICMgc2V0dXAgPSAtPlxuICAjICAgamVlYnVzLmF0dGFjaCAnY2lyY3VpdCdcbiAgIyAgICAgLm9uICdzeW5jJywgLT5cbiAgIyAgICAgICAkc2NvcGUuY2lyY3VpdHMgPSBAcm93c1xuICAjICAgICBcbiAgIyBzZXR1cCgpICBpZiAkc2NvcGUuc2VydmVyU3RhdHVzIGlzICdjb25uZWN0ZWQnXG4gICMgJHNjb3BlLiRvbiAnd3Mtb3BlbicsIHNldHVwXG4iXX0=
