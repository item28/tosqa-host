(function() {
  var circuitsCtrl, ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('circuits', {
      url: '/circuits',
      templateUrl: '/circuits/circuits.html',
      controller: circuitsCtrl
    });
    return navbarProvider.add('/circuits', 'Circuits', 30);
  });

  circuitsCtrl = function($scope, jeebus) {
<<<<<<< HEAD
    var handlers, setup, updatePinList;
=======
    var handlers, updatePinList;
>>>>>>> master
    $scope.gadgets = {
      Pipe: {
        name: 'Pipeline',
        shade: 'lightyellow',
        icon: '\uf061',
        inputs: 'In',
        outputs: 'Out'
      },
      Printer: {
        shade: 'lightblue',
        icon: '\uf02f',
        inputs: 'In In2'
      }
    };
    $scope.circuit = {
      gadgets: {
        g1: {
          x: 120,
          y: 100,
          title: 'Gadget One',
          type: 'Printer'
        },
        g2: {
          x: 120,
          y: 200,
          title: 'Gadget Two',
          type: 'Pipe'
        }
      },
      wires: {
        'g2.Out/g1.In': 0
      },
      feeds: {
        'g1.In': [
          'some data', {
            Tag: 'blah',
            Msg: 'tagged data'
          }
        ]
      },
      labels: {
        In: 'g2.In'
      }
    };
    updatePinList = function() {
      var g, gid, ins, p, _i, _len, _ref, _ref1;
      $scope.inputPins = [];
      _ref = $scope.circuit.gadgets;
      for (gid in _ref) {
        g = _ref[gid];
        if (ins = $scope.gadgets[g.type].inputs) {
          _ref1 = ins.split(' ');
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            p = _ref1[_i];
            $scope.inputPins.push("" + gid + "." + p);
          }
        }
      }
      return $scope.inputPins.sort();
    };
    $scope.$watch('addPin', function(pin) {
      var _base;
      if (pin) {
        if ((_base = $scope.circuit.feeds)[pin] == null) {
          _base[pin] = [];
        }
        console.log('addFeed', pin, $scope.circuit.feeds[pin].length);
        $scope.circuit.feeds[pin].push('');
        return $scope.addPin = null;
      }
    });
    $scope.delFeed = function(pin, index) {
      var items;
      items = $scope.circuit.feeds[pin];
      console.log('delFeed', pin, index, items[index]);
      items.splice(index, 1);
      if (items.length === 0) {
        return delete $scope.circuit.feeds[pin];
      }
    };
    $scope.$watch('currSel.id', function(x) {
      console.log('fix id', x);
      return updatePinList();
    });
    $scope.$watch('currSel.title', function(x) {
      return console.log('fix title', x);
    });
    handlers = {
<<<<<<< HEAD
      addGadget: function(x, y) {
        jeebus.put("item", "value");
        return console.log("item is stored");
      },
      delGadget: function(id, wires) {},
      addWire: function(from, to) {},
      delWire: function(from, to) {
        return console.log("this");
      },
      selectGadget: function(id) {},
      moveGadget: function(id, x, y) {}
    };
    $scope.$on('circuit', function() {
=======
      addGadget: function(x, y) {},
      delGadget: function(id) {},
      addWire: function(from, to) {},
      delWire: function(from, to) {},
      selectGadget: function(id) {},
      moveGadget: function(id, x, y) {}
    };
    return $scope.$on('circuit', function() {
>>>>>>> master
      var args, event, type;
      event = arguments[0], type = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      console.log.apply(console, ['C:', type].concat(__slice.call(args)));
      return handlers[type].apply(handlers, args);
    });
<<<<<<< HEAD
    return setup = function() {
      return jeebus.attach('circuit').on('sync', function() {
        return $scope.circuits = this.rows;
      }).on('data', function(k, v) {
        return console.log(k);
      });
    };
=======
>>>>>>> master
  };

}).call(this);

<<<<<<< HEAD
//# sourceMappingURL=data:application/json;base64,
=======
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2lyY3VpdHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxnQkFBQTtJQUFBLGtCQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLE9BQU8sQ0FBQyxNQUFSLENBQWUsT0FBZixDQUFMLENBQUE7O0FBQUEsRUFFQSxFQUFFLENBQUMsTUFBSCxDQUFVLFNBQUMsY0FBRCxFQUFpQixjQUFqQixHQUFBO0FBQ1IsSUFBQSxjQUFjLENBQUMsS0FBZixDQUFxQixVQUFyQixFQUNFO0FBQUEsTUFBQSxHQUFBLEVBQUssV0FBTDtBQUFBLE1BQ0EsV0FBQSxFQUFhLHlCQURiO0FBQUEsTUFFQSxVQUFBLEVBQVksWUFGWjtLQURGLENBQUEsQ0FBQTtXQUlBLGNBQWMsQ0FBQyxHQUFmLENBQW1CLFdBQW5CLEVBQWdDLFVBQWhDLEVBQTRDLEVBQTVDLEVBTFE7RUFBQSxDQUFWLENBRkEsQ0FBQTs7QUFBQSxFQVNBLFlBQUEsR0FBZSxTQUFDLE1BQUQsRUFBUyxNQUFULEdBQUE7QUFFYixRQUFBLHVCQUFBO0FBQUEsSUFBQSxNQUFNLENBQUMsT0FBUCxHQUNFO0FBQUEsTUFBQSxJQUFBLEVBQ0U7QUFBQSxRQUFBLElBQUEsRUFBTSxVQUFOO0FBQUEsUUFDQSxLQUFBLEVBQU8sYUFEUDtBQUFBLFFBRUEsSUFBQSxFQUFNLFFBRk47QUFBQSxRQUdBLE1BQUEsRUFBUSxJQUhSO0FBQUEsUUFJQSxPQUFBLEVBQVMsS0FKVDtPQURGO0FBQUEsTUFNQSxPQUFBLEVBQ0U7QUFBQSxRQUFBLEtBQUEsRUFBTyxXQUFQO0FBQUEsUUFDQSxJQUFBLEVBQU0sUUFETjtBQUFBLFFBRUEsTUFBQSxFQUFRLFFBRlI7T0FQRjtLQURGLENBQUE7QUFBQSxJQVlBLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7QUFBQSxNQUFBLE9BQUEsRUFDRTtBQUFBLFFBQUEsRUFBQSxFQUFJO0FBQUEsVUFBRSxDQUFBLEVBQUcsR0FBTDtB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QUFNLENBQUMsTUFBUCxDQUFjLGVBQWQsRUFBK0IsU0FBQyxDQUFELEdBQUE7YUFDN0IsT0FBTyxDQUFDLEdBQVIsQ0FBWSxXQUFaLEVBQXlCLENBQXpCLEVBRDZCO0lBQUEsQ0FBL0IsQ0EvQ0EsQ0FBQTtBQUFBLElBa0RBLFFBQUEsR0FDRTtBQUFBLE1BQUEsU0FBQSxFQUFXLFNBQUMsQ0FBRCxFQUFJLENBQUosR0FBQSxDQUFYO0FBQUEsTUFDQSxTQUFBLEVBQVcsU0FBQyxFQUFELEdBQUEsQ0FEWDtBQUFBLE1BRUEsT0FBQSxFQUFTLFNBQUMsSUFBRCxFQUFPLEVBQVAsR0FBQSxDQUZUO0FBQUEsTUFHQSxPQUFBLEVBQVMsU0FBQyxJQUFELEVBQU8sRUFBUCxHQUFBLENBSFQ7QUFBQSxNQUlBLFlBQUEsRUFBYyxTQUFDLEVBQUQsR0FBQSxDQUpkO0FBQUEsTUFLQSxVQUFBLEVBQVksU0FBQyxFQUFELEVBQUssQ0FBTCxFQUFRLENBQVIsR0FBQSxDQUxaO0tBbkRGLENBQUE7V0EwREEsTUFBTSxDQUFDLEdBQVAsQ0FBVyxTQUFYLEVBQXNCLFNBQUEsR0FBQTtBQUNwQixVQUFBLGlCQUFBO0FBQUEsTUFEcUIsc0JBQU8scUJBQU0sOERBQ2xDLENBQUE7QUFBQSxNQUFBLE9BQU8sQ0FBQyxHQUFSLGdCQUFZLENBQUEsSUFBQSxFQUFNLElBQU0sU0FBQSxhQUFBLElBQUEsQ0FBQSxDQUF4QixDQUFBLENBQUE7YUFDQSxRQUFTLENBQUEsSUFBQSxDQUFULGlCQUFlLElBQWYsRUFGb0I7SUFBQSxDQUF0QixFQTVEYTtFQUFBLENBVGYsQ0FBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsibmcgPSBhbmd1bGFyLm1vZHVsZSAnbXlBcHAnXG5cbm5nLmNvbmZpZyAoJHN0YXRlUHJvdmlkZXIsIG5hdmJhclByb3ZpZGVyKSAtPlxuICAkc3RhdGVQcm92aWRlci5zdGF0ZSAnY2lyY3VpdHMnLFxuICAgIHVybDogJy9jaXJjdWl0cydcbiAgICB0ZW1wbGF0ZVVybDogJy9jaXJjdWl0cy9jaXJjdWl0cy5odG1sJ1xuICAgIGNvbnRyb2xsZXI6IGNpcmN1aXRzQ3RybFxuICBuYXZiYXJQcm92aWRlci5hZGQgJy9jaXJjdWl0cycsICdDaXJjdWl0cycsIDMwXG5cbmNpcmN1aXRzQ3RybCA9ICgkc2NvcGUsIGplZWJ1cykgLT5cbiAgICBcbiAgJHNjb3BlLmdhZGdldHMgPVxuICAgIFBpcGU6XG4gICAgICBuYW1lOiAnUGlwZWxpbmUnXG4gICAgICBzaGFkZTogJ2xpZ2h0eWVsbG93J1xuICAgICAgaWNvbjogJ1xcdWYwNjEnICMgZmEtYXJyb3ctcmlnaHRcbiAgICAgIGlucHV0czogJ0luJ1xuICAgICAgb3V0cHV0czogJ091dCdcbiAgICBQcmludGVyOlxuICAgICAgc2hhZGU6ICdsaWdodGJsdWUnXG4gICAgICBpY29uOiAnXFx1ZjAyZicgIyBmYS1wcmludFxuICAgICAgaW5wdXRzOiAnSW4gSW4yJ1xuICAgICAgXG4gICRzY29wZS5jaXJjdWl0ID1cbiAgICBnYWRnZXRzOlxuICAgICAgZzE6IHsgeDogMTIwLCB5OiAxMDAsIHRpdGxlOiAnR2FkZ2V0IE9uZScsIHR5cGU6ICdQcmludGVyJyB9XG4gICAgICBnMjogeyB4OiAxMjAsIHk6IDIwMCwgdGl0bGU6ICdHYWRnZXQgVHdvJywgdHlwZTogJ1BpcGUnIH1cbiAgICB3aXJlczpcbiAgICAgICdnMi5PdXQvZzEuSW4nOiAwXG4gICAgZmVlZHM6XG4gICAgICAnZzEuSW4nOiBbICdzb21lIGRhdGEnLCB7IFRhZzogJ2JsYWgnLCBNc2c6ICd0YWdnZWQgZGF0YScgfSBdXG4gICAgbGFiZWxzOlxuICAgICAgSW46ICdnMi5JbidcbiAgICAgIFxuICB1cGRhdGVQaW5MaXN0ID0gKCkgLT5cbiAgICAkc2NvcGUuaW5wdXRQaW5zID0gW11cbiAgICBmb3IgZ2lkLCBnIG9mICRzY29wZS5jaXJjdWl0LmdhZGdldHNcbiAgICAgIGlmIGlucyA9ICRzY29wZS5nYWRnZXRzW2cudHlwZV0uaW5wdXRzXG4gICAgICAgIGZvciBwIGluIGlucy5zcGxpdCAnICdcbiAgICAgICAgICAkc2NvcGUuaW5wdXRQaW5zLnB1c2ggXCIje2dpZH0uI3twfVwiXG4gICAgJHNjb3BlLmlucHV0UGlucy5zb3J0KClcbiAgXG4gICRzY29wZS4kd2F0Y2ggJ2FkZFBpbicsIChwaW4pIC0+XG4gICAgaWYgcGluXG4gICAgICAkc2NvcGUuY2lyY3VpdC5mZWVkc1twaW5dID89IFtdXG4gICAgICBjb25zb2xlLmxvZyAnYWRkRmVlZCcsIHBpbiwgJHNjb3BlLmNpcmN1aXQuZmVlZHNbcGluXS5sZW5ndGhcbiAgICAgICRzY29wZS5jaXJjdWl0LmZlZWRzW3Bpbl0ucHVzaCAnJ1xuICAgICAgJHNjb3BlLmFkZFBpbiA9IG51bGxcbiAgICBcbiAgJHNjb3BlLmRlbEZlZWQgPSAocGluLCBpbmRleCkgLT5cbiAgICBpdGVtcyA9ICRzY29wZS5jaXJjdWl0LmZlZWRzW3Bpbl1cbiAgICBjb25zb2xlLmxvZyAnZGVsRmVlZCcsIHBpbiwgaW5kZXgsIGl0ZW1zW2luZGV4XVxuICAgIGl0ZW1zLnNwbGljZSBpbmRleCwgMVxuICAgIGRlbGV0ZSAkc2NvcGUuY2lyY3VpdC5mZWVkc1twaW5dICBpZiBpdGVtcy5sZW5ndGggaXMgMFxuICBcbiAgJHNjb3BlLiR3YXRjaCAnY3VyclNlbC5pZCcsICh4KSAtPlxuICAgIGNvbnNvbGUubG9nICdmaXggaWQnLCB4XG4gICAgdXBkYXRlUGluTGlzdCgpICMgZm9yIG5ldyBhbmQgZGVsZXRlZCBnYWRnZXRzXG4gICRzY29wZS4kd2F0Y2ggJ2N1cnJTZWwudGl0bGUnLCAoeCkgLT5cbiAgICBjb25zb2xlLmxvZyAnZml4IHRpdGxlJywgeFxuICBcbiAgaGFuZGxlcnMgPVxuICAgIGFkZEdhZGdldDogKHgsIHkpIC0+XG4gICAgZGVsR2FkZ2V0OiAoaWQpIC0+XG4gICAgYWRkV2lyZTogKGZyb20sIHRvKSAtPlxuICAgIGRlbFdpcmU6IChmcm9tLCB0bykgLT5cbiAgICBzZWxlY3RHYWRnZXQ6IChpZCkgLT5cbiAgICBtb3ZlR2FkZ2V0OiAoaWQsIHgsIHkpIC0+XG4gICAgICBcbiAgJHNjb3BlLiRvbiAnY2lyY3VpdCcsIChldmVudCwgdHlwZSwgYXJncy4uLikgLT5cbiAgICBjb25zb2xlLmxvZyAnQzonLCB0eXBlLCBhcmdzLi4uXG4gICAgaGFuZGxlcnNbdHlwZV0gYXJncy4uLlxuICAgIFxuICAjIHNldHVwID0gLT5cbiAgIyAgIGplZWJ1cy5hdHRhY2ggJ2NpcmN1aXQnXG4gICMgICAgIC5vbiAnc3luYycsIC0+XG4gICMgICAgICAgJHNjb3BlLmNpcmN1aXRzID0gQHJvd3NcbiAgIyAgICAgXG4gICMgc2V0dXAoKSAgaWYgJHNjb3BlLnNlcnZlclN0YXR1cyBpcyAnY29ubmVjdGVkJ1xuICAjICRzY29wZS4kb24gJ3dzLW9wZW4nLCBzZXR1cFxuIl19
>>>>>>> master
