(function() {
  var circuitsCtrl, ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('circuits', {
      url: '/circuits',
      templateUrl: '/circuits/circuits.html',
      controller: circuitsCtrl
    });
    return navbarProvider.add('/circuits', 'Circuits', 30);
  });

  circuitsCtrl = function($scope, jeebus) {
    var handlers, setup, updatePinList;
    $scope.circuits = {};
    $scope.gadgets = {
      Pipe: {
        name: 'Pipeline',
        shade: 'lightyellow',
        icon: '\uf061',
        inputs: 'In',
        outputs: 'Out'
      },
      Printer: {
        shade: 'lightblue',
        icon: '\uf02f',
        inputs: 'In In2'
      },
      StepGen: {
        shade: 'lightgreen',
        icon: '\uf013',
        inputs: 'Params',
        outputs: 'Out'
      },
      SSB: {
        shade: 'lightgray',
        icon: '\uf0b2',
        inputs: 'Cmds'
      }
    };
    $scope.circuit = {
      gadgets: {
        g1: {
          x: 120,
          y: 220,
          title: 'Gadget One',
          type: 'Pipe'
        },
        g2: {
          x: 300,
          y: 250,
          title: 'Gadget Two',
          type: 'Printer'
        },
        g3: {
          x: 320,
          y: 60,
          title: 'StepGen-X',
          type: 'StepGen'
        },
        g4: {
          x: 540,
          y: 70,
          title: 'SSB-X',
          type: 'SSB'
        },
        g5: {
          x: 340,
          y: 140,
          title: 'StepGen-Y',
          type: 'StepGen'
        },
        g6: {
          x: 520,
          y: 150,
          title: 'SSB-Y',
          type: 'SSB'
        }
      },
      wires: {
        'g1.Out/g2.In': 0,
        'g3.Out/g4.Cmds': 0,
        'g5.Out/g6.Cmds': 0
      },
      feeds: {
        'g2.In': [
          'some data', {
            Tag: 'blah',
            Msg: 'tagged data'
          }
        ],
        'g3.Params': [1000, 500],
        'g5.Params': [500, 1000]
      },
      labels: {
        In: 'g2.In'
      }
    };
    $scope.circuit = {
      gadgets: {},
      wires: []
    };
    updatePinList = function() {
      var g, gid, ins, p, _i, _len, _ref, _ref1;
      $scope.inputPins = [];
      _ref = $scope.circuit.gadgets;
      for (gid in _ref) {
        g = _ref[gid];
        if (ins = $scope.gadgets[g.type].inputs) {
          _ref1 = ins.split(' ');
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            p = _ref1[_i];
            $scope.inputPins.push("" + gid + "." + p);
          }
        }
      }
      return $scope.inputPins.sort();
    };
    $scope.$watch("circuits", (function(newValue, oldValue) {
      var each, old, _i, _len, _results;
      old = Object.keys(oldValue);
      angular.forEach(newValue, function(value, key) {
        var index, k;
        if (old.indexOf(key === -1)) {
          $scope.circuit.gadgets[key] = value;
          console.log("object " + key + " is added", value);
          if (value.wire != null) {
            k = "" + key + ".Out/" + value.wire.Out;
            $scope.circuit.wires[k] = 0;
          }
        }
        index = old.indexOf(key);
        if (index > -1) {
          return old.splice(index, 1);
        }
      });
      _results = [];
      for (_i = 0, _len = old.length; _i < _len; _i++) {
        each = old[_i];
        _results.push(console.log("this key is removed:", key));
      }
      return _results;
    }), true);
    $scope.$watch('addPin', function(pin) {
      var _base;
      if (pin) {
        if ((_base = $scope.circuit.feeds)[pin] == null) {
          _base[pin] = [];
        }
        console.log('addFeed', pin, $scope.circuit.feeds[pin].length);
        $scope.circuit.feeds[pin].push('');
        return $scope.addPin = null;
      }
    });
    $scope.delFeed = function(pin, index) {
      var items;
      items = $scope.circuit.feeds[pin];
      console.log('delFeed', pin, index, items[index]);
      items.splice(index, 1);
      if (items.length === 0) {
        return delete $scope.circuit.feeds[pin];
      }
    };
    $scope.$watch('currSel.id', function(x) {
      console.log('fix id', x);
      return updatePinList();
    });
    $scope.$watch('currSel.title', function(x) {
      return console.log('fix title', x);
    });
    handlers = {
      addGadget: function(x, y) {
        var id, obj, type;
        if ($scope.newtype != null) {
          id = "g" + String(Date.now());
          type = $scope.newtype;
          obj = {
            title: "" + type + "-" + id,
            type: $scope.newtype,
            x: x,
            y: y
          };
          return jeebus.put("/circuit/demo1/" + id, obj);
        }
      },
      delGadget: function(id) {
        return jeebus.put("/circuit/demo1/" + id);
      },
      addWire: function(from, to) {
        var id, obj;
        id = (from.split('.'))[0];
        obj = $scope.circuit.gadgets[id];
        obj.wire = {
          "Out": to
        };
        return jeebus.put("/circuit/demo1/" + id, obj);
      },
      delWire: function(from, to) {
        var id, obj;
        id = (from.split('.'))[0];
        obj = $scope.circuit.gadgets[id];
        obj.wire = null;
        return jeebus.put("/circuit/demo1/" + id, obj);
      },
      selectGadget: function(id) {},
      moveGadget: function(id, x, y) {
        var obj;
        obj = $scope.circuit.gadgets[id];
        obj.x = x;
        obj.y = y;
        return jeebus.put("/circuit/demo1/" + id, obj);
      }
    };
    $scope.$on('circuit', function() {
      var args, event, type;
      event = arguments[0], type = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      console.log.apply(console, ['C:', type].concat(__slice.call(args)));
      return handlers[type].apply(handlers, args);
    });
    setup = function() {
      return jeebus.attach('circuit/demo1').on('sync', function() {
        var args, obj, temp, _i, _len, _results;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        temp = this.rows;
        console.log("init circuits");
        _results = [];
        for (_i = 0, _len = temp.length; _i < _len; _i++) {
          obj = temp[_i];
          _results.push($scope.circuits[obj.id] = obj);
        }
        return _results;
      }).on('data', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return console.log(111, args);
      });
    };
    if ($scope.serverStatus === 'connected') {
      setup();
    }
    return $scope.$on('ws-open', setup);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
