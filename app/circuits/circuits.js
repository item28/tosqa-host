(function() {
  var circuitsCtrl, ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('circuits', {
      url: '/circuits',
      templateUrl: '/circuits/circuits.html',
      controller: circuitsCtrl
    });
    return navbarProvider.add('/circuits', 'Circuits', 30);
  });

  circuitsCtrl = function($scope, jeebus) {
    var handlers, setup, updatePinList;
    $scope.circuits = {};
    $scope.gadgets = {
      Pipe: {
        name: 'Pipeline',
        shade: 'lightyellow',
        icon: '\uf061',
        inputs: 'In',
        outputs: 'Out'
      },
      Printer: {
        shade: 'lightblue',
        icon: '\uf02f',
        inputs: 'In In2'
      },
      clock: {
        shade: 'pink',
        icon: '\uf017',
        inputs: 'Rate',
        outputs: 'Pusle'
      },
      tosqa_logo: {
        shade: 'pink',
        icon: 'TQ',
        inputs: 'Rate',
        outputs: 'X Y'
      },
      StepGen: {
        shade: 'lightgreen',
        icon: '\uf013',
        inputs: 'Params',
        outputs: 'Out'
      },
      SSB: {
        shade: 'lightgray',
        icon: '\uf0b2',
        inputs: 'Cmds'
      }
    };
    $scope.circuit = {
      gadgets: {
        g1: {
          x: 120,
          y: 220,
          title: 'Gadget One',
          type: 'Pipe'
        },
        g2: {
          x: 300,
          y: 250,
          title: 'Gadget Two',
          type: 'Printer'
        },
        g3: {
          x: 320,
          y: 60,
          title: 'StepGen-X',
          type: 'StepGen'
        },
        g4: {
          x: 540,
          y: 70,
          title: 'SSB-X',
          type: 'SSB'
        },
        g5: {
          x: 340,
          y: 140,
          title: 'StepGen-Y',
          type: 'StepGen'
        },
        g6: {
          x: 520,
          y: 150,
          title: 'SSB-Y',
          type: 'SSB'
        }
      },
      wires: {
        'g1.Out/g2.In': 0,
        'g3.Out/g4.Cmds': 0,
        'g5.Out/g6.Cmds': 0
      },
      feeds: {
        'g2.In': [
          'some data', {
            Tag: 'blah',
            Msg: 'tagged data'
          }
        ],
        'g3.Params': [1000, 500],
        'g5.Params': [500, 1000]
      },
      labels: {
        In: 'g2.In'
      }
    };
    $scope.circuit = {
      gadgets: {},
      wires: [],
      feeds: []
    };
    updatePinList = function() {
      var g, gid, ins, p, _i, _len, _ref, _ref1;
      $scope.inputPins = [];
      _ref = $scope.circuit.gadgets;
      for (gid in _ref) {
        g = _ref[gid];
        if (ins = $scope.gadgets[g.type].inputs) {
          _ref1 = ins.split(' ');
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            p = _ref1[_i];
            $scope.inputPins.push("" + gid + "." + p);
          }
        }
      }
      return $scope.inputPins.sort();
    };
    $scope.redraw = function() {
      console.log('redraw');
      console.log($scope.circuit);
      $scope.circuit = {
        gadgets: {},
        wires: {},
        feeds: {}
      };
      return jeebus.attach('circuit/demo1').on('data', function() {
        var args, obj, temp, _i, _j, _len, _len1, _results;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        temp = this.rows;
        for (_i = 0, _len = temp.length; _i < _len; _i++) {
          obj = temp[_i];
          console.log(obj);
          $scope.circuit.gadgets[obj.id] = obj;
        }
        _results = [];
        for (_j = 0, _len1 = temp.length; _j < _len1; _j++) {
          obj = temp[_j];
          angular.forEach(obj.feed, function(v, k) {
            return $scope.circuit.feeds["" + obj.id + "." + k] = v;
          });
          _results.push(angular.forEach(obj.wire, function(v, k) {
            var to;
            to = (v.split("."))[0];
            if ($scope.circuit.gadgets[to] != null) {
              console.log("" + obj.id + "." + k + "/" + v);
              return $scope.circuit.wires["" + obj.id + "." + k + "/" + v] = 0;
            }
          }));
        }
        return _results;
      });
    };
    $scope.$watch('addPin', function(pin) {
      var _base;
      if (pin) {
        if ((_base = $scope.circuit.feeds)[pin] == null) {
          _base[pin] = [];
        }
        console.log('addFeed', pin, $scope.circuit.feeds[pin].length);
        $scope.circuit.feeds[pin].push('');
        return $scope.addPin = null;
      }
    });
    $scope.delFeed = function(pin, index) {
      var items;
      items = $scope.circuit.feeds[pin];
      console.log('delFeed', pin, index, items[index]);
      items.splice(index, 1);
      if (items.length === 0) {
        return delete $scope.circuit.feeds[pin];
      }
    };
    $scope.$watch('currSel.id', function(x) {
      console.log('fix id', x);
      return updatePinList();
    });
    $scope.$watch('currSel.title', function(x) {
      return console.log('fix title', x);
    });
    handlers = {
      addGadget: function(x, y) {
        var id, obj, type;
        if ($scope.newtype != null) {
          id = "g" + String(Date.now() % 1234567);
          type = $scope.newtype;
          obj = {
            title: "" + type + "-" + id,
            type: $scope.newtype,
            x: x,
            y: y
          };
          jeebus.put("/circuit/demo1/" + id, obj);
          return $scope.redraw();
        }
      },
      delGadget: function(id) {
        jeebus.put("/circuit/demo1/" + id);
        return $scope.redraw();
      },
      addWire: function(from, to) {
        var id, obj, output;
        id = (from.split('.'))[0];
        output = (from.split('.'))[1];
        obj = $scope.circuit.gadgets[id];
        obj.wire = obj.wire || {};
        obj.wire[output] = to;
        jeebus.put("/circuit/demo1/" + id, obj);
        return $scope.redraw();
      },
      delWire: function(from, to) {
        var id, obj;
        id = (from.split('.'))[0];
        obj = $scope.circuit.gadgets[id];
        obj.wire = null;
        jeebus.put("/circuit/demo1/" + id, obj);
        return $scope.redraw();
      },
      selectGadget: function(id) {},
      moveGadget: function(id, x, y) {
        var obj;
        obj = $scope.circuit.gadgets[id];
        obj.x = x;
        obj.y = y;
        jeebus.put("/circuit/demo1/" + id, obj);
        return $scope.redraw();
      }
    };
    $scope.$on('circuit', function() {
      var args, event, type;
      event = arguments[0], type = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      console.log.apply(console, ['C:', type].concat(__slice.call(args)));
      return handlers[type].apply(handlers, args);
    });
    setup = function() {
      jeebus.attach('circuit/demo1').on('sync', function() {
        var args, obj, temp, _i, _len;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        temp = this.rows;
        for (_i = 0, _len = temp.length; _i < _len; _i++) {
          obj = temp[_i];
          $scope.circuits[obj.id] = obj;
        }
        return console.log("init circuits");
      });
      return $scope.redraw();
    };
    if ($scope.serverStatus === 'connected') {
      setup();
    }
    return $scope.$on('ws-open', setup);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2lyY3VpdHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxnQkFBQTtJQUFBLGtCQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLE9BQU8sQ0FBQyxNQUFSLENBQWUsT0FBZixDQUFMLENBQUE7O0FBQUEsRUFFQSxFQUFFLENBQUMsTUFBSCxDQUFVLFNBQUMsY0FBRCxFQUFpQixjQUFqQixHQUFBO0FBQ1IsSUFBQSxjQUFjLENBQUMsS0FBZixDQUFxQixVQUFyQixFQUNFO0FBQUEsTUFBQSxHQUFBLEVBQUssV0FBTDtBQUFBLE1BQ0EsV0FBQSxFQUFhLHlCQURiO0FBQUEsTUFFQSxVQUFBLEVBQVksWUFGWjtLQURGLENBQUEsQ0FBQTtXQUlBLGNBQWMsQ0FBQyxHQUFmLENBQW1CLFdBQW5CLEVBQWdDLFVBQWhDLEVBQTRDLEVBQTVDLEVBTFE7RUFBQSxDQUFWLENBRkEsQ0FBQTs7QUFBQSxFQVNBLFlBQUEsR0FBZSxTQUFDLE1BQUQsRUFBUyxNQUFULEdBQUE7QUFFYixRQUFBLDhCQUFBO0FBQUEsSUFBQSxNQUFNLENBQUMsUUFBUCxHQUFpQixFQUFqQixDQUFBO0FBQUEsSUFFQSxNQUFNLENBQUMsT0FBUCxHQUNFO0FBQUEsTUFBQSxJQUFBLEVBQ0U7QUFBQSxRQUFBLElBQUEsRUFBTSxVQUFOO0FBQUEsUUFDQSxLQUFBLEVBQU8sYUFEUDtBQUFBLFFBRUEsSUFBQSxFQUFNLFFBRk47QUFBQSxRQUdBLE1BQUEsRUFBUSxJQUhSO0FBQUEsUUFJQSxPQUFBLEVBQVMsS0FKVDtPQURGO0FBQUEsTUFNQSxPQUFBLEVBQ0U7QUFBQSxRQUFBLEtBQUEsRUFBTyxXQUFQO0FBQUEsUUFDQSxJQUFBLEVBQU0sUUFETjtBQUFBLFFBRUEsTUFBQSxFQUFRLFFBRlI7T0FQRjtBQUFBLE1BVUEsS0FBQSxFQUNFO0FBQUEsUUFBQSxLQUFBLEVBQU8sTUFBUDtBQUFBLFFBQ0EsSUFBQSxFQUFN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cmNlc0NvbnRlbnQiOlsibmcgPSBhbmd1bGFyLm1vZHVsZSAnbXlBcHAnXG5cbm5nLmNvbmZpZyAoJHN0YXRlUHJvdmlkZXIsIG5hdmJhclByb3ZpZGVyKSAtPlxuICAkc3RhdGVQcm92aWRlci5zdGF0ZSAnY2lyY3VpdHMnLFxuICAgIHVybDogJy9jaXJjdWl0cydcbiAgICB0ZW1wbGF0ZVVybDogJy9jaXJjdWl0cy9jaXJjdWl0cy5odG1sJ1xuICAgIGNvbnRyb2xsZXI6IGNpcmN1aXRzQ3RybFxuICBuYXZiYXJQcm92aWRlci5hZGQgJy9jaXJjdWl0cycsICdDaXJjdWl0cycsIDMwXG5cbmNpcmN1aXRzQ3RybCA9ICgkc2NvcGUsIGplZWJ1cykgLT5cbiAgXG4gICRzY29wZS5jaXJjdWl0cyA9e31cbiAgXG4gICRzY29wZS5nYWRnZXRzID1cbiAgICBQaXBlOlxuICAgICAgbmFtZTogJ1BpcGVsaW5lJ1xuICAgICAgc2hhZGU6ICdsaWdodHllbGxvdydcbiAgICAgIGljb246ICdcXHVmMDYxJyAjIGZhLWFycm93LXJpZ2h0XG4gICAgICBpbnB1dHM6ICdJbidcbiAgICAgIG91dHB1dHM6ICdPdXQnXG4gICAgUHJpbnRlcjpcbiAgICAgIHNoYWRlOiAnbGlnaHRibHVlJ1xuICAgICAgaWNvbjogJ1xcdWYwMmYnICMgZmEtcHJpbnRcbiAgICAgIGlucHV0czogJ0luIEluMidcbiAgICBjbG9jazpcbiAgICAgIHNoYWRlOiAncGluaydcbiAgICAgIGljb246ICdcXHVmMDE3JyAjIGZhLWNsb2NrLW9cbiAgICAgIGlucHV0czogJ1JhdGUnXG4gICAgICBvdXRwdXRzOiAnUHVzbGUnXG4gICAgdG9zcWFfbG9nbzpcbiAgICAgIHNoYWRlOiAncGluaydcbiAgICAgIGljb246ICdUUScgIyBmYS1jbG9jay1vXG4gICAgICBpbnB1dHM6ICdSYXRlJ1xuICAgICAgb3V0cHV0czogJ1ggWSdcbiAgICBTdGVwR2VuOlxuICAgICAgc2hhZGU6ICdsaWdodGdyZWVuJ1xuICAgICAgaWNvbjogJ1xcdWYwMTMnICMgZmEtY29nXG4gICAgICBpbnB1dHM6ICdQYXJhbXMnXG4gICAgICBvdXRwdXRzOiAnT3V0J1xuICAgIFNTQjpcbiAgICAgIHNoYWRlOiAnbGlnaHRncmF5J1xuICAgICAgaWNvbjogJ1xcdWYwYjInICMgZmEtYXJyb3dzLWFsdFxuICAgICAgaW5wdXRzOiAnQ21kcydcbiAgICAgIFxuICAkc2NvcGUuY2lyY3VpdCA9XG4gICAgZ2FkZ2V0czpcbiAgICAgIGcxOiB7IHg6IDEyMCwgeTogMjIwLCB0aXRsZTogJ0dhZGdldCBPbmUnLCB0eXBlOiAnUGlwZScsICAgIH1cbiAgICAgIGcyOiB7IHg6IDMwMCwgeTogMjUwLCB0aXRsZTogJ0dhZGdldCBUd28nLCB0eXBlOiAnUHJpbnRlcicsIH1cbiAgICAgIGczOiB7IHg6IDMyMCwgeTogIDYwLCB0aXRsZTogJ1N0ZXBHZW4tWCcsICB0eXBlOiAnU3RlcEdlbicsIH1cbiAgICAgIGc0OiB7IHg6IDU0MCwgeTogIDcwLCB0aXRsZTogJ1NTQi1YJywgICAgICB0eXBlOiAnU1NCJywgICAgIH1cbiAgICAgIGc1OiB7IHg6IDM0MCwgeTogMTQwLCB0aXRsZTogJ1N0ZXBHZW4tWScsICB0eXBlOiAnU3RlcEdlbicsIH1cbiAgICAgIGc2OiB7IHg6IDUyMCwgeTogMTUwLCB0aXRsZTogJ1NTQi1ZJywgICAgICB0eXBlOiAnU1NCJywgICAgIH1cbiAgICB3aXJlczpcbiAgICAgICdnMS5PdXQvZzIuSW4nOiAwXG4gICAgICAnZzMuT3V0L2c0LkNtZHMnOiAwXG4gICAgICAnZzUuT3V0L2c2LkNtZHMnOiAwXG4gICAgZmVlZHM6XG4gICAgICAnZzIuSW4nOiBbICdzb21lIGRhdGEnLCB7IFRhZzogJ2JsYWgnLCBNc2c6ICd0YWdnZWQgZGF0YScgfSBdXG4gICAgICAnZzMuUGFyYW1zJzogWyAxMDAwLCA1MDAgXVxuICAgICAgJ2c1LlBhcmFtcyc6IFsgNTAwLCAxMDAwIF1cbiAgICBsYWJlbHM6XG4gICAgICBJbjogJ2cyLkluJ1xuICAgICAgXG4gICRzY29wZS5jaXJjdWl0ID1cbiAgICBnYWRnZXRzOnt9XG4gICAgd2lyZXM6W11cbiAgICBmZWVkczpbXVxuICAgICAgXG4gIHVwZGF0ZVBpbkxpc3QgPSAoKSAtPlxuICAgICRzY29wZS5pbnB1dFBpbnMgPSBbXVxuICAgIGZvciBnaWQsIGcgb2YgJHNjb3BlLmNpcmN1aXQuZ2FkZ2V0c1xuICAgICAgaWYgaW5zID0gJHNjb3BlLmdhZGdldHNbZy50eXBlXS5pbnB1dHNcbiAgICAgICAgZm9yIHAgaW4gaW5zLnNwbGl0ICcgJ1xuICAgICAgICAgICRzY29wZS5pbnB1dFBpbnMucHVzaCBcIiN7Z2lkfS4je3B9XCJcbiAgICAkc2NvcGUuaW5wdXRQaW5zLnNvcnQoKVxuICBcbiAgI2Z1bmN0aW9uIHRvIHJlZHJhdyBlZGl0b3JcbiAgJHNjb3BlLnJlZHJhdyA9KCkgLT5cbiAgICBjb25zb2xlLmxvZyAncmVkcmF3J1xuICAgIGNvbnNvbGUubG9nICRzY29wZS5jaXJjdWl0XG4gICAgJHNjb3BlLmNpcmN1aXQgPVxuICAgICAgZ2FkZ2V0czp7fVxuICAgICAgd2lyZXM6e31cbiAgICAgIGZlZWRzOnt9XG4gICAgamVlYnVzLmF0dGFjaCAnY2lyY3VpdC9kZW1vMSdcbiAgICAgLm9uICdkYXRhJywgKGFyZ3MuLi4pIC0+XG4gICAgICAgIHRlbXAgPSBAcm93c1xuICAgICAgICBmb3Igb2JqIGluIHRlbXBcbiAgICAgICAgICBjb25zb2xlLmxvZyBvYmpcbiAgICAgICAgICAkc2NvcGUuY2lyY3VpdC5nYWRnZXRzW29iai5pZF0gPSBvYmpcbiAgICAgICAgZm9yIG9iaiBpbiB0ZW1wXG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoIG9iai5mZWVkLCAodixrKS0+IFxuICAgICAgICAgICAgJHNjb3BlLmNpcmN1aXQuZmVlZHNbXCIje29iai5pZH0uI3trfVwiXSA9IHZcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2ggb2JqLndpcmUsICh2LGspLT5cbiAgICAgICAgICAgIHRvID0gKHYuc3BsaXQgXCIuXCIpWzBdXG4gICAgICAgICAgICBpZiAkc2NvcGUuY2lyY3VpdC5nYWRnZXRzW3RvXT9cbiAgICAgICAgICAgICAgIyBUT0RPOnJlbW92ZSB3aXJlIGZyb20gZGJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2cgXCIje29iai5pZH0uI3trfS8je3Z9XCJcbiAgICAgICAgICAgICAgJHNjb3BlLmNpcmN1aXQud2lyZXNbXCIje29iai5pZH0uI3trfS8je3Z9XCJdID0gMFxuXG4gICRzY29wZS4kd2F0Y2ggJ2FkZFBpbicsIChwaW4pIC0+XG4gICAgaWYgcGluXG4gICAgICAkc2NvcGUuY2lyY3VpdC5mZWVkc1twaW5dID89IFtdXG4gICAgICBjb25zb2xlLmxvZyAnYWRkRmVlZCcsIHBpbiwgJHNjb3BlLmNpcmN1aXQuZmVlZHNbcGluXS5sZW5ndGhcbiAgICAgICRzY29wZS5jaXJjdWl0LmZlZWRzW3Bpbl0ucHVzaCAnJ1xuICAgICAgJHNjb3BlLmFkZFBpbiA9IG51bGxcblxuICAkc2NvcGUuZGVsRmVlZCA9IChwaW4sIGluZGV4KSAtPlxuICAgIGl0ZW1zID0gJHNjb3BlLmNpcmN1aXQuZmVlZHNbcGluXVxuICAgIGNvbnNvbGUubG9nICdkZWxGZWVkJywgcGluLCBpbmRleCwgaXRlbXNbaW5kZXhdXG4gICAgaXRlbXMuc3BsaWNlIGluZGV4LCAxXG4gICAgZGVsZXRlICRzY29wZS5jaXJjdWl0LmZlZWRzW3Bpbl0gIGlmIGl0ZW1zLmxlbmd0aCBpcyAwXG4gIFxuICAkc2NvcGUuJHdhdGNoICdjdXJyU2VsLmlkJywgKHgpIC0+XG4gICAgY29uc29sZS5sb2cgJ2ZpeCBpZCcsIHhcbiAgICB1cGRhdGVQaW5MaXN0KCkgIyBmb3IgbmV3IGFuZCBkZWxldGVkIGdhZGdldHNcbiAgJHNjb3BlLiR3YXRjaCAnY3VyclNlbC50aXRsZScsICh4KSAtPlxuICAgIGNvbnNvbGUubG9nICdmaXggdGl0bGUnLCB4XG4gICAgICBcbiAgaGFuZGxlcnMgPVxuICAgIGFkZEdhZGdldDogKHgsIHkpIC0+ICAgICAgXG4gICAgICBpZiAkc2NvcGUubmV3dHlwZT8gXG4gICAgICAgICMgamVlYnVzLnNlbmQgeyBjbWQ6ICdjZWQtYWcnLCBvYmp9XG4gICAgICAgIGlkPSBcImdcIiArIFN0cmluZyBEYXRlLm5vdygpJTEyMzQ1NjdcbiAgICAgICAgdHlwZSA9ICRzY29wZS5uZXd0eXBlXG4gICAgICAgIG9iaiA9IHt0aXRsZTpcIiN7dHlwZX0tI3tpZH1cIiwgdHlwZTokc2NvcGUubmV3dHlwZSwgeDp4LCB5Onl9XG4gICAgICAgIGplZWJ1cy5wdXQgXCIvY2lyY3VpdC9kZW1vMS8je2lkfVwiLCBvYmpcbiAgICAgICAgJHNjb3BlLnJlZHJhdygpICAgICAgICAgIFxuICAgICAgICBcbiAgICBkZWxHYWRnZXQ6IChpZCkgLT5cbiAgICAgICMgamVlYnVzLnNlbmQgeyBjbWQ6ICdjZWQtZGcnLCBvYmosIGlkfSAgICAgIFxuICAgICAgamVlYnVzLnB1dCBcIi9jaXJjdWl0L2RlbW8xLyN7aWR9XCIgICMgcHV0IG5pbCB2YWx1ZSB0byBkZWxldGUgaWRcbiAgICAgICRzY29wZS5yZWRyYXcoKSAgICAgICAgICBcbiAgICAgIFxuICAgIGFkZFdpcmU6IChmcm9tLCB0bykgLT4gICBcbiAgICAgICNqZWVidXMuc2VuZCB7IGNtZDogJ2NlZC1hdycsIG9iaiwgZnJvbSwgdG8gfVxuICAgICAgaWQgPSAoZnJvbS5zcGxpdCAnLicpWzBdXG4gICAgICBvdXRwdXQgPSAoZnJvbS5zcGxpdCAnLicpWzFdXG4gICAgICBvYmogPSAkc2NvcGUuY2lyY3VpdC5nYWRnZXRzW2lkXVxuICAgICAgb2JqLndpcmUgPSBvYmoud2lyZSBvciB7fVxuICAgICAgb2JqLndpcmVbb3V0cHV0XSA9IHRvXG4gICAgICBqZWVidXMucHV0IFwiL2NpcmN1aXQvZGVtbzEvI3tpZH1cIiwgb2JqIFxuICAgICAgJHNjb3BlLnJlZHJhdygpXG4gICAgZGVsV2lyZTogKGZyb20sIHRvKSAtPiAgICAjamVlYnVzLnNlbmQgeyBjbWQ6ICdjZWQtZHcnLCBvYmosIGZyb20sIHRvIH1cbiAgICAgIGlkID0gKGZyb20uc3BsaXQgJy4nKVswXVxuICAgICAgb2JqID0gJHNjb3BlLmNpcmN1aXQuZ2FkZ2V0c1tpZF1cbiAgICAgIG9iai53aXJlID0gbnVsbFxuICAgICAgamVlYnVzLnB1dCBcIi9jaXJjdWl0L2RlbW8xLyN7aWR9XCIsIG9ialxuICAgICAgJHNjb3BlLnJlZHJhdygpXG4gICAgc2VsZWN0R2FkZ2V0OiAoaWQpIC0+ICAgICAjamVlYnVzLnNlbmQgeyBjbWQ6ICdjZWQtc2cnLCBvYmosIGlkICAgICAgIH1cbiAgICBtb3ZlR2FkZ2V0OiAoaWQsIHgsIHkpIC0+ICNqZWVidXMuc2VuZCB7IGNtZDogJ2NlZC1tZycsIG9iaiwgaWQsIHgsIHkgfVxuICAgICAgb2JqID0gJHNjb3BlLmNpcmN1aXQuZ2FkZ2V0c1tpZF1cbiAgICAgIG9iai54ID0geFxuICAgICAgb2JqLnkgPSB5XG4gICAgICBqZWVidXMucHV0IFwiL2NpcmN1aXQvZGVtbzEvI3tpZH1cIiwgb2JqXG4gICAgICAkc2NvcGUucmVkcmF3KCkgICAgICAgICAgXG4gICAgICBcblxuXG4gICRzY29wZS4kb24gJ2NpcmN1aXQnLCAoZXZlbnQsIHR5cGUsIGFyZ3MuLi4pIC0+XG4gICAgY29uc29sZS5sb2cgJ0M6JywgdHlwZSwgYXJncy4uLlxuICAgIGhhbmRsZXJzW3R5cGVdIGFyZ3MuLi5cbiAgICBcbiAgXG4gICAgXG4gIHNldHVwID0gLT5cbiAgICBqZWVidXMuYXR0YWNoICdjaXJjdWl0L2RlbW8xJ1xuICAgICAub24gJ3N5bmMnLCAoYXJncy4uLikgLT5cbiAgICAgICAgdGVtcCA9IEByb3dzXG4gICAgICAgIGZvciBvYmogaW4gdGVtcFxuICAgICAgICAgICRzY29wZS5jaXJjdWl0c1tvYmouaWRdID0gb2JqXG4gICAgICAgIGNvbnNvbGUubG9nIFwiaW5pdCBjaXJjdWl0c1wiXG4gICAgICMgLm9uICdkYXRhJywgKGFyZ3MuLi4pIC0+XG4gICAgICMgICAgY29uc29sZS5sb2cgMTExLCBhcmdzXG4gICAgICRzY29wZS5yZWRyYXcoKVxuICAgIFxuICAgICAgICAjMS4gVE9ETzogY2hlY2sgZm9yIHZhbHVlLCBlbHNlIHJlbW92ZVxuICAgICAgICAjMi4gYWRkIHRvIGNpcmN1aXRzXG4gICAgICAgICMgJHNjb3BlLmNpcmN1aXRzIHB1c2ggaywgdlxuICAgICAgICAjMy4gdGVsbCBlZGl0b3JcbiAgICAjIGplZWJ1cy5hdHRhY2ggJ2RlbW8nXG4gICAgIyAgLm9uICdkYXRhJywgKGFyZ3MuLi4pIC0+XG4gICAgIyAgICAgY29uc29sZS5sb2cgJ2RhdGEtdGltJywgYXJnc1xuICAgICAgXG5cbiAgc2V0dXAoKSAgaWYgJHNjb3BlLnNlcnZlclN0YXR1cyBpcyAnY29ubmVjdGVkJ1xuICAkc2NvcGUuJG9uICd3cy1vcGVuJywgc2V0dXBcbiJdfQ==
