(function() {
  var circuitsCtrl, ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('circuits', {
      url: '/circuits',
      templateUrl: '/circuits/circuits.html',
      controller: circuitsCtrl
    });
    return navbarProvider.add('/circuits', 'Circuits', 30);
  });

  circuitsCtrl = function($scope, jeebus) {
    var handlers, updatePinList;
    $scope.gadgets = {
      Pipe: {
        name: 'Pipeline',
        shade: 'lightyellow',
        icon: '\uf061',
        inputs: 'In',
        outputs: 'Out'
      },
      Printer: {
        shade: 'lightblue',
        icon: '\uf02f',
        inputs: 'In In2'
      }
    };
    $scope.circuit = {
      gadgets: [
        {
          id: 'g1',
          x: 120,
          y: 100,
          title: 'Gadget One',
          type: 'Printer'
        }, {
          id: 'g2',
          x: 120,
          y: 200,
          title: 'Gadget Two',
          type: 'Pipe'
        }
      ],
      wires: [
        {
          from: 'g2.Out',
          to: 'g1.In',
          cap: 0
        }
      ],
      feeds: {
        'g1.In': [
          'some data', {
            Tag: 'blah',
            Msg: 'tagged data'
          }
        ]
      },
      labels: {
        In: 'g2.In'
      }
    };
    updatePinList = function() {
      var g, ins, p, _i, _j, _len, _len1, _ref, _ref1;
      $scope.inputPins = [];
      _ref = $scope.circuit.gadgets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        g = _ref[_i];
        if (ins = $scope.gadgets[g.type].inputs) {
          _ref1 = ins != null ? ins.split(' ') : void 0;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            p = _ref1[_j];
            if (p.dir === 'in') {
              $scope.inputPins.push("" + g.id + "." + p.name);
            }
          }
        }
      }
      return $scope.inputPins.sort();
    };
    $scope.$watch('addPin', function(pin) {
      var _base;
      if (pin) {
        if ((_base = $scope.circuit.feeds)[pin] == null) {
          _base[pin] = [];
        }
        console.log('addFeed', pin, $scope.circuit.feeds[pin].length);
        $scope.circuit.feeds[pin].push('');
        return $scope.addPin = null;
      }
    });
    $scope.delFeed = function(pin, index) {
      var items;
      items = $scope.circuit.feeds[pin];
      console.log('delFeed', pin, index, items[index]);
      items.splice(index, 1);
      if (items.length === 0) {
        return delete $scope.circuit.feeds[pin];
      }
    };
    $scope.$watch('currSel.id', function(x) {
      console.log('fix id', x);
      return updatePinList();
    });
    $scope.$watch('currSel.title', function(x) {
      return console.log('fix title', x);
    });
    handlers = {
      addGadget: function(x, y) {},
      delGadget: function(id) {},
      addWire: function(from, to) {},
      delWire: function(from, to) {},
      selectGadget: function(id) {},
      moveGadget: function(id, x, y) {}
    };
    return $scope.$on('circuit', function() {
      var args, event, type;
      event = arguments[0], type = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      console.log.apply(console, ['C:', type].concat(__slice.call(args)));
      return handlers[type].apply(handlers, args);
    });
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2lyY3VpdHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxnQkFBQTtJQUFBLGtCQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLE9BQU8sQ0FBQyxNQUFSLENBQWUsT0FBZixDQUFMLENBQUE7O0FBQUEsRUFFQSxFQUFFLENBQUMsTUFBSCxDQUFVLFNBQUMsY0FBRCxFQUFpQixjQUFqQixHQUFBO0FBQ1IsSUFBQSxjQUFjLENBQUMsS0FBZixDQUFxQixVQUFyQixFQUNFO0FBQUEsTUFBQSxHQUFBLEVBQUssV0FBTDtBQUFBLE1BQ0EsV0FBQSxFQUFhLHlCQURiO0FBQUEsTUFFQSxVQUFBLEVBQVksWUFGWjtLQURGLENBQUEsQ0FBQTtXQUlBLGNBQWMsQ0FBQyxHQUFmLENBQW1CLFdBQW5CLEVBQWdDLFVBQWhDLEVBQTRDLEVBQTVDLEVBTFE7RUFBQSxDQUFWLENBRkEsQ0FBQTs7QUFBQSxFQVNBLFlBQUEsR0FBZSxTQUFDLE1BQUQsRUFBUyxNQUFULEdBQUE7QUFFYixRQUFBLHVCQUFBO0FBQUEsSUFBQSxNQUFNLENBQUMsT0FBUCxHQUNFO0FBQUEsTUFBQSxJQUFBLEVBQ0U7QUFBQSxRQUFBLElBQUEsRUFBTSxVQUFOO0FBQUEsUUFDQSxLQUFBLEVBQU8sYUFEUDtBQUFBLFFBRUEsSUFBQSxFQUFNLFFBRk47QUFBQSxRQUdBLE1BQUEsRUFBUSxJQUhSO0FBQUEsUUFJQSxPQUFBLEVBQVMsS0FKVDtPQURGO0FBQUEsTUFNQSxPQUFBLEVBQ0U7QUFBQSxRQUFBLEtBQUEsRUFBTyxXQUFQO0FBQUEsUUFDQSxJQUFBLEVBQU0sUUFETjtBQUFBLFFBRUEsTUFBQSxFQUFRLFFBRlI7T0FQRjtLQURGLENBQUE7QUFBQSxJQVlBLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7QUFBQSxNQUFBLE9BQUEsRUFBUztRQUNQO0FBQUEsVUFBRSxFQUFBLEVBQUksSUFBTjtBQUFBLFVBQVksQ0FBQSxF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JHN0YXRlUHJvdmlkZXIsIG5hdmJhclByb3ZpZGVyKSAtPlxuICAkc3RhdGVQcm92aWRlci5zdGF0ZSAnY2lyY3VpdHMnLFxuICAgIHVybDogJy9jaXJjdWl0cydcbiAgICB0ZW1wbGF0ZVVybDogJy9jaXJjdWl0cy9jaXJjdWl0cy5odG1sJ1xuICAgIGNvbnRyb2xsZXI6IGNpcmN1aXRzQ3RybFxuICBuYXZiYXJQcm92aWRlci5hZGQgJy9jaXJjdWl0cycsICdDaXJjdWl0cycsIDMwXG5cbmNpcmN1aXRzQ3RybCA9ICgkc2NvcGUsIGplZWJ1cykgLT5cbiAgICBcbiAgJHNjb3BlLmdhZGdldHMgPVxuICAgIFBpcGU6XG4gICAgICBuYW1lOiAnUGlwZWxpbmUnXG4gICAgICBzaGFkZTogJ2xpZ2h0eWVsbG93J1xuICAgICAgaWNvbjogJ1xcdWYwNjEnICMgZmEtYXJyb3ctcmlnaHRcbiAgICAgIGlucHV0czogJ0luJ1xuICAgICAgb3V0cHV0czogJ091dCdcbiAgICBQcmludGVyOlxuICAgICAgc2hhZGU6ICdsaWdodGJsdWUnXG4gICAgICBpY29uOiAnXFx1ZjAyZicgIyBmYS1wcmludFxuICAgICAgaW5wdXRzOiAnSW4gSW4yJ1xuICAgICAgXG4gICRzY29wZS5jaXJjdWl0ID1cbiAgICBnYWRnZXRzOiBbXG4gICAgICB7IGlkOiAnZzEnLCB4OiAxMjAsIHk6IDEwMCwgdGl0bGU6ICdHYWRnZXQgT25lJywgdHlwZTogJ1ByaW50ZXInIH1cbiAgICAgIHsgaWQ6ICdnMicsIHg6IDEyMCwgeTogMjAwLCB0aXRsZTogJ0dhZGdldCBUd28nLCB0eXBlOiAnUGlwZScgfVxuICAgIF1cbiAgICB3aXJlczogW1xuICAgICAgeyBmcm9tOiAnZzIuT3V0JywgdG86ICdnMS5JbicsIGNhcDogMCB9XG4gICAgXVxuICAgIGZlZWRzOlxuICAgICAgJ2cxLkluJzogWyAnc29tZSBkYXRhJywgeyBUYWc6ICdibGFoJywgTXNnOiAndGFnZ2VkIGRhdGEnIH0gXVxuICAgIGxhYmVsczpcbiAgICAgIEluOiAnZzIuSW4nXG4gICAgICBcbiAgdXBkYXRlUGluTGlzdCA9ICgpIC0+XG4gICAgJHNjb3BlLmlucHV0UGlucyA9IFtdXG4gICAgZm9yIGcgaW4gJHNjb3BlLmNpcmN1aXQuZ2FkZ2V0c1xuICAgICAgaWYgaW5zID0gJHNjb3BlLmdhZGdldHNbZy50eXBlXS5pbnB1dHNcbiAgICAgICAgZm9yIHAgaW4gaW5zPy5zcGxpdCgnICcpIHdoZW4gcC5kaXIgaXMgJ2luJ1xuICAgICAgICAgICRzY29wZS5pbnB1dFBpbnMucHVzaCBcIiN7Zy5pZH0uI3twLm5hbWV9XCJcbiAgICAkc2NvcGUuaW5wdXRQaW5zLnNvcnQoKVxuICBcbiAgJHNjb3BlLiR3YXRjaCAnYWRkUGluJywgKHBpbikgLT5cbiAgICBpZiBwaW5cbiAgICAgICRzY29wZS5jaXJjdWl0LmZlZWRzW3Bpbl0gPz0gW11cbiAgICAgIGNvbnNvbGUubG9nICdhZGRGZWVkJywgcGluLCAkc2NvcGUuY2lyY3VpdC5mZWVkc1twaW5dLmxlbmd0aFxuICAgICAgJHNjb3BlLmNpcmN1aXQuZmVlZHNbcGluXS5wdXNoICcnXG4gICAgICAkc2NvcGUuYWRkUGluID0gbnVsbFxuICAgIFxuICAkc2NvcGUuZGVsRmVlZCA9IChwaW4sIGluZGV4KSAtPlxuICAgIGl0ZW1zID0gJHNjb3BlLmNpcmN1aXQuZmVlZHNbcGluXVxuICAgIGNvbnNvbGUubG9nICdkZWxGZWVkJywgcGluLCBpbmRleCwgaXRlbXNbaW5kZXhdXG4gICAgaXRlbXMuc3BsaWNlIGluZGV4LCAxXG4gICAgZGVsZXRlICRzY29wZS5jaXJjdWl0LmZlZWRzW3Bpbl0gIGlmIGl0ZW1zLmxlbmd0aCBpcyAwXG4gIFxuICAkc2NvcGUuJHdhdGNoICdjdXJyU2VsLmlkJywgKHgpIC0+XG4gICAgY29uc29sZS5sb2cgJ2ZpeCBpZCcsIHhcbiAgICB1cGRhdGVQaW5MaXN0KCkgIyBmb3IgbmV3IGFuZCBkZWxldGVkIGdhZGdldHNcbiAgJHNjb3BlLiR3YXRjaCAnY3VyclNlbC50aXRsZScsICh4KSAtPlxuICAgIGNvbnNvbGUubG9nICdmaXggdGl0bGUnLCB4XG4gIFxuICBoYW5kbGVycyA9XG4gICAgYWRkR2FkZ2V0OiAoeCwgeSkgLT5cbiAgICBkZWxHYWRnZXQ6IChpZCkgLT5cbiAgICBhZGRXaXJlOiAoZnJvbSwgdG8pIC0+XG4gICAgZGVsV2lyZTogKGZyb20sIHRvKSAtPlxuICAgIHNlbGVjdEdhZGdldDogKGlkKSAtPlxuICAgIG1vdmVHYWRnZXQ6IChpZCwgeCwgeSkgLT5cbiAgICAgIFxuICAkc2NvcGUuJG9uICdjaXJjdWl0JywgKGV2ZW50LCB0eXBlLCBhcmdzLi4uKSAtPlxuICAgIGNvbnNvbGUubG9nICdDOicsIHR5cGUsIGFyZ3MuLi5cbiAgICBoYW5kbGVyc1t0eXBlXSBhcmdzLi4uXG4gICAgXG4gICMgc2V0dXAgPSAtPlxuICAjICAgamVlYnVzLmF0dGFjaCAnY2lyY3VpdCdcbiAgIyAgICAgLm9uICdzeW5jJywgLT5cbiAgIyAgICAgICAkc2NvcGUuY2lyY3VpdHMgPSBAcm93c1xuICAjICAgICBcbiAgIyBzZXR1cCgpICBpZiAkc2NvcGUuc2VydmVyU3RhdHVzIGlzICdjb25uZWN0ZWQnXG4gICMgJHNjb3BlLiRvbiAnd3Mtb3BlbicsIHNldHVwXG4iXX0=
