(function() {
  var circuitsCtrl, ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('circuits', {
      url: '/circuits',
      templateUrl: '/circuits/circuits.html',
      controller: circuitsCtrl
    });
    return navbarProvider.add('/circuits', 'Circuits', 30);
  });

  circuitsCtrl = function($scope, jeebus) {
    var handlers, setup, updatePinList;
    $scope.circuits = {};
    $scope.gadgets = {
      Pipe: {
        name: 'Pipeline',
        shade: '#d8d8d8',
        icon: '\uf061',
        inputs: 'In',
        outputs: 'Out'
      },
      Printer: {
        shade: '#dacfc0',
        icon: '\uf02f',
        inputs: 'In In2'
      },
      clock: {
        shade: '#dacfc0',
        icon: '\uf017',
        inputs: 'Rate',
        outputs: 'Pulse'
      },
      tosqa_logo: {
        shade: '#fbea5b',
        icon: 'TQ',
        inputs: 'Rate',
        outputs: 'X Y'
      },
      StepGen: {
        shade: '#d2e38f',
        icon: '\uf013',
        inputs: 'Params',
        outputs: 'Out'
      },
      SSB: {
        shade: '#fbea5b',
        icon: '\uf0b2',
        inputs: 'Cmds'
      }
    };
    $scope.circuit = {
      gadgets: {
        g1: {
          x: 120,
          y: 220,
          title: 'Gadget One',
          type: 'Pipe'
        },
        g2: {
          x: 300,
          y: 250,
          title: 'Gadget Two',
          type: 'Printer'
        },
        g3: {
          x: 320,
          y: 60,
          title: 'StepGen-X',
          type: 'StepGen'
        },
        g4: {
          x: 540,
          y: 70,
          title: 'SSB-X',
          type: 'SSB'
        },
        g5: {
          x: 340,
          y: 140,
          title: 'StepGen-Y',
          type: 'StepGen'
        },
        g6: {
          x: 520,
          y: 150,
          title: 'SSB-Y',
          type: 'SSB'
        }
      },
      wires: {
        'g1.Out/g2.In': 0,
        'g3.Out/g4.Cmds': 0,
        'g5.Out/g6.Cmds': 0
      },
      feeds: {
        'g2.In': [
          'some data', {
            Tag: 'blah',
            Msg: 'tagged data'
          }
        ],
        'g3.Params': [1000, 500],
        'g5.Params': [500, 1000]
      },
      labels: {
        In: 'g2.In'
      }
    };
    $scope.circuit = {
      gadgets: {},
      wires: {},
      feeds: {}
    };
    updatePinList = function() {
      var g, gid, ins, p, _i, _len, _ref, _ref1;
      $scope.inputPins = [];
      _ref = $scope.circuit.gadgets;
      for (gid in _ref) {
        g = _ref[gid];
        if (ins = $scope.gadgets[g.type].inputs) {
          _ref1 = ins.split(' ');
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            p = _ref1[_i];
            $scope.inputPins.push("" + gid + "." + p);
          }
        }
      }
      return $scope.inputPins.sort();
    };
    $scope.redraw = function() {
      console.log('redraw');
      $scope.circuit = {
        gadgets: {},
        wires: {},
        feeds: {}
      };
      return jeebus.attach('circuit/demo1').on('data', function() {
        var args, obj, temp, _i, _j, _len, _len1, _results;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        temp = this.rows;
        for (_i = 0, _len = temp.length; _i < _len; _i++) {
          obj = temp[_i];
          $scope.circuit.gadgets[obj.id] = obj;
        }
        _results = [];
        for (_j = 0, _len1 = temp.length; _j < _len1; _j++) {
          obj = temp[_j];
          angular.forEach(obj.feed, function(v, k) {
            return $scope.circuit.feeds["" + obj.id + "." + k] = v;
          });
          _results.push(angular.forEach(obj.wire, function(v, k) {
            var to;
            to = (v.split("."))[0];
            if ($scope.circuit.gadgets[to] != null) {
              return $scope.circuit.wires["" + obj.id + "." + k + "/" + v] = 0;
            }
          }));
        }
        return _results;
      });
    };
    $scope.$watch('addPin', function(pin) {
      var _base;
      if (pin) {
        if ((_base = $scope.circuit.feeds)[pin] == null) {
          _base[pin] = [];
        }
        console.log('addFeed', pin, $scope.circuit.feeds[pin].length);
        $scope.circuit.feeds[pin].push('');
        return $scope.addPin = null;
      }
    });
    $scope.delFeed = function(pin, index) {
      var items;
      items = $scope.circuit.feeds[pin];
      console.log('delFeed', pin, index, items[index]);
      items.splice(index, 1);
      if (items.length === 0) {
        return delete $scope.circuit.feeds[pin];
      }
    };
    $scope.$watch('currSel.id', function(x) {
      console.log('fix id', x);
      return updatePinList();
    });
    $scope.$watch('currSel.title', function(x) {
      var id, obj;
      if ($scope.currSel != null) {
        id = $scope.currSel.id;
        obj = $scope.circuit.gadgets[id];
        obj.title = x;
        jeebus.put("/circuit/demo1/" + id, obj);
        return console.log('fix title', x);
      }
    });
    handlers = {
      addGadget: function(x, y) {
        var id, obj, type;
        if ($scope.newtype != null) {
          id = "g" + String(Date.now() % 1234567);
          type = $scope.newtype;
          obj = {
            title: "" + type,
            type: $scope.newtype,
            x: x,
            y: y
          };
          jeebus.put("/circuit/demo1/" + id, obj);
          return $scope.redraw();
        }
      },
      delGadget: function(id) {
        jeebus.put("/circuit/demo1/" + id);
        return $scope.redraw();
      },
      addWire: function(from, to) {
        var id, obj, output;
        id = (from.split('.'))[0];
        output = (from.split('.'))[1];
        obj = $scope.circuit.gadgets[id];
        obj.wire = obj.wire || {};
        obj.wire[output] = to;
        jeebus.put("/circuit/demo1/" + id, obj);
        return $scope.redraw();
      },
      delWire: function(from, to) {
        var id, obj;
        id = (from.split('.'))[0];
        obj = $scope.circuit.gadgets[id];
        obj.wire = null;
        jeebus.put("/circuit/demo1/" + id, obj);
        return $scope.redraw();
      },
      selectGadget: function(id) {
        $scope.currSel = {};
        $scope.currSel.id = id;
        $scope.currSel.title = $scope.circuit.gadgets[id].title;
        return $scope.currSel.type = $scope.circuit.gadgets[id].type;
      },
      moveGadget: function(id, x, y) {
        var obj;
        obj = $scope.circuit.gadgets[id];
        obj.x = x;
        obj.y = y;
        jeebus.put("/circuit/demo1/" + id, obj);
        return $scope.redraw();
      }
    };
    $scope.$on('circuit', function() {
      var args, event, type;
      event = arguments[0], type = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      console.log.apply(console, ['C:', type].concat(__slice.call(args)));
      return handlers[type].apply(handlers, args);
    });
    setup = function() {
      jeebus.attach('circuit/demo1').on('sync', function() {
        var args, obj, temp, _i, _len;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        temp = this.rows;
        for (_i = 0, _len = temp.length; _i < _len; _i++) {
          obj = temp[_i];
          $scope.circuits[obj.id] = obj;
        }
        return console.log("init circuits");
      });
      return $scope.redraw();
    };
    if ($scope.serverStatus === 'connected') {
      setup();
    }
    return $scope.$on('ws-open', setup);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
