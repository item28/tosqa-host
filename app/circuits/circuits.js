(function() {
  var circuitsCtrl, ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('circuits', {
      url: '/circuits',
      templateUrl: '/circuits/circuits.html',
      controller: circuitsCtrl
    });
    return navbarProvider.add('/circuits', 'Circuits', 30);
  });

  circuitsCtrl = function($scope, jeebus) {
    $scope.gadgets = {
      Pipe: {
        name: 'Pipeline',
        width: 160,
        shade: 'lightyellow',
        icon: '\uf061',
        pins: [
          {
            name: 'In',
            dir: 'in'
          }, {
            name: 'Out',
            dir: 'out'
          }
        ]
      },
      Printer: {
        width: 120,
        shade: 'lightblue',
        icon: '\uf02f',
        pins: [
          {
            name: 'In',
            dir: 'in'
          }, {
            name: 'In2',
            dir: 'in'
          }
        ]
      }
    };
    $scope.circuit = {
      gadgets: [
        {
          id: 'g1',
          x: 120,
          y: 100,
          title: 'Gadget One',
          type: 'Printer'
        }, {
          id: 'g2',
          x: 120,
          y: 200,
          title: 'Gadget Two',
          type: 'Pipe'
        }
      ],
      wires: [
        {
          from: 'g2.Out',
          to: 'g1.In',
          cap: 0
        }
      ],
      feeds: {
        'g1.In': [
          'some data', {
            Tag: 'blah',
            Msg: 'tagged data'
          }
        ]
      },
      labels: {
        In: 'g2.In'
      }
    };
    $scope.addFeed = function(pin) {
      if (!pin) {
        pin = 'g7.In';
        $scope.circuit.feeds[pin] = [];
      }
      return $scope.circuit.feeds[pin].push('');
    };
    $scope.delFeed = function(pin, index) {
      var items;
      items = $scope.circuit.feeds[pin];
      items.splice(index, 1);
      if (items.length === 0) {
        return delete $scope.circuit.feeds[pin];
      }
    };
    $scope.$watch('currSel.id', function(x) {
      return console.log('fix id', x);
    });
    return $scope.$watch('currSel.title', function(x) {
      return console.log('fix title', x);
    });
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2lyY3VpdHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxnQkFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxTQUFDLGNBQUQsRUFBaUIsY0FBakIsR0FBQTtBQUNSLElBQUEsY0FBYyxDQUFDLEtBQWYsQ0FBcUIsVUFBckIsRUFDRTtBQUFBLE1BQUEsR0FBQSxFQUFLLFdBQUw7QUFBQSxNQUNBLFdBQUEsRUFBYSx5QkFEYjtBQUFBLE1BRUEsVUFBQSxFQUFZLFlBRlo7S0FERixDQUFBLENBQUE7V0FJQSxjQUFjLENBQUMsR0FBZixDQUFtQixXQUFuQixFQUFnQyxVQUFoQyxFQUE0QyxFQUE1QyxFQUxRO0VBQUEsQ0FBVixDQUZBLENBQUE7O0FBQUEsRUFTQSxZQUFBLEdBQWUsU0FBQyxNQUFELEVBQVMsTUFBVCxHQUFBO0FBQ2IsSUFBQSxNQUFNLENBQUMsT0FBUCxHQUNFO0FBQUEsTUFBQSxJQUFBLEVBQ0U7QUFBQSxRQUFBLElBQUEsRUFBTSxVQUFOO0FBQUEsUUFDQSxLQUFBLEVBQU8sR0FEUDtBQUFBLFFBRUEsS0FBQSxFQUFPLGFBRlA7QUFBQSxRQUdBLElBQUEsRUFBTSxRQUhOO0FBQUEsUUFJQSxJQUFBLEVBQU07VUFDSjtBQUFBLFlBQUUsSUFBQSxFQUFNLElBQVI7QUFBQSxZQUFjLEdBQUEsRUFBSyxJQUFuQjtXQURJLEVBRUo7QUFBQSxZQUFFLElBQUEsRUFBTSxLQUFSO0FBQUEsWUFBZSxHQUFBLEVBQUssS0FBcEI7V0FGSTtTQUpOO09BREY7QUFBQSxNQVNBLE9BQUEsRUFDRTtBQUFBLFFBQUEsS0FBQSxFQUFPLEdBQVA7QUFBQSxRQUNBLEtBQUEsRUFBTyxXQURQO0FBQUEsUUFFQSxJQUFBLEVBQU0sUUFGTjtBQUFBLFFBR0EsSUFBQSxFQUFNO1VBQ0o7QUFBQSxZQUFFLElBQUEsRUFBTSxJQUFSO0FBQUEsWUFBYyxHQUFBLEVBQUssSUFBbkI7V0FESSxFQUVKO0FBQUEsWUFBRSxJQUFBLEVBQU0sS0FBUjtBQUFBLFlBQWUsR0FBQSxFQUFLLElBQXBCO1dBRkk7U0FITjtPQVZGO0tBREYsQ0FBQTtBQUFBLElBbUJBLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7QUFBQSxNQUFBLE9BQUEsRUFBUztRQUNQO0FBQUEsVUFBRSxFQUFBLEVBQUksSUFBTjtBQUFBLFVBQVksQ0FBQSxFQUFHLEdBQWY7QUFBQSxVQUFvQixDQUFBLEVBQUcsR0FBdkI7QUFBQSxVQUE0QixLQUFBLEVBQU8sWUFBbkM7QUFBQSxVQUFpRCxJQUFBLEVBQU0sU0FBdkQ7U0FETyxFQUVQO0FBQUEsVUFBRSxFQUFBLEVBQUksSUFBTjtBQUFBLFVBQVksQ0FBQSxFQUFHLEdBQWY7QUFBQSxVQUFvQixDQUFBLEVBQUcsR0FBdkI7QUFBQSxVQUE0QixLQUFBLEVBQU8sWUFBbkM7QUFBQSxVQUFpRCxJQUFBLEVBQU0sTUFBdkQ7U0FGTztPQUFUO0FBQUEsTUFJQSxLQUFBLEVBQU87UUFDTDtBQUFBLFVBQUUsSUFBQSxFQUFNLFFBQVI7QUFBQSxVQUFrQixFQUFBLEVBQUksT0FBdEI7QUFBQSxVQUErQixHQUFBLEVBQUssQ0FBcEM7U0FESztPQUpQO0FBQUEsTUFPQSxLQUFBLEVBQ0U7QUFBQSxRQUFBLE9BQUEsRUFBUztVQUFFLFdBQUYsRUFBZTtBQUFBLFlBQUUsR0FBQSxFQUFLLE1BQVA7QUFBQSxZQUFlLEdBQUEsRUFBSyxhQUFwQjtXQUFmO1NBQVQ7T0FSRjtBQUFBLE1BU0EsTUFBQSxFQUNFO0FBQUEsUUFBQSxFQUFBLEVBQUksT0FBSjtPQVZGO0tBcEJGLENBQUE7QUFBQSxJQWdDQSxNQUFNLENBQUMsT0FBUCxHQUFpQixTQUFDLEdBQUQsR0FBQTtBQUNmLE1BQUEsSUFBQSxDQUFBLEdBQUE7QUFDRSxRQUFBLEdBQUEsR0FBTSxPQUFOLENBQUE7QUFBQSxRQUNBLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBTSxDQUFBLEdBQUEsQ0FBckIsR0FBNEIsRUFENUIsQ0FERjtPQUFBO2FBR0EsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFNLENBQUEsR0FBQSxDQUFJLENBQUMsSUFBMUIsQ0FBK0IsRUFBL0IsRUFKZTtJQUFBLENBaENqQixDQUFBO0FBQUEsSUFxQ0EsTUFBTSxDQUFDLE9BQVAsR0FBaUIsU0FBQyxHQUFELEVBQU0sS0FBTixHQUFBO0FBQ2YsVUFBQSxLQUFBO0FBQUEsTUFBQSxLQUFBLEdBQVEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFNLENBQUEsR0FBQSxDQUE3QixDQUFBO0FBQUEsTUFDQSxLQUFLLENBQUMsTUFBTixDQUFhLEtBQWIsRUFBb0IsQ0FBcEIsQ0FEQSxDQUFBO0FBRUEsTUFBQSxJQUFxQyxLQUFLLENBQUMsTUFBTixLQUFnQixDQUFyRDtlQUFBLE1BQUEsQ0FBQSxNQUFhLENBQUMsT0FBTyxDQUFDLEtBQU0sQ0FBQSxHQUFBLEVBQTVCO09BSGU7SUFBQSxDQXJDakIsQ0FBQTtBQUFBLElBMENBLE1BQU0sQ0FBQyxNQUFQLENBQWMsWUFBZCxFQUE0QixTQUFDLENBQUQsR0FBQTthQUMxQixPQUFPLENBQUMsR0FBUixDQUFZLFFBQVosRUFBc0IsQ0FBdEIsRUFEMEI7SUFBQSxDQUE1QixDQTFDQSxDQUFBO1dBNENBLE1BQU0sQ0FBQyxNQUFQLENBQWMsZUFBZCxFQUErQixTQUFDLENBQUQsR0FBQTthQUM3QixPQUFPLENBQUMsR0FBUixDQUFZLFdBQVosRUFBeUIsQ0FBekIsRUFENkI7SUFBQSxDQUEvQixFQTdDYTtFQUFBLENBVGYsQ0FBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsibmcgPSBhbmd1bGFyLm1vZHVsZSAnbXlBcHAnXG5cbm5nLmNvbmZpZyAoJHN0YXRlUHJvdmlkZXIsIG5hdmJhclByb3ZpZGVyKSAtPlxuICAkc3RhdGVQcm92aWRlci5zdGF0ZSAnY2lyY3VpdHMnLFxuICAgIHVybDogJy9jaXJjdWl0cydcbiAgICB0ZW1wbGF0ZVVybDogJy9jaXJjdWl0cy9jaXJjdWl0cy5odG1sJ1xuICAgIGNvbnRyb2xsZXI6IGNpcmN1aXRzQ3RybFxuICBuYXZiYXJQcm92aWRlci5hZGQgJy9jaXJjdWl0cycsICdDaXJjdWl0cycsIDMwXG5cbmNpcmN1aXRzQ3RybCA9ICgkc2NvcGUsIGplZWJ1cykgLT5cbiAgJHNjb3BlLmdhZGdldHMgPVxuICAgIFBpcGU6XG4gICAgICBuYW1lOiAnUGlwZWxpbmUnXG4gICAgICB3aWR0aDogMTYwXG4gICAgICBzaGFkZTogJ2xpZ2h0eWVsbG93J1xuICAgICAgaWNvbjogJ1xcdWYwNjEnICMgZmEtYXJyb3ctcmlnaHRcbiAgICAgIHBpbnM6IFtcbiAgICAgICAgeyBuYW1lOiAnSW4nLCBkaXI6ICdpbicgfVxuICAgICAgICB7IG5hbWU6ICdPdXQnLCBkaXI6ICdvdXQnIH1cbiAgICAgIF1cbiAgICBQcmludGVyOlxuICAgICAgd2lkdGg6IDEyMFxuICAgICAgc2hhZGU6ICdsaWdodGJsdWUnXG4gICAgICBpY29uOiAnXFx1ZjAyZicgIyBmYS1wcmludFxuICAgICAgcGluczogW1xuICAgICAgICB7IG5hbWU6ICdJbicsIGRpcjogJ2luJyB9XG4gICAgICAgIHsgbmFtZTogJ0luMicsIGRpcjogJ2luJyB9XG4gICAgICBdXG4gICAgICBcbiAgJHNjb3BlLmNpcmN1aXQgPVxuICAgIGdhZGdldHM6IFtcbiAgICAgIHsgaWQ6ICdnMScsIHg6IDEyMCwgeTogMTAwLCB0aXRsZTogJ0dhZGdldCBPbmUnLCB0eXBlOiAnUHJpbnRlcicgfVxuICAgICAgeyBpZDogJ2cyJywgeDogMTIwLCB5OiAyMDAsIHRpdGxlOiAnR2FkZ2V0IFR3bycsIHR5cGU6ICdQaXBlJyB9XG4gICAgXVxuICAgIHdpcmVzOiBbXG4gICAgICB7IGZyb206ICdnMi5PdXQnLCB0bzogJ2cxLkluJywgY2FwOiAwIH1cbiAgICBdXG4gICAgZmVlZHM6XG4gICAgICAnZzEuSW4nOiBbICdzb21lIGRhdGEnLCB7IFRhZzogJ2JsYWgnLCBNc2c6ICd0YWdnZWQgZGF0YScgfSBdXG4gICAgbGFiZWxzOlxuICAgICAgSW46ICdnMi5JbidcbiAgICAgIFxuICAkc2NvcGUuYWRkRmVlZCA9IChwaW4pIC0+XG4gICAgdW5sZXNzIHBpblxuICAgICAgcGluID0gJ2c3LkluJyAjIFRPRE86IG5lZWQgdG8gc2VsZWN0IHRoZSBpbnB1dCBwaXQgbmFtZVxuICAgICAgJHNjb3BlLmNpcmN1aXQuZmVlZHNbcGluXSA9IFtdXG4gICAgJHNjb3BlLmNpcmN1aXQuZmVlZHNbcGluXS5wdXNoICcnXG4gICRzY29wZS5kZWxGZWVkID0gKHBpbiwgaW5kZXgpIC0+XG4gICAgaXRlbXMgPSAkc2NvcGUuY2lyY3VpdC5mZWVkc1twaW5dXG4gICAgaXRlbXMuc3BsaWNlIGluZGV4LCAxXG4gICAgZGVsZXRlICRzY29wZS5jaXJjdWl0LmZlZWRzW3Bpbl0gIGlmIGl0ZW1zLmxlbmd0aCBpcyAwXG4gIFxuICAkc2NvcGUuJHdhdGNoICdjdXJyU2VsLmlkJywgKHgpIC0+XG4gICAgY29uc29sZS5sb2cgJ2ZpeCBpZCcsIHhcbiAgJHNjb3BlLiR3YXRjaCAnY3VyclNlbC50aXRsZScsICh4KSAtPlxuICAgIGNvbnNvbGUubG9nICdmaXggdGl0bGUnLCB4XG4gICAgXG4gICMgc2V0dXAgPSAtPlxuICAjICAgamVlYnVzLmF0dGFjaCAnY2lyY3VpdCdcbiAgIyAgICAgLm9uICdzeW5jJywgLT5cbiAgIyAgICAgICAkc2NvcGUuY2lyY3VpdHMgPSBAcm93c1xuICAjICAgICBcbiAgIyBzZXR1cCgpICBpZiAkc2NvcGUuc2VydmVyU3RhdHVzIGlzICdjb25uZWN0ZWQnXG4gICMgJHNjb3BlLiRvbiAnd3Mtb3BlbicsIHNldHVwXG4iXX0=
