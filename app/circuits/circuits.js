(function() {
  var circuitsCtrl, ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('circuits', {
      url: '/circuits',
      templateUrl: '/circuits/circuits.html',
      controller: circuitsCtrl
    });
    return navbarProvider.add('/circuits', 'Circuits', 30);
  });

  circuitsCtrl = function($scope, jeebus) {
    var handlers, updatePinList;
    $scope.gadgets = {
      Pipe: {
        name: 'Pipeline',
        shade: 'lightyellow',
        icon: '\uf061',
        inputs: 'In',
        outputs: 'Out'
      },
      Printer: {
        shade: 'lightblue',
        icon: '\uf02f',
        inputs: 'In In2'
      }
    };
    $scope.circuit = {
      gadgets: {
        g1: {
          x: 120,
          y: 100,
          title: 'Gadget One',
          type: 'Printer'
        },
        g2: {
          x: 120,
          y: 200,
          title: 'Gadget Two',
          type: 'Pipe'
        }
      },
      wires: {
        'g2.Out/g1.In': 0
      },
      feeds: {
        'g1.In': [
          'some data', {
            Tag: 'blah',
            Msg: 'tagged data'
          }
        ]
      },
      labels: {
        In: 'g2.In'
      }
    };
    updatePinList = function() {
      var g, ins, p, _i, _j, _len, _len1, _ref, _ref1;
      $scope.inputPins = [];
      _ref = $scope.circuit.gadgets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        g = _ref[_i];
        if (ins = $scope.gadgets[g.type].inputs) {
          _ref1 = ins != null ? ins.split(' ') : void 0;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            p = _ref1[_j];
            if (p.dir === 'in') {
              $scope.inputPins.push("" + g.id + "." + p.name);
            }
          }
        }
      }
      return $scope.inputPins.sort();
    };
    $scope.$watch('addPin', function(pin) {
      var _base;
      if (pin) {
        if ((_base = $scope.circuit.feeds)[pin] == null) {
          _base[pin] = [];
        }
        console.log('addFeed', pin, $scope.circuit.feeds[pin].length);
        $scope.circuit.feeds[pin].push('');
        return $scope.addPin = null;
      }
    });
    $scope.delFeed = function(pin, index) {
      var items;
      items = $scope.circuit.feeds[pin];
      console.log('delFeed', pin, index, items[index]);
      items.splice(index, 1);
      if (items.length === 0) {
        return delete $scope.circuit.feeds[pin];
      }
    };
    $scope.$watch('currSel.id', function(x) {
      console.log('fix id', x);
      return updatePinList();
    });
    $scope.$watch('currSel.title', function(x) {
      return console.log('fix title', x);
    });
    handlers = {
      addGadget: function(x, y) {},
      delGadget: function(id) {},
      addWire: function(from, to) {},
      delWire: function(from, to) {},
      selectGadget: function(id) {},
      moveGadget: function(id, x, y) {}
    };
    return $scope.$on('circuit', function() {
      var args, event, type;
      event = arguments[0], type = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      console.log.apply(console, ['C:', type].concat(__slice.call(args)));
      return handlers[type].apply(handlers, args);
    });
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2lyY3VpdHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxnQkFBQTtJQUFBLGtCQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLE9BQU8sQ0FBQyxNQUFSLENBQWUsT0FBZixDQUFMLENBQUE7O0FBQUEsRUFFQSxFQUFFLENBQUMsTUFBSCxDQUFVLFNBQUMsY0FBRCxFQUFpQixjQUFqQixHQUFBO0FBQ1IsSUFBQSxjQUFjLENBQUMsS0FBZixDQUFxQixVQUFyQixFQUNFO0FBQUEsTUFBQSxHQUFBLEVBQUssV0FBTDtBQUFBLE1BQ0EsV0FBQSxFQUFhLHlCQURiO0FBQUEsTUFFQSxVQUFBLEVBQVksWUFGWjtLQURGLENBQUEsQ0FBQTtXQUlBLGNBQWMsQ0FBQyxHQUFmLENBQW1CLFdBQW5CLEVBQWdDLFVBQWhDLEVBQTRDLEVBQTVDLEVBTFE7RUFBQSxDQUFWLENBRkEsQ0FBQTs7QUFBQSxFQVNBLFlBQUEsR0FBZSxTQUFDLE1BQUQsRUFBUyxNQUFULEdBQUE7QUFFYixRQUFBLHVCQUFBO0FBQUEsSUFBQSxNQUFNLENBQUMsT0FBUCxHQUNFO0FBQUEsTUFBQSxJQUFBLEVBQ0U7QUFBQSxRQUFBLElBQUEsRUFBTSxVQUFOO0FBQUEsUUFDQSxLQUFBLEVBQU8sYUFEUDtBQUFBLFFBRUEsSUFBQSxFQUFNLFFBRk47QUFBQSxRQUdBLE1BQUEsRUFBUSxJQUhSO0FBQUEsUUFJQSxPQUFBLEVBQVMsS0FKVDtPQURGO0FBQUEsTUFNQSxPQUFBLEVBQ0U7QUFBQSxRQUFBLEtBQUEsRUFBTyxXQUFQO0FBQUEsUUFDQSxJQUFBLEVBQU0sUUFETjtBQUFBLFFBRUEsTUFBQSxFQUFRLFFBRlI7T0FQRjtLQURGLENBQUE7QUFBQSxJQVlBLE1BQU0sQ0FBQyxPQUFQLEdBQ0U7QUFBQSxNQUFBLE9BQUEsRUFDRTtBQUFBLFFBQUEsRUFBQSxFQUFJO0FBQUEsVUFBRSxDQUFBLEVBQUcsR0FBTDtB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QUFBLENBQUEsRUFGMEI7SUFBQSxDQUE1QixDQTVDQSxDQUFBO0FBQUEsSUErQ0EsTUFBTSxDQUFDLE1BQVAsQ0FBYyxlQUFkLEVBQStCLFNBQUMsQ0FBRCxHQUFBO2FBQzdCLE9BQU8sQ0FBQyxHQUFSLENBQVksV0FBWixFQUF5QixDQUF6QixFQUQ2QjtJQUFBLENBQS9CLENBL0NBLENBQUE7QUFBQSxJQWtEQSxRQUFBLEdBQ0U7QUFBQSxNQUFBLFNBQUEsRUFBVyxTQUFDLENBQUQsRUFBSSxDQUFKLEdBQUEsQ0FBWDtBQUFBLE1BQ0EsU0FBQSxFQUFXLFNBQUMsRUFBRCxHQUFBLENBRFg7QUFBQSxNQUVBLE9BQUEsRUFBUyxTQUFDLElBQUQsRUFBTyxFQUFQLEdBQUEsQ0FGVDtBQUFBLE1BR0EsT0FBQSxFQUFTLFNBQUMsSUFBRCxFQUFPLEVBQVAsR0FBQSxDQUhUO0FBQUEsTUFJQSxZQUFBLEVBQWMsU0FBQyxFQUFELEdBQUEsQ0FKZDtBQUFBLE1BS0EsVUFBQSxFQUFZLFNBQUMsRUFBRCxFQUFLLENBQUwsRUFBUSxDQUFSLEdBQUEsQ0FMWjtLQW5ERixDQUFBO1dBMERBLE1BQU0sQ0FBQyxHQUFQLENBQVcsU0FBWCxFQUFzQixTQUFBLEdBQUE7QUFDcEIsVUFBQSxpQkFBQTtBQUFBLE1BRHFCLHNCQUFPLHFCQUFNLDhEQUNsQyxDQUFBO0FBQUEsTUFBQSxPQUFPLENBQUMsR0FBUixnQkFBWSxDQUFBLElBQUEsRUFBTSxJQUFNLFNBQUEsYUFBQSxJQUFBLENBQUEsQ0FBeEIsQ0FBQSxDQUFBO2FBQ0EsUUFBUyxDQUFBLElBQUEsQ0FBVCxpQkFBZSxJQUFmLEVBRm9CO0lBQUEsQ0FBdEIsRUE1RGE7RUFBQSxDQVRmLENBQUE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIm5nID0gYW5ndWxhci5tb2R1bGUgJ215QXBwJ1xuXG5uZy5jb25maWcgKCRzdGF0ZVByb3ZpZGVyLCBuYXZiYXJQcm92aWRlcikgLT5cbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUgJ2NpcmN1aXRzJyxcbiAgICB1cmw6ICcvY2lyY3VpdHMnXG4gICAgdGVtcGxhdGVVcmw6ICcvY2lyY3VpdHMvY2lyY3VpdHMuaHRtbCdcbiAgICBjb250cm9sbGVyOiBjaXJjdWl0c0N0cmxcbiAgbmF2YmFyUHJvdmlkZXIuYWRkICcvY2lyY3VpdHMnLCAnQ2lyY3VpdHMnLCAzMFxuXG5jaXJjdWl0c0N0cmwgPSAoJHNjb3BlLCBqZWVidXMpIC0+XG4gICAgXG4gICRzY29wZS5nYWRnZXRzID1cbiAgICBQaXBlOlxuICAgICAgbmFtZTogJ1BpcGVsaW5lJ1xuICAgICAgc2hhZGU6ICdsaWdodHllbGxvdydcbiAgICAgIGljb246ICdcXHVmMDYxJyAjIGZhLWFycm93LXJpZ2h0XG4gICAgICBpbnB1dHM6ICdJbidcbiAgICAgIG91dHB1dHM6ICdPdXQnXG4gICAgUHJpbnRlcjpcbiAgICAgIHNoYWRlOiAnbGlnaHRibHVlJ1xuICAgICAgaWNvbjogJ1xcdWYwMmYnICMgZmEtcHJpbnRcbiAgICAgIGlucHV0czogJ0luIEluMidcbiAgICAgIFxuICAkc2NvcGUuY2lyY3VpdCA9XG4gICAgZ2FkZ2V0czpcbiAgICAgIGcxOiB7IHg6IDEyMCwgeTogMTAwLCB0aXRsZTogJ0dhZGdldCBPbmUnLCB0eXBlOiAnUHJpbnRlcicgfVxuICAgICAgZzI6IHsgeDogMTIwLCB5OiAyMDAsIHRpdGxlOiAnR2FkZ2V0IFR3bycsIHR5cGU6ICdQaXBlJyB9XG4gICAgd2lyZXM6XG4gICAgICAnZzIuT3V0L2cxLkluJzogMFxuICAgIGZlZWRzOlxuICAgICAgJ2cxLkluJzogWyAnc29tZSBkYXRhJywgeyBUYWc6ICdibGFoJywgTXNnOiAndGFnZ2VkIGRhdGEnIH0gXVxuICAgIGxhYmVsczpcbiAgICAgIEluOiAnZzIuSW4nXG4gICAgICBcbiAgdXBkYXRlUGluTGlzdCA9ICgpIC0+XG4gICAgJHNjb3BlLmlucHV0UGlucyA9IFtdXG4gICAgZm9yIGcgaW4gJHNjb3BlLmNpcmN1aXQuZ2FkZ2V0c1xuICAgICAgaWYgaW5zID0gJHNjb3BlLmdhZGdldHNbZy50eXBlXS5pbnB1dHNcbiAgICAgICAgZm9yIHAgaW4gaW5zPy5zcGxpdCgnICcpIHdoZW4gcC5kaXIgaXMgJ2luJ1xuICAgICAgICAgICRzY29wZS5pbnB1dFBpbnMucHVzaCBcIiN7Zy5pZH0uI3twLm5hbWV9XCJcbiAgICAkc2NvcGUuaW5wdXRQaW5zLnNvcnQoKVxuICBcbiAgJHNjb3BlLiR3YXRjaCAnYWRkUGluJywgKHBpbikgLT5cbiAgICBpZiBwaW5cbiAgICAgICRzY29wZS5jaXJjdWl0LmZlZWRzW3Bpbl0gPz0gW11cbiAgICAgIGNvbnNvbGUubG9nICdhZGRGZWVkJywgcGluLCAkc2NvcGUuY2lyY3VpdC5mZWVkc1twaW5dLmxlbmd0aFxuICAgICAgJHNjb3BlLmNpcmN1aXQuZmVlZHNbcGluXS5wdXNoICcnXG4gICAgICAkc2NvcGUuYWRkUGluID0gbnVsbFxuICAgIFxuICAkc2NvcGUuZGVsRmVlZCA9IChwaW4sIGluZGV4KSAtPlxuICAgIGl0ZW1zID0gJHNjb3BlLmNpcmN1aXQuZmVlZHNbcGluXVxuICAgIGNvbnNvbGUubG9nICdkZWxGZWVkJywgcGluLCBpbmRleCwgaXRlbXNbaW5kZXhdXG4gICAgaXRlbXMuc3BsaWNlIGluZGV4LCAxXG4gICAgZGVsZXRlICRzY29wZS5jaXJjdWl0LmZlZWRzW3Bpbl0gIGlmIGl0ZW1zLmxlbmd0aCBpcyAwXG4gIFxuICAkc2NvcGUuJHdhdGNoICdjdXJyU2VsLmlkJywgKHgpIC0+XG4gICAgY29uc29sZS5sb2cgJ2ZpeCBpZCcsIHhcbiAgICB1cGRhdGVQaW5MaXN0KCkgIyBmb3IgbmV3IGFuZCBkZWxldGVkIGdhZGdldHNcbiAgJHNjb3BlLiR3YXRjaCAnY3VyclNlbC50aXRsZScsICh4KSAtPlxuICAgIGNvbnNvbGUubG9nICdmaXggdGl0bGUnLCB4XG4gIFxuICBoYW5kbGVycyA9XG4gICAgYWRkR2FkZ2V0OiAoeCwgeSkgLT5cbiAgICBkZWxHYWRnZXQ6IChpZCkgLT5cbiAgICBhZGRXaXJlOiAoZnJvbSwgdG8pIC0+XG4gICAgZGVsV2lyZTogKGZyb20sIHRvKSAtPlxuICAgIHNlbGVjdEdhZGdldDogKGlkKSAtPlxuICAgIG1vdmVHYWRnZXQ6IChpZCwgeCwgeSkgLT5cbiAgICAgIFxuICAkc2NvcGUuJG9uICdjaXJjdWl0JywgKGV2ZW50LCB0eXBlLCBhcmdzLi4uKSAtPlxuICAgIGNvbnNvbGUubG9nICdDOicsIHR5cGUsIGFyZ3MuLi5cbiAgICBoYW5kbGVyc1t0eXBlXSBhcmdzLi4uXG4gICAgXG4gICMgc2V0dXAgPSAtPlxuICAjICAgamVlYnVzLmF0dGFjaCAnY2lyY3VpdCdcbiAgIyAgICAgLm9uICdzeW5jJywgLT5cbiAgIyAgICAgICAkc2NvcGUuY2lyY3VpdHMgPSBAcm93c1xuICAjICAgICBcbiAgIyBzZXR1cCgpICBpZiAkc2NvcGUuc2VydmVyU3RhdHVzIGlzICdjb25uZWN0ZWQnXG4gICMgJHNjb3BlLiRvbiAnd3Mtb3BlbicsIHNldHVwXG4iXX0=
