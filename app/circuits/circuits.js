(function() {
  var circuitsCtrl, ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('circuits', {
      url: '/circuits',
      templateUrl: '/circuits/circuits.html',
      controller: circuitsCtrl
    });
    return navbarProvider.add('/circuits', 'Circuits', 30);
  });

  circuitsCtrl = function($scope, jeebus) {
    var setup;
    $scope.circuitId = 'def';
    $scope.myData = {
      gadgets: [
        {
          id: 'g1',
          x: 750,
          y: 30,
          title: 'Gadget One',
          type: 'Printer'
        }, {
          id: 'g2',
          x: 750,
          y: 150,
          title: 'Gadget Two',
          type: 'Pipe'
        }
      ],
      wires: {
        "g2.Out": {
          cap: 0,
          to: ["g1.In"]
        }
      },
      feeds: {
        "g1.In": ["some data", "more data"]
      },
      labels: {
        "In": "g1.In"
      },
      types: {
        Timer: {
          pins: [
            {
              name: 'In',
              type: 'i'
            }, {
              name: 'Out',
              type: 'o'
            }
          ]
        },
        Printer: {
          pins: [
            {
              name: 'In',
              type: 'i'
            }
          ]
        }
      }
    };
    setup = function() {
      return jeebus.attach('circuit').on('sync', function() {
        return $scope.circuits = this.rows;
      });
    };
    if ($scope.serverStatus === 'connected') {
      setup();
    }
    return $scope.$on('ws-open', setup);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2lyY3VpdHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxnQkFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxTQUFDLGNBQUQsRUFBaUIsY0FBakIsR0FBQTtBQUNSLElBQUEsY0FBYyxDQUFDLEtBQWYsQ0FBcUIsVUFBckIsRUFDRTtBQUFBLE1BQUEsR0FBQSxFQUFLLFdBQUw7QUFBQSxNQUNBLFdBQUEsRUFBYSx5QkFEYjtBQUFBLE1BRUEsVUFBQSxFQUFZLFlBRlo7S0FERixDQUFBLENBQUE7V0FJQSxjQUFjLENBQUMsR0FBZixDQUFtQixXQUFuQixFQUFnQyxVQUFoQyxFQUE0QyxFQUE1QyxFQUxRO0VBQUEsQ0FBVixDQUZBLENBQUE7O0FBQUEsRUFTQSxZQUFBLEdBQWUsU0FBQyxNQUFELEVBQVMsTUFBVCxHQUFBO0FBQ2IsUUFBQSxLQUFBO0FBQUEsSUFBQSxNQUFNLENBQUMsU0FBUCxHQUFtQixLQUFuQixDQUFBO0FBQUEsSUFDQSxNQUFNLENBQUMsTUFBUCxHQUNFO0FBQUEsTUFBQSxPQUFBLEVBQVM7UUFDUDtBQUFBLFVBQUUsRUFBQSxFQUFHLElBQUw7QUFBQSxVQUFXLENBQUEsRUFBRSxHQUFiO0FBQUEsVUFBa0IsQ0FBQSxFQUFFLEVBQXBCO0FBQUEsVUFBd0IsS0FBQSxFQUFNLFlBQTlCO0FBQUEsVUFBNEMsSUFBQSxFQUFLLFNBQWpEO1NBRE8sRUFFUDtBQUFBLFVBQUUsRUFBQSxFQUFHLElBQUw7QUFBQSxVQUFXLENBQUEsRUFBRSxHQUFiO0FBQUEsVUFBa0IsQ0FBQSxFQUFFLEdBQXBCO0FBQUEsVUFBeUIsS0FBQSxFQUFNLFlBQS9CO0FBQUEsVUFBNkMsSUFBQSxFQUFLLE1BQWxEO1NBRk87T0FBVDtBQUFBLE1BSUEsS0FBQSxFQUNFO0FBQUEsUUFBQSxRQUFBLEVBQVU7QUFBQSxVQUFFLEdBQUEsRUFBSyxDQUFQO0FBQUEsVUFBVSxFQUFBLEVBQUksQ0FBRSxPQUFGLENBQWQ7U0FBVjtPQUxGO0FBQUEsTUFNQSxLQUFBLEVBQ0U7QUFBQSxRQUFBLE9BQUEsRUFBUyxDQUFFLFdBQUYsRUFBZSxXQUFmLENBQVQ7T0FQRjtBQUFBLE1BUUEsTUFBQSxFQUNFO0FBQUEsUUFBQSxJQUFBLEVBQU0sT0FBTjtPQVRGO0FBQUEsTUFVQSxLQUFBLEVBQ0U7QUFBQSxRQUFBLEtBQUEsRUFDRTtBQUFBLFVBQUEsSUFBQSxFQUFNO1lBQ0o7QUFBQSxjQUFFLElBQUEsRUFBSyxJQUFQO0FBQUEsY0FBYSxJQUFBLEVBQUssR0FBbEI7YUFESSxFQUVKO0FBQUEsY0FBRSxJQUFBLEVBQUssS0FBUDtBQUFBLGNBQWMsSUFBQSxFQUFLLEdBQW5CO2FBRkk7V0FBTjtTQURGO0FBQUEsUUFLQSxPQUFBLEVBQ0U7QUFBQSxVQUFBLElBQUEsRUFBTTtZQUNKO0FBQUEsY0FBRSxJQUFBLEVBQUssSUFBUDtBQUFBLGNBQWEsSUFBQSxFQUFLLEdBQWxCO2FBREk7V0FBTjtTQU5GO09BWEY7S0FGRixDQUFBO0FBQUEsSUF1QkEsS0FBQSxHQUFRLFNBQUEsR0FBQTthQUNOLE1BQU0sQ0FBQyxNQUFQLENBQWMsU0FBZCxDQUNFLENBQUMsRUFESCxDQUNNLE1BRE4sRUFDYyxTQUFBLEdBQUE7ZUFDVixNQUFNLENBQUMsUUFBUCxHQUFrQixJQUFDLENBQUEsS0FEVDtNQUFBLENBRGQsRUFETTtJQUFBLENBdkJSLENBQUE7QUE0QkEsSUFBQSxJQUFZLE1BQU0sQ0FBQyxZQUFQLEtBQXVCLFdBQW5DO0FBQUEsTUFBQSxLQUFBLENBQUEsQ0FBQSxDQUFBO0tBNUJBO1dBNkJBLE1BQU0sQ0FBQyxHQUFQLENBQVcsU0FBWCxFQUFzQixLQUF0QixFQTlCYTtFQUFBLENBVGYsQ0FBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsibmcgPSBhbmd1bGFyLm1vZHVsZSAnbXlBcHAnXG5cbm5nLmNvbmZpZyAoJHN0YXRlUHJvdmlkZXIsIG5hdmJhclByb3ZpZGVyKSAtPlxuICAkc3RhdGVQcm92aWRlci5zdGF0ZSAnY2lyY3VpdHMnLFxuICAgIHVybDogJy9jaXJjdWl0cydcbiAgICB0ZW1wbGF0ZVVybDogJy9jaXJjdWl0cy9jaXJjdWl0cy5odG1sJ1xuICAgIGNvbnRyb2xsZXI6IGNpcmN1aXRzQ3RybFxuICBuYXZiYXJQcm92aWRlci5hZGQgJy9jaXJjdWl0cycsICdDaXJjdWl0cycsIDMwXG5cbmNpcmN1aXRzQ3RybCA9ICgkc2NvcGUsIGplZWJ1cykgLT5cbiAgJHNjb3BlLmNpcmN1aXRJZCA9ICdkZWYnXG4gICRzY29wZS5teURhdGEgPVxuICAgIGdhZGdldHM6IFtcbiAgICAgIHsgaWQ6J2cxJywgeDo3NTAsIHk6MzAsIHRpdGxlOidHYWRnZXQgT25lJywgdHlwZTonUHJpbnRlcicgfVxuICAgICAgeyBpZDonZzInLCB4Ojc1MCwgeToxNTAsIHRpdGxlOidHYWRnZXQgVHdvJywgdHlwZTonUGlwZScgfVxuICAgIF1cbiAgICB3aXJlczpcbiAgICAgIFwiZzIuT3V0XCI6IHsgY2FwOiAwLCB0bzogWyBcImcxLkluXCIgXSB9XG4gICAgZmVlZHM6XG4gICAgICBcImcxLkluXCI6IFsgXCJzb21lIGRhdGFcIiwgXCJtb3JlIGRhdGFcIiBdXG4gICAgbGFiZWxzOlxuICAgICAgXCJJblwiOiBcImcxLkluXCJcbiAgICB0eXBlczpcbiAgICAgIFRpbWVyOlxuICAgICAgICBwaW5zOiBbXG4gICAgICAgICAgeyBuYW1lOidJbicsIHR5cGU6J2knIH1cbiAgICAgICAgICB7IG5hbWU6J091dCcsIHR5cGU6J28nIH1cbiAgICAgICAgXVxuICAgICAgUHJpbnRlcjpcbiAgICAgICAgcGluczogW1xuICAgICAgICAgIHsgbmFtZTonSW4nLCB0eXBlOidpJyB9XG4gICAgICAgIF1cbiAgXG4gIHNldHVwID0gLT5cbiAgICBqZWVidXMuYXR0YWNoICdjaXJjdWl0J1xuICAgICAgLm9uICdzeW5jJywgLT5cbiAgICAgICAgJHNjb3BlLmNpcmN1aXRzID0gQHJvd3NcbiAgICAgIFxuICBzZXR1cCgpICBpZiAkc2NvcGUuc2VydmVyU3RhdHVzIGlzICdjb25uZWN0ZWQnXG4gICRzY29wZS4kb24gJ3dzLW9wZW4nLCBzZXR1cFxuIl19
