(function() {
  var circuitsCtrl, ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('circuits', {
      url: '/circuits',
      templateUrl: '/circuits/circuits.html',
      controller: circuitsCtrl
    });
    return navbarProvider.add('/circuits', 'Circuits', 30);
  });

  circuitsCtrl = function($scope, jeebus) {
    $scope.myDefs = {
      Pipe: {
        name: 'Pipeline',
        width: 160,
        icon: '\uf061',
        pins: [
          {
            name: 'In',
            dir: 'in'
          }, {
            name: 'Out',
            dir: 'out'
          }
        ]
      },
      Printer: {
        width: 120,
        shade: 'lightblue',
        icon: '\uf02f',
        pins: [
          {
            name: 'In',
            dir: 'in'
          }, {
            name: 'In2',
            dir: 'in'
          }
        ]
      }
    };
    return $scope.myData = {
      gadgets: [
        {
          id: 'g1',
          x: 120,
          y: 100,
          title: 'Gadget One',
          type: 'Printer'
        }, {
          id: 'g2',
          x: 120,
          y: 200,
          title: 'Gadget Two',
          type: 'Pipe'
        }
      ],
      wires: [
        {
          from: "g2.Out",
          to: "g1.In",
          cap: 0
        }
      ],
      feeds: {
        "g1.In": {
          data: ["some data", "more data"],
          x: 120,
          y: 300
        }
      },
      labels: {
        "In": "g2.In"
      }
    };
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2lyY3VpdHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxnQkFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxTQUFDLGNBQUQsRUFBaUIsY0FBakIsR0FBQTtBQUNSLElBQUEsY0FBYyxDQUFDLEtBQWYsQ0FBcUIsVUFBckIsRUFDRTtBQUFBLE1BQUEsR0FBQSxFQUFLLFdBQUw7QUFBQSxNQUNBLFdBQUEsRUFBYSx5QkFEYjtBQUFBLE1BRUEsVUFBQSxFQUFZLFlBRlo7S0FERixDQUFBLENBQUE7V0FJQSxjQUFjLENBQUMsR0FBZixDQUFtQixXQUFuQixFQUFnQyxVQUFoQyxFQUE0QyxFQUE1QyxFQUxRO0VBQUEsQ0FBVixDQUZBLENBQUE7O0FBQUEsRUFTQSxZQUFBLEdBQWUsU0FBQyxNQUFELEVBQVMsTUFBVCxHQUFBO0FBQ2IsSUFBQSxNQUFNLENBQUMsTUFBUCxHQUNFO0FBQUEsTUFBQSxJQUFBLEVBQ0U7QUFBQSxRQUFBLElBQUEsRUFBTSxVQUFOO0FBQUEsUUFDQSxLQUFBLEVBQU8sR0FEUDtBQUFBLFFBRUEsSUFBQSxFQUFNLFFBRk47QUFBQSxRQUdBLElBQUEsRUFBTTtVQUNKO0FBQUEsWUFBRSxJQUFBLEVBQU0sSUFBUjtBQUFBLFlBQWMsR0FBQSxFQUFLLElBQW5CO1dBREksRUFFSjtBQUFBLFlBQUUsSUFBQSxFQUFNLEtBQVI7QUFBQSxZQUFlLEdBQUEsRUFBSyxLQUFwQjtXQUZJO1NBSE47T0FERjtBQUFBLE1BUUEsT0FBQSxFQUNFO0FBQUEsUUFBQSxLQUFBLEVBQU8sR0FBUDtBQUFBLFFBQ0EsS0FBQSxFQUFPLFdBRFA7QUFBQSxRQUVBLElBQUEsRUFBTSxRQUZOO0FBQUEsUUFHQSxJQUFBLEVBQU07VUFDSjtBQUFBLFlBQUUsSUFBQSxFQUFNLElBQVI7QUFBQSxZQUFjLEdBQUEsRUFBSyxJQUFuQjtXQURJLEVBRUo7QUFBQSxZQUFFLElBQUEsRUFBTSxLQUFSO0FBQUEsWUFBZSxHQUFBLEVBQUssSUFBcEI7V0FGSTtTQUhOO09BVEY7S0FERixDQUFBO1dBa0JBLE1BQU0sQ0FBQyxNQUFQLEdBQ0U7QUFBQSxNQUFBLE9BQUEsRUFBUztRQUNQO0FBQUEsVUFBRSxFQUFBLEVBQUksSUFBTjtBQUFBLFVBQVksQ0FBQSxFQUFHLEdBQWY7QUFBQSxVQUFvQixDQUFBLEVBQUcsR0FBdkI7QUFBQSxVQUE0QixLQUFBLEVBQU8sWUFBbkM7QUFBQSxVQUFpRCxJQUFBLEVBQU0sU0FBdkQ7U0FETyxFQUVQO0FBQUEsVUFBRSxFQUFBLEVBQUksSUFBTjtBQUFBLFVBQVksQ0FBQSxFQUFHLEdBQWY7QUFBQSxVQUFvQixDQUFBLEVBQUcsR0FBdkI7QUFBQSxVQUE0QixLQUFBLEVBQU8sWUFBbkM7QUFBQSxVQUFpRCxJQUFBLEVBQU0sTUFBdkQ7U0FGTztPQUFUO0FBQUEsTUFJQSxLQUFBLEVBQU87UUFDTDtBQUFBLFVBQUUsSUFBQSxFQUFNLFFBQVI7QUFBQSxVQUFrQixFQUFBLEVBQUksT0FBdEI7QUFBQSxVQUErQixHQUFBLEVBQUssQ0FBcEM7U0FESztPQUpQO0FBQUEsTUFPQSxLQUFBLEVBQ0U7QUFBQSxRQUFBLE9BQUEsRUFBUztBQUFBLFVBQUUsSUFBQSxFQUFNLENBQUUsV0FBRixFQUFlLFdBQWYsQ0FBUjtBQUFBLFVBQXNDLENBQUEsRUFBRyxHQUF6QztBQUFBLFVBQThDLENBQUEsRUFBRyxHQUFqRDtTQUFUO09BUkY7QUFBQSxNQVNBLE1BQUEsRUFDRTtBQUFBLFFBQUEsSUFBQSxFQUFNLE9BQU47T0FWRjtNQXBCVztFQUFBLENBVGYsQ0FBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsibmcgPSBhbmd1bGFyLm1vZHVsZSAnbXlBcHAnXG5cbm5nLmNvbmZpZyAoJHN0YXRlUHJvdmlkZXIsIG5hdmJhclByb3ZpZGVyKSAtPlxuICAkc3RhdGVQcm92aWRlci5zdGF0ZSAnY2lyY3VpdHMnLFxuICAgIHVybDogJy9jaXJjdWl0cydcbiAgICB0ZW1wbGF0ZVVybDogJy9jaXJjdWl0cy9jaXJjdWl0cy5odG1sJ1xuICAgIGNvbnRyb2xsZXI6IGNpcmN1aXRzQ3RybFxuICBuYXZiYXJQcm92aWRlci5hZGQgJy9jaXJjdWl0cycsICdDaXJjdWl0cycsIDMwXG5cbmNpcmN1aXRzQ3RybCA9ICgkc2NvcGUsIGplZWJ1cykgLT5cbiAgJHNjb3BlLm15RGVmcyA9XG4gICAgUGlwZTpcbiAgICAgIG5hbWU6ICdQaXBlbGluZSdcbiAgICAgIHdpZHRoOiAxNjBcbiAgICAgIGljb246ICdcXHVmMDYxJyAjIGZhLWFycm93LXJpZ2h0XG4gICAgICBwaW5zOiBbXG4gICAgICAgIHsgbmFtZTogJ0luJywgZGlyOiAnaW4nIH1cbiAgICAgICAgeyBuYW1lOiAnT3V0JywgZGlyOiAnb3V0JyB9XG4gICAgICBdXG4gICAgUHJpbnRlcjpcbiAgICAgIHdpZHRoOiAxMjBcbiAgICAgIHNoYWRlOiAnbGlnaHRibHVlJ1xuICAgICAgaWNvbjogJ1xcdWYwMmYnICMgZmEtcHJpbnRcbiAgICAgIHBpbnM6IFtcbiAgICAgICAgeyBuYW1lOiAnSW4nLCBkaXI6ICdpbicgfVxuICAgICAgICB7IG5hbWU6ICdJbjInLCBkaXI6ICdpbicgfVxuICAgICAgXVxuICAgICAgXG4gICRzY29wZS5teURhdGEgPVxuICAgIGdhZGdldHM6IFtcbiAgICAgIHsgaWQ6ICdnMScsIHg6IDEyMCwgeTogMTAwLCB0aXRsZTogJ0dhZGdldCBPbmUnLCB0eXBlOiAnUHJpbnRlcicgfVxuICAgICAgeyBpZDogJ2cyJywgeDogMTIwLCB5OiAyMDAsIHRpdGxlOiAnR2FkZ2V0IFR3bycsIHR5cGU6ICdQaXBlJyB9XG4gICAgXVxuICAgIHdpcmVzOiBbXG4gICAgICB7IGZyb206IFwiZzIuT3V0XCIsIHRvOiBcImcxLkluXCIsIGNhcDogMCB9XG4gICAgXVxuICAgIGZlZWRzOlxuICAgICAgXCJnMS5JblwiOiB7IGRhdGE6IFsgXCJzb21lIGRhdGFcIiwgXCJtb3JlIGRhdGFcIiBdLCB4OiAxMjAsIHk6IDMwMCB9XG4gICAgbGFiZWxzOlxuICAgICAgXCJJblwiOiBcImcyLkluXCJcbiAgXG4gICMgc2V0dXAgPSAtPlxuICAjICAgamVlYnVzLmF0dGFjaCAnY2lyY3VpdCdcbiAgIyAgICAgLm9uICdzeW5jJywgLT5cbiAgIyAgICAgICAkc2NvcGUuY2lyY3VpdHMgPSBAcm93c1xuICAjICAgICBcbiAgIyBzZXR1cCgpICBpZiAkc2NvcGUuc2VydmVyU3RhdHVzIGlzICdjb25uZWN0ZWQnXG4gICMgJHNjb3BlLiRvbiAnd3Mtb3BlbicsIHNldHVwXG4iXX0=
