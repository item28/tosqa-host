(function() {
  var gadgetTypes, ng;

  ng = angular.module('myApp');

  gadgetTypes = {
    Pipe: {
      width: 80,
      height: 60,
      shade: 'lightyellow',
      pins: [
        {
          name: 'In',
          type: 'i'
        }, {
          name: 'Out',
          type: 'o'
        }
      ]
    },
    Printer: {
      width: 120,
      height: 40,
      shade: 'lightblue',
      pins: [
        {
          name: 'In',
          type: 'i'
        }
      ]
    }
  };

  ng.directive('circuitEditor', function() {
    return {
      restrict: 'E',
      scope: {
        data: '='
      },
      link: function(scope, elem, attr) {
        var g, gadgetDrag, gadgets, svg, wireDrag;
        svg = d3.select(elem[0]).append('svg').attr({
          width: 900,
          height: 400
        });
        gadgetDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          return this.parentNode.appendChild(this);
        }).on('drag', function(d) {
          d.x = (d3.event.x | 0) + .5;
          d.y = (d3.event.y | 0) + .5;
          return d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
        }).on('dragend', function(d) {
          return console.log(d);
        });
        wireDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          console.log('wireDrag', d);
          return this.parentNode.appendChild(this);
        }).on('drag', function(d) {
          d.x = d3.event.x;
          d.y = d3.event.y;
          return d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
        }).on('dragend', function(d) {
          return console.log(d);
        });
        gadgets = svg.selectAll('.gadget').data(scope.data.gadgets);
        g = gadgets.enter().append('g').call(gadgetDrag).attr({
          "class": 'gadget'
        });
        g.append('rect').each(function(d) {
          var me;
          d.gt = gadgetTypes[d.type];
          d.hw = d.gt.width / 2;
          d.hh = d.gt.height / 2;
          me = d3.select(this);
          return me.attr({
            x: -d.hw,
            y: -d.hh,
            width: 2 * d.hw,
            height: 2 * d.hh
          });
        }).style({
          fill: function(d) {
            return d.gt.shade;
          }
        });
        g.append('text').text(function(d) {
          return d.title;
        }).attr({
          "class": 'title',
          'text-anchor': 'middle',
          y: function(d) {
            return 12 - d.hh;
          }
        });
        g.append('text').text(function(d) {
          return d.type;
        }).attr({
          "class": 'type',
          'text-anchor': 'middle',
          y: function(d) {
            return -5 + d.hh;
          }
        });
        g.append('circle').call(wireDrag).attr({
          "class": 'pin',
          cx: function(d) {
            return -d.hw;
          },
          r: 3
        });
        g.append('circle').call(wireDrag).attr({
          "class": 'pin',
          cx: function(d) {
            return d.hw;
          },
          r: 3
        });
        return gadgets.attr({
          transform: function(d) {
            return "translate(" + (d.x + .5) + "," + (d.y + .5) + ")";
          }
        });
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
