(function() {
  var gadgetTypes, ng;

  ng = angular.module('myApp');

  gadgetTypes = {
    Pipe: {
      width: 80,
      height: 60,
      shade: 'lightyellow',
      pins: [
        {
          name: 'In',
          type: 'i',
          x: -40,
          y: 0
        }, {
          name: 'Out',
          type: 'o',
          x: 40,
          y: 0
        }
      ]
    },
    Printer: {
      width: 120,
      height: 40,
      shade: 'lightblue',
      pins: [
        {
          name: 'In',
          type: 'i',
          x: -60,
          y: 0
        }, {
          name: 'Out',
          type: 'o',
          x: 60,
          y: 0
        }
      ]
    }
  };

  ng.directive('circuitEditor', function() {
    return {
      restrict: 'E',
      scope: {
        data: '='
      },
      link: function(scope, elem, attr) {
        var d, diag, findPin, g, gadgetDrag, gadgets, pins, svg, wires, _, _ref, _ref1;
        svg = d3.select(elem[0]).append('svg').attr({
          height: "70%"
        });
        findPin = function(name) {
          var g, gid, p, pname, _i, _j, _len, _len1, _ref, _ref1, _ref2;
          _ref = name.split('.'), gid = _ref[0], pname = _ref[1];
          _ref1 = scope.data.gadgets;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            g = _ref1[_i];
            if (gid === g.id) {
              _ref2 = g.gt.pins;
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                p = _ref2[_j];
                if (pname === p.name) {
                  return {
                    x: g.x + p.x,
                    y: g.y + p.y,
                    g: g,
                    p: p
                  };
                }
              }
            }
          }
        };
        _ref = scope.data.gadgets;
        for (_ in _ref) {
          d = _ref[_];
          d.gt = gadgetTypes[d.type];
          d.hw = d.gt.width / 2;
          d.hh = d.gt.height / 2;
        }
        _ref1 = scope.data.wires;
        for (_ in _ref1) {
          d = _ref1[_];
          d.source = findPin(d.from);
          d.target = findPin(d.to);
        }
        gadgets = svg.selectAll('.gadget').data(scope.data.gadgets);
        wires = svg.selectAll('.wire').data(scope.data.wires);
        diag = d3.svg.diagonal();
        gadgetDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          return this.parentNode.appendChild(this);
        }).on('drag', function(d) {
          d.x = d3.event.x | 0;
          d.y = d3.event.y | 0;
          d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
          return wires.filter(function(w) {
            return w.source.g === d || w.target.g === d;
          }).each(function(d) {
            d.source = findPin(d.from);
            return d.target = findPin(d.to);
          }).attr({
            d: diag
          });
        }).on('dragend', function(d) {
          return console.log('save gadget', d);
        });
        g = gadgets.enter().append('g').call(gadgetDrag).attr({
          "class": 'gadget'
        });
        g.append('rect').each(function(d) {
          return d3.select(this).attr({
            "class": 'outline',
            x: 0.5 - d.hw,
            y: 0.5 - d.hh,
            width: 2 * d.hw,
            height: 2 * d.hh
          });
        }).style({
          fill: function(d) {
            return d.gt.shade;
          }
        });
        g.append('text').text(function(d) {
          return d.title;
        }).attr({
          "class": 'title',
          y: function(d) {
            return 12 - d.hh;
          }
        });
        g.append('text').text(function(d) {
          return d.type;
        }).attr({
          "class": 'type',
          y: function(d) {
            return -4 + d.hh;
          }
        });
        pins = gadgets.selectAll('rect .pin').data(function(d) {
          return d.gt.pins;
        });
        pins.enter().append('circle').attr({
          "class": 'pin',
          cx: (function(d) {
            return d.x;
          }),
          cy: (function(d) {
            return d.y;
          }),
          r: 3
        }).on('mousedown', function(d) {
          return console.log('c1', d);
        });
        pins.exit().remove();
        wires.enter().append('path').attr({
          "class": 'wire',
          d: diag
        });
        wires.exit().remove();
        return gadgets.attr({
          transform: function(d) {
            return "translate(" + d.x + "," + d.y + ")";
          }
        });
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
