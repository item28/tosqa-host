(function() {
  var gadgetTypes, ng;

  ng = angular.module('myApp');

  gadgetTypes = {
    Pipe: {
      width: 80,
      height: 60,
      shade: 'lightyellow',
      pins: [
        {
          name: 'In',
          type: 'i'
        }, {
          name: 'Out',
          type: 'o'
        }
      ]
    },
    Printer: {
      width: 120,
      height: 40,
      shade: 'lightblue',
      pins: [
        {
          name: 'In',
          type: 'i'
        }
      ]
    }
  };

  ng.directive('circuitEditor', function() {
    return {
      restrict: 'E',
      scope: {
        data: '='
      },
      link: function(scope, elem, attr) {
        var diag, g, gadgetDrag, gadgets, svg, wireDrag, wires;
        svg = d3.select(elem[0]).append('svg').attr({
          width: 900,
          height: 400
        });
        gadgetDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          return this.parentNode.appendChild(this);
        }).on('drag', function(d) {
          d.x = d3.event.x | 0;
          d.y = d3.event.y | 0;
          return d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
        }).on('dragend', function(d) {
          return console.log('save gadget', d);
        });
        wireDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          console.log('wireDrag', d);
          this.parentNode.appendChild(this);
          return d3.event.sourceEvent.stopPropagation();
        }).on('drag', function(d) {
          d.x = d3.event.x;
          d.y = d3.event.y;
          return d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
        }).on('dragend', function(d) {
          return console.log('save wire', d);
        });
        diag = d3.svg.diagonal();
        gadgets = svg.selectAll('.gadget').data(scope.data.gadgets);
        g = gadgets.enter().append('g').call(gadgetDrag).attr({
          "class": 'gadget'
        }).each(function(d) {
          d.gt = gadgetTypes[d.type];
          d.hw = d.gt.width / 2;
          return d.hh = d.gt.height / 2;
        });
        g.append('rect').each(function(d) {
          return d3.select(this).attr({
            x: 0.5 - d.hw,
            y: 0.5 - d.hh,
            width: 2 * d.hw,
            height: 2 * d.hh
          });
        }).style({
          fill: function(d) {
            return d.gt.shade;
          }
        });
        g.append('text').text(function(d) {
          return d.title;
        }).attr({
          "class": 'title',
          y: function(d) {
            return 12 - d.hh;
          }
        });
        g.append('text').text(function(d) {
          return d.type;
        }).attr({
          "class": 'type',
          y: function(d) {
            return -4 + d.hh;
          }
        });
        g.append('circle').on('mousedown', function(d) {
          console.log('c1', d);
          return d3.event.sourceEvent.stopPropagation();
        }).attr({
          "class": 'pin',
          cx: (function(d) {
            return 0.5 - d.hw;
          }),
          r: 3
        });
        g.append('circle').on('mousedown', function(d) {
          console.log('c2', d);
          return d3.event.sourceEvent.stopPropagation();
        }).attr({
          "class": 'pin',
          cx: (function(d) {
            return 0.5 + d.hw;
          }),
          r: 3
        });
        diag.source(scope.data.gadgets[0]);
        diag.target(scope.data.gadgets[1]);
        wires = svg.selectAll('.wire').data(scope.data.gadgets);
        wires.enter().append('path').attr({
          "class": 'wire',
          d: diag
        });
        return gadgets.attr({
          transform: function(d) {
            return "translate(" + d.x + "," + d.y + ")";
          }
        });
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
