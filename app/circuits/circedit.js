(function() {
  var gadgetTypes, ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  gadgetTypes = {
    Pipe: {
      width: 80,
      height: 60,
      shade: 'lightyellow',
      pins: [
        {
          name: 'In',
          type: 'i'
        }, {
          name: 'Out',
          type: 'o'
        }
      ]
    },
    Printer: {
      width: 120,
      height: 40,
      shade: 'lightblue',
      pins: [
        {
          name: 'In',
          type: 'i'
        }, {
          name: 'Out',
          type: 'o'
        }
      ]
    }
  };

  ng.directive('circuitEditor', function() {
    return {
      restrict: 'E',
      scope: {
        data: '='
      },
      link: function(scope, elem, attr) {
        var diag, findPin, g, gadgetDrag, gadgets, pins, svg, wireDrag, wires;
        svg = d3.select(elem[0]).append('svg').attr({
          width: 900,
          height: 400
        });
        gadgetDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          return this.parentNode.appendChild(this);
        }).on('drag', function(d) {
          d.x = d3.event.x | 0;
          d.y = d3.event.y | 0;
          return d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
        }).on('dragend', function(d) {
          return console.log('save gadget', d);
        });
        wireDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          console.log('wireDrag', d);
          this.parentNode.appendChild(this);
          return d3.event.sourceEvent.stopPropagation();
        }).on('drag', function(d) {
          d.x = d3.event.x;
          d.y = d3.event.y;
          return d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
        }).on('dragend', function(d) {
          return console.log('save wire', d);
        });
        diag = d3.svg.diagonal();
        gadgets = svg.selectAll('.gadget').data(scope.data.gadgets);
        g = gadgets.enter().append('g').call(gadgetDrag).attr({
          "class": 'gadget'
        }).each(function(d) {
          d.gt = gadgetTypes[d.type];
          d.hw = d.gt.width / 2;
          return d.hh = d.gt.height / 2;
        });
        g.append('rect').each(function(d) {
          return d3.select(this).attr({
            x: 0.5 - d.hw,
            y: 0.5 - d.hh,
            width: 2 * d.hw,
            height: 2 * d.hh
          });
        }).style({
          fill: function(d) {
            return d.gt.shade;
          }
        });
        g.append('text').text(function(d) {
          return d.title;
        }).attr({
          "class": 'title',
          y: function(d) {
            return 12 - d.hh;
          }
        });
        g.append('text').text(function(d) {
          return d.type;
        }).attr({
          "class": 'type',
          y: function(d) {
            return -4 + d.hh;
          }
        });
        g.append('circle').on('mousedown', function(d) {
          console.log('c1', d);
          return d3.event.sourceEvent.stopPropagation();
        }).attr({
          "class": 'pin',
          cx: (function(d) {
            return 0.5 - d.hw;
          }),
          r: 3
        });
        g.append('circle').on('mousedown', function(d) {
          console.log('c2', d);
          return d3.event.sourceEvent.stopPropagation();
        }).attr({
          "class": 'pin',
          cx: (function(d) {
            return 0.5 + d.hw;
          }),
          r: 3
        });
        pins = gadgets.selectAll('rect .pin').data(function(d) {
          var i, p, _i, _len, _ref, _results;
          i = 0;
          d.conns = [];
          _ref = d.gt.pins;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            _results.push(d.conns.push({
              pin: p,
              parent: d,
              x: 800 + 50 * i++,
              y: 10 * i
            }));
          }
          return _results;
        });
        pins.enter().append('circle').each(function(d) {
          console.log('t', d.pin, d.parent);
          return d3.select(this).attr({
            "class": 'pin',
            cx: 100,
            cy: 50,
            r: 8
          });
        });
        findPin = function(name) {
          var c, cpn, gid, _i, _j, _len, _len1, _ref, _ref1, _ref2;
          _ref = name.split('.'), gid = _ref[0], cpn = _ref[1];
          _ref1 = scope.data.gadgets;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            g = _ref1[_i];
            if (gid === g.id) {
              _ref2 = g.conns;
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                c = _ref2[_j];
                console.log('cpn', cpn, c);
                if (cpn === c.pin.name) {
                  console.log('gp', name, g, c);
                  return [g, c];
                }
              }
            }
          }
        };
        diag.source(function(d) {
          console.log.apply(console, ['df', d].concat(__slice.call(findPin(d.from))));
          return findPin(d.from)[1];
        });
        diag.target(function(d) {
          console.log.apply(console, ['dt', d].concat(__slice.call(findPin(d.to))));
          return findPin(d.to)[1];
        });
        wires = svg.selectAll('.wire').data(scope.data.wires);
        wires.enter().append('path').attr({
          "class": 'wire',
          d: diag
        });
        return gadgets.attr({
          transform: function(d) {
            return "translate(" + d.x + "," + d.y + ")";
          }
        });
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
