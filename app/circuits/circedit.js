(function() {
  var gadgetTypes, ng;

  ng = angular.module('myApp');

  gadgetTypes = {
    Pipe: {
      width: 80,
      height: 60,
      shade: 'lightyellow',
      pins: [
        {
          name: 'In',
          type: 'i'
        }, {
          name: 'Out',
          type: 'o'
        }
      ]
    },
    Printer: {
      width: 120,
      height: 40,
      shade: 'lightblue',
      pins: [
        {
          name: 'In',
          type: 'i'
        }
      ]
    }
  };

  ng.directive('circuitEditor', function() {
    return {
      restrict: 'E',
      scope: {
        data: '='
      },
      link: function(scope, elem, attr) {
        var g, gadgetDrag, gadgets, svg, wireDrag;
        svg = d3.select(elem[0]).append('svg').attr({
          width: 900,
          height: 400
        });
        gadgetDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          return this.parentNode.appendChild(this);
        }).on('drag', function(d) {
          d.x = d3.event.x | 0;
          d.y = d3.event.y | 0;
          return d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
        }).on('dragend', function(d) {
          return console.log('save gadget', d);
        });
        wireDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          console.log('wireDrag', d);
          this.parentNode.appendChild(this);
          return d3.event.sourceEvent.stopPropagation();
        }).on('drag', function(d) {
          d.x = d3.event.x;
          d.y = d3.event.y;
          return d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
        }).on('dragend', function(d) {
          return console.log('save wire', d);
        });
        gadgets = svg.selectAll('.gadget').data(scope.data.gadgets);
        g = gadgets.enter().append('g').call(gadgetDrag).attr({
          "class": 'gadget'
        });
        g.append('rect').each(function(d) {
          var me;
          d.gt = gadgetTypes[d.type];
          d.hw = d.gt.width / 2;
          d.hh = d.gt.height / 2;
          me = d3.select(this);
          return me.attr({
            x: 0.5 - d.hw,
            y: 0.5 - d.hh,
            width: 2 * d.hw,
            height: 2 * d.hh
          });
        }).style({
          fill: function(d) {
            return d.gt.shade;
          }
        });
        g.append('text').text(function(d) {
          return d.title;
        }).attr({
          "class": 'title',
          'text-anchor': 'middle',
          y: function(d) {
            return 12 - d.hh;
          }
        });
        g.append('text').text(function(d) {
          return d.type;
        }).attr({
          "class": 'type',
          'text-anchor': 'middle',
          y: function(d) {
            return -4 + d.hh;
          }
        });
        g.append('circle').on('mousedown', function(d) {
          console.log('c1', d);
          return d3.event.sourceEvent.stopPropagation();
        }).attr({
          "class": 'pin',
          cx: function(d) {
            return 0.5 - d.hw;
          },
          r: 3
        });
        g.append('circle').on('mousedown', function(d) {
          console.log('c2', d);
          return d3.event.sourceEvent.stopPropagation();
        }).attr({
          "class": 'pin',
          cx: function(d) {
            return 0.5 + d.hw;
          },
          r: 3
        });
        return gadgets.attr({
          transform: function(d) {
            return "translate(" + d.x + "," + d.y + ")";
          }
        });
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2lyY2VkaXQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSxlQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLE9BQU8sQ0FBQyxNQUFSLENBQWUsT0FBZixDQUFMLENBQUE7O0FBQUEsRUFFQSxXQUFBLEdBQ0U7QUFBQSxJQUFBLElBQUEsRUFDRTtBQUFBLE1BQUEsS0FBQSxFQUFPLEVBQVA7QUFBQSxNQUNBLE1BQUEsRUFBUSxFQURSO0FBQUEsTUFFQSxLQUFBLEVBQU8sYUFGUDtBQUFBLE1BR0EsSUFBQSxFQUFNO1FBQ0o7QUFBQSxVQUFFLElBQUEsRUFBSyxJQUFQO0FBQUEsVUFBYSxJQUFBLEVBQUssR0FBbEI7U0FESSxFQUVKO0FBQUEsVUFBRSxJQUFBLEVBQUssS0FBUDtBQUFBLFVBQWMsSUFBQSxFQUFLLEdBQW5CO1NBRkk7T0FITjtLQURGO0FBQUEsSUFRQSxPQUFBLEVBQ0U7QUFBQSxNQUFBLEtBQUEsRUFBTyxHQUFQO0FBQUEsTUFDQSxNQUFBLEVBQVEsRUFEUjtBQUFBLE1BRUEsS0FBQSxFQUFPLFdBRlA7QUFBQSxNQUdBLElBQUEsRUFBTTtRQUNKO0FBQUEsVUFBRSxJQUFBLEVBQUssSUFBUDtBQUFBLFVBQWEsSUFBQSxFQUFLLEdBQWxCO1NBREk7T0FITjtLQVRGO0dBSEYsQ0FBQTs7QUFBQSxFQW1CQSxFQUFFLENBQUMsU0FBSCxDQUFhLGVBQWIsRUFBOEIsU0FBQSxHQUFBO1dBQzVCO0FBQUEsTUFBQSxRQUFBLEVBQVUsR0FBVjtBQUFBLE1BRUEsS0FBQSxFQUNFO0FBQUEsUUFBQSxJQUFBLEVBQU0sR0FBTjtPQUhGO0FBQUEsTUFLQSxJQUFBLEVBQU0sU0FBQyxLQUFELEVBQVEsSUFBUixFQUFjLElBQWQsR0FBQTtBQUNKLFlBQUEscUNBQUE7QUFBQSxRQUFBLEdBQUEsR0FBTSxFQUFFLENBQUMsTUFBSCxDQUFVLElBQUssQ0FBQSxDQUFBLENBQWYsQ0FB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LENBSUUsQ0FBQyxJQUpILENBS0k7QUFBQSxVQUFBLE9BQUEsRUFBTyxLQUFQO0FBQUEsVUFDQSxFQUFBLEVBQUksU0FBQyxDQUFELEdBQUE7bUJBQU8sR0FBQSxHQUFNLENBQUMsQ0FBQyxHQUFmO1VBQUEsQ0FESjtBQUFBLFVBRUEsQ0FBQSxFQUFHLENBRkg7U0FMSixDQW5FQSxDQUFBO2VBNEVBLE9BQU8sQ0FBQyxJQUFSLENBQ0U7QUFBQSxVQUFBLFNBQUEsRUFBVyxTQUFDLENBQUQsR0FBQTttQkFBUSxZQUFBLEdBQVcsQ0FBQyxDQUFDLENBQWIsR0FBZ0IsR0FBaEIsR0FBa0IsQ0FBQyxDQUFDLENBQXBCLEdBQXVCLElBQS9CO1VBQUEsQ0FBWDtTQURGLEVBN0VJO01BQUEsQ0FMTjtNQUQ0QjtFQUFBLENBQTlCLENBbkJBLENBQUE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIm5nID0gYW5ndWxhci5tb2R1bGUgJ215QXBwJ1xuXG5nYWRnZXRUeXBlcyA9XG4gIFBpcGU6XG4gICAgd2lkdGg6IDgwXG4gICAgaGVpZ2h0OiA2MFxuICAgIHNoYWRlOiAnbGlnaHR5ZWxsb3cnXG4gICAgcGluczogW1xuICAgICAgeyBuYW1lOidJbicsIHR5cGU6J2knIH1cbiAgICAgIHsgbmFtZTonT3V0JywgdHlwZTonbycgfVxuICAgIF1cbiAgUHJpbnRlcjpcbiAgICB3aWR0aDogMTIwXG4gICAgaGVpZ2h0OiA0MFxuICAgIHNoYWRlOiAnbGlnaHRibHVlJ1xuICAgIHBpbnM6IFtcbiAgICAgIHsgbmFtZTonSW4nLCB0eXBlOidpJyB9XG4gICAgXVxuXG5uZy5kaXJlY3RpdmUgJ2NpcmN1aXRFZGl0b3InLCAtPlxuICByZXN0cmljdDogJ0UnXG4gIFxuICBzY29wZTpcbiAgICBkYXRhOiAnPSdcbiAgICBcbiAgbGluazogKHNjb3BlLCBlbGVtLCBhdHRyKSAtPlxuICAgIHN2ZyA9IGQzLnNlbGVjdChlbGVtWzBdKS5hcHBlbmQgJ3N2ZydcbiAgICAgIC5hdHRyIHdpZHRoOiA5MDAsIGhlaWdodDogNDAwXG5cbiAgICBnYWRnZXREcmFnID0gZDMuYmVoYXZpb3IuZHJhZygpXG4gICAgICAub3JpZ2luIE9iamVjdFxuICAgICAgLm9uICdkcmFnc3RhcnQnLCAoZCkgLT5cbiAgICAgICAgQHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQgQCAjIGFycmFuZ2UgdGhpcyBnYWRnZXQgaW4gZnJvbnRcbiAgICAgIC5vbiAnZHJhZycsIChkKSAtPlxuICAgICAgICBkLnggPSBkMy5ldmVudC54IHwgMCAjIHN0YXkgb24gaW50IGNvb3JkaW5hdGVzXG4gICAgICAgIGQueSA9IGQzLmV2ZW50LnkgfCAwICMgc3RheSBvbiBpbnQgY29vcmRpbmF0ZXNcbiAgICAgICAgZDMuc2VsZWN0KEApLmF0dHJcbiAgICAgICAgICB0cmFuc2Zvcm06IChkKSAtPiBcInRyYW5zbGF0ZSgje2QueH0sI3tkLnl9KVwiXG4gICAgICAub24gJ2RyYWdlbmQnLCAoZCkgLT5cbiAgICAgICAgY29uc29sZS5sb2cgJ3NhdmUgZ2FkZ2V0JywgZCAjIFRPRE86IHNhdmUgdG8gc2VydmVyXG5cbiAgICB3aXJlRHJhZyA9IGQzLmJlaGF2aW9yLmRyYWcoKVxuICAgICAgLm9yaWdpbiBPYmplY3RcbiAgICAgIC5vbiAnZHJhZ3N0YXJ0JywgKGQpIC0+XG4gICAgICAgIGNvbnNvbGUubG9nICd3aXJlRHJhZycsIGRcbiAgICAgICAgQHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQgQCAjIGFycmFuZ2UgdGhpcyB3aXJlIGluIGZyb250XG4gICAgICAgIGQzLmV2ZW50LnNvdXJjZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAub24gJ2RyYWcnLCAoZCkgLT5cbiAgICAgICAgZC54ID0gZDMuZXZlbnQueFxuICAgICAgICBkLnkgPSBkMy5ldmVudC55XG4gICAgICAgIGQzLnNlbGVjdChAKS5hdHRyXG4gICAgICAgICAgdHJhbnNmb3JtOiAoZCkgLT4gXCJ0cmFuc2xhdGUoI3tkLnh9LCN7ZC55fSlcIlxuICAgICAgLm9uICdkcmFnZW5kJywgKGQpIC0+XG4gICAgICAgIGNvbnNvbGUubG9nICdzYXZlIHdpcmUnLCBkICMgVE9ETzogc2F2ZSB0byBzZXJ2ZXJcblxuICAgIGdhZGdldHMgPSBzdmcuc2VsZWN0QWxsKCcuZ2FkZ2V0JykuZGF0YShzY29wZS5kYXRhLmdhZGdldHMpXG4gIFxuICAgIGcgPSBnYWRnZXRzLmVudGVyKCkuYXBwZW5kKCdnJykuY2FsbChnYWRnZXREcmFnKVxuICAgICAgLmF0dHIgY2xhc3M6ICdnYWRnZXQnXG4gICAgZy5hcHBlbmQoJ3JlY3QnKVxuICAgICAgLmVhY2ggKGQpIC0+XG4gICAgICAgIGQuZ3QgPSBnYWRnZXRUeXBlc1tkLnR5cGVdXG4gICAgICAgIGQuaHcgPSBkLmd0LndpZHRoIC8gMlxuICAgICAgICBkLmhoID0gZC5ndC5oZWlnaHQgLyAyXG4gICAgICAgIG1lID0gZDMuc2VsZWN0KEApXG4gICAgICAgIG1lLmF0dHJcbiAgICAgICAgICAjIDFweCBsaW5lcyByZW5kZXIgc2hhcnBseSB3aGVuIHBsYWNlZCBvbiBhIDAuNXB4IG9mZnNldFxuICAgICAgICAgIHg6IDAuNSAtIGQuaHdcbiAgICAgICAgICB5OiAwLjUgLSBkLmhoXG4gICAgICAgICAgd2lkdGg6IDIgKiBkLmh3XG4gICAgICAgICAgaGVpZ2h0OiAyICogZC5oaFxuICAgICAgLnN0eWxlXG4gICAgICAgIGZpbGw6IChkKSAtPiBkLmd0LnNoYWRlXG4gICAgZy5hcHBlbmQoJ3RleHQnKVxuICAgICAgLnRleHQgKGQpIC0+IGQudGl0bGVcbiAgICAgIC5hdHRyXG4gICAgICAgIGNsYXNzOiAndGl0bGUnXG4gICAgICAgICd0ZXh0LWFuY2hvcic6ICdtaWRkbGUnXG4gICAgICAgIHk6IChkKSAtPiAxMiAtIGQuaGhcbiAgICBnLmFwcGVuZCgndGV4dCcpXG4gICAgICAudGV4dCAoZCkgLT4gZC50eXBlXG4gICAgICAuYXR0clxuICAgICAgICBjbGFzczogJ3R5cGUnXG4gICAgICAgICd0ZXh0LWFuY2hvcic6ICdtaWRkbGUnXG4gICAgICAgIHk6IChkKSAtPiAtNCArIGQuaGhcbiAgICBnLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgIC5vbiAnbW91c2Vkb3duJywgKGQpIC0+XG4gICAgICAgIGNvbnNvbGUubG9nICdjMScsIGRcbiAgICAgICAgZDMuZXZlbnQuc291cmNlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIC5hdHRyXG4gICAgICAgIGNsYXNzOiAncGluJ1xuICAgICAgICBjeDogKGQpIC0+IDAuNSAtIGQuaHdcbiAgICAgICAgcjogM1xuICAgIGcuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgLm9uICdtb3VzZWRvd24nLCAoZCkgLT5cbiAgICAgICAgY29uc29sZS5sb2cgJ2MyJywgZFxuICAgICAgICBkMy5ldmVudC5zb3VyY2VFdmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgLmF0dHJcbiAgICAgICAgY2xhc3M6ICdwaW4nXG4gICAgICAgIGN4OiAoZCkgLT4gMC41ICsgZC5od1xuICAgICAgICByOiAzXG5cbiAgICBnYWRnZXRzLmF0dHJcbiAgICAgIHRyYW5zZm9ybTogKGQpIC0+IFwidHJhbnNsYXRlKCN7ZC54fSwje2QueX0pXCJcbiJdfQ==
