(function() {
  var findPin, ng, prepareData;

  ng = angular.module('myApp');

  ng.directive('circuitEditor', function() {
    return {
      restrict: 'E',
      scope: {
        defs: '=',
        data: '='
      },
      link: function(scope, elem, attr) {
        var diag, dragInfo, dragWire, gadgetDrag, gadgets, lastg, pinDrag, redraw, svg, wireUnderCursor, wires;
        svg = d3.select(elem[0]).append('svg').attr({
          height: "60%"
        });
        diag = d3.svg.diagonal().projection(function(d) {
          return [d.y, d.x];
        });
        lastg = gadgets = wires = null;
        gadgetDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          this.parentNode.appendChild(this);
          return d3.event.sourceEvent.stopPropagation();
        }).on('drag', function(d) {
          d.x = d3.event.x | 0;
          d.y = d3.event.y | 0;
          d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
          return wires.filter(function(w) {
            return w.source.g === d || w.target.g === d;
          }).each(function(d) {
            d.source = findPin(d.from, scope.data.gadgets);
            return d.target = findPin(d.to, scope.data.gadgets);
          }).attr({
            d: diag
          });
        }).on('dragend', function(d) {
          return console.log('save gadget', d);
        });
        dragInfo = {};
        dragWire = svg.append('path').datum(dragInfo).attr({
          id: 'drag'
        });
        wireUnderCursor = null;
        pinDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          d3.event.sourceEvent.stopPropagation();
          this.parentNode.appendChild(this);
          dragInfo.from = d.pin;
          delete dragInfo.to;
          return dragInfo.source = findPin(d.pin, scope.data.gadgets);
        }).on('drag', function(d) {
          var mx, my, orig, _ref;
          _ref = d3.mouse(this), mx = _ref[0], my = _ref[1];
          orig = dragInfo.source;
          dragInfo.target = {
            x: orig.x + my - d.y,
            y: orig.y + mx - d.x
          };
          return dragWire.attr({
            "class": 'drawing',
            fill: 'none',
            d: diag
          });
        }).on('dragend', function(d) {
          var nw;
          dragWire.classed('drawing', false);
          if (dragInfo.to) {
            nw = {
              from: dragInfo.from,
              to: dragInfo.to
            };
            if (nw.from !== nw.to) {
              console.log('add wire', nw);
              scope.data.wires.push(nw);
            }
            return redraw();
          }
        });
        redraw = function() {
          var g, p, pins;
          lastg = prepareData(scope.defs, scope.data);
          gadgets = svg.selectAll('.gadget').data(scope.data.gadgets, function(d) {
            return d.id;
          });
          wires = svg.selectAll('.wire').data(scope.data.wires, function(d) {
            return "" + d.from + "/" + d.to;
          });
          g = gadgets.enter().append('g').call(gadgetDrag).attr({
            "class": 'gadget'
          });
          g.append('rect').each(function(d) {
            d.def = scope.defs[d.type];
            d.hw = d.def.width / 2;
            d.hh = d.def.height / 2;
            return d3.select(this).attr({
              "class": 'outline',
              x: 0.5 - d.hw,
              y: 0.5 - d.hh,
              width: 2 * d.hw,
              height: 2 * d.hh
            });
          }).style({
            fill: function(d) {
              return d.def.shade;
            }
          });
          g.append('text').text(function(d) {
            return d.title;
          }).attr({
            "class": 'title',
            y: function(d) {
              return 12 - d.hh;
            }
          });
          g.append('text').text(function(d) {
            return d.def.name;
          }).attr({
            "class": 'type',
            y: function(d) {
              return -4 + d.hh;
            }
          });
          g.append('text').text(function(d) {
            return d.def.icon;
          }).attr({
            "class": 'iconfont',
            x: 0,
            y: 0
          });
          g.append('text').text(function(d) {
            return '\uf014';
          }).attr({
            "class": 'iconfont',
            x: (function(d) {
              return d.hw - 8;
            }),
            y: (function(d) {
              return 8 - d.hh;
            })
          }).style({
            'font-size': '12px'
          }).on('mousedown', function(d) {
            var i, n, sdw, w, _ref;
            d3.event.stopPropagation();
            sdw = scope.data.wires;
            n = sdw.length;
            while (n) {
              w = sdw[--n];
              if (w.from.split('.')[0] === d.id || w.to.split('.')[0] === d.id) {
                console.log('del attached', w);
                sdw.splice(n, 1);
              }
            }
            console.log('del gadget', d);
            _ref = scope.data.gadgets;
            for (i in _ref) {
              g = _ref[i];
              if (!(g === d)) {
                continue;
              }
              scope.data.gadgets.splice(i, 1);
              break;
            }
            return redraw();
          });
          gadgets.exit().remove();
          pins = gadgets.selectAll('.pin').data(function(d) {
            var p;
            return d.conn = (function() {
              var _i, _len, _ref, _results;
              _ref = d.def.pins;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                p = _ref[_i];
                _results.push({
                  x: p.x,
                  y: p.y,
                  name: p.name,
                  dir: p.dir,
                  pin: "" + d.id + "." + p.name
                });
              }
              return _results;
            })();
          });
          p = pins.enter();
          p.append('circle').attr({
            "class": 'pin',
            cx: (function(d) {
              return d.x + .5;
            }),
            cy: (function(d) {
              return d.y + .5;
            }),
            r: 3
          });
          p.append('circle').call(pinDrag).attr({
            "class": 'hit',
            cx: (function(d) {
              return d.x + .5;
            }),
            cy: (function(d) {
              return d.y + .5;
            }),
            r: 7
          }).on('mouseup', function(d) {
            return dragInfo.to = d.pin;
          });
          p.append('text').text(function(d) {
            return d.name;
          }).attr({
            "class": function(d) {
              return d.dir;
            },
            x: function(d) {
              if (d.dir === 'in') {
                return d.x + 10;
              } else {
                return d.x - 10;
              }
            },
            y: function(d) {
              return d.y + 5;
            }
          });
          pins.exit().remove();
          wires.enter().insert('path', 'g').attr({
            "class": 'wire',
            fill: 'none',
            d: diag
          }).on('mouseenter', function(d) {
            return wireUnderCursor = d;
          }).on('mouseleave', function(d) {
            return wireUnderCursor = null;
          });
          wires.exit().remove();
          return gadgets.attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
        };
        redraw();
        return svg.on('mousedown', function() {
          var i, w, x, y, _ref, _ref1;
          if (wireUnderCursor) {
            console.log('del wire', wireUnderCursor);
            _ref = scope.data.wires;
            for (i in _ref) {
              w = _ref[i];
              if (!(w === wireUnderCursor)) {
                continue;
              }
              scope.data.wires.splice(i, 1);
              break;
            }
          } else {
            _ref1 = d3.mouse(this), x = _ref1[0], y = _ref1[1];
            ng = {
              id: "g" + (++lastg),
              x: x | 0,
              y: y | 0,
              title: 'Gadget Two',
              type: 'Pipe'
            };
            console.log("add gadget", ng);
            scope.data.gadgets.push(ng);
          }
          return redraw();
        });
      }
    };
  });

  findPin = function(name, gdata) {
    var g, gid, p, pname, _i, _j, _len, _len1, _ref, _ref1;
    _ref = name.split('.'), gid = _ref[0], pname = _ref[1];
    for (_i = 0, _len = gdata.length; _i < _len; _i++) {
      g = gdata[_i];
      if (gid === g.id) {
        _ref1 = g.def.pins;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          if (pname === p.name) {
            return {
              y: g.x + p.x + .5,
              x: g.y + p.y + .5,
              g: g,
              p: p
            };
          }
        }
      }
    }
  };

  prepareData = function(gdefs, gdata) {
    var d, ins, n, outs, p, seq, step, yIn, yOut, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
    for (n in gdefs) {
      d = gdefs[n];
      d.name || (d.name = n);
      ins = 0;
      _ref = d.pins;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.x = d.width / 2;
        if (p.dir === 'in') {
          p.x = -p.x;
          ++ins;
        }
      }
      outs = d.pins.length - ins;
      step = 20;
      yIn = -(ins - 1) * step / 2;
      yOut = -(outs - 1) * step / 2;
      _ref1 = d.pins;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        if (p.dir === 'in') {
          p.y = yIn;
          yIn += step;
        } else {
          p.y = yOut;
          yOut += step;
        }
      }
      d.height = 40 + step * (ins > outs ? ins : outs);
    }
    seq = '';
    _ref2 = gdata.gadgets;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      d = _ref2[_k];
      if (/^g\d+$/.test(d.id) && d.id > seq) {
        seq = d.id;
      }
      d.def = gdefs[d.type];
      d.hw = d.def.width / 2;
      d.hh = d.def.height / 2;
    }
    _ref3 = gdata.wires;
    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
      d = _ref3[_l];
      d.source = findPin(d.from, gdata.gadgets);
      d.target = findPin(d.to, gdata.gadgets);
    }
    return seq.slice(1) | 0;
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2lyY2VkaXQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSx3QkFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLFNBQUgsQ0FBYSxlQUFiLEVBQThCLFNBQUEsR0FBQTtXQUM1QjtBQUFBLE1BQUEsUUFBQSxFQUFVLEdBQVY7QUFBQSxNQUVBLEtBQUEsRUFDRTtBQUFBLFFBQUEsSUFBQSxFQUFNLEdBQU47QUFBQSxRQUNBLElBQUEsRUFBTSxHQUROO09BSEY7QUFBQSxNQU1BLElBQUEsRUFBTSxTQUFDLEtBQUQsRUFBUSxJQUFSLEVBQWMsSUFBZCxHQUFBO0FBQ0osWUFBQSxrR0FBQTtBQUFBLFFBQUEsR0FBQSxHQUFNLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBSyxDQUFBLENBQUEsQ0FBZixDQUFrQixDQUFDLE1BQW5CLENBQTBCLEtBQTFCLENBQ0osQ0FBQyxJQURHLENBQ0U7QUFBQSxVQUFBLE1BQUEsRUFBUSxLQUFSO1NBREYsQ0FBTixDQUFBO0FBQUEsUUFFQSxJQUFBLEdBQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFQLENBQUEsQ0FDTCxDQUFDLFVBREksQ0FDTyxTQUFDLENBQUQsR0FBQTtpQkFBTyxDQUFDLENBQUMsQ0FBQyxDQUFILEVBQU0sQ0FBQyxDQUFDLENBQVIsRUFBUDtRQUFBLENBRFAsQ0FGUCxDQUFBO0FBQUEsUUFLQSxLQUFBLEdBQVEsT0FBQSxHQUFVLEtBQUEsR0FBUSxJQUwxQixDQUFBO0FBQUEsUUFPQSxVQUFBLEdBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFaLENBQUEsQ0FDWCxDQUFDLE1BRFUsQ0FDSCxNQURHLENBRVgsQ0FBQyxFQUZVLENBRVAsV0FGTyxFQUVNLFNBQUMsQ0FBRCxHQUFBO0FBQ2YsVUFBQSxJQUFDLENBQUEsVUFBVSxD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LENBQUMsR0FBRyxDQUFDLEtBQU4sR0FBYyxDQUZyQixDQUFBO0FBQUEsTUFHQSxDQUFDLENBQUMsRUFBRixHQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTixHQUFlLENBSHRCLENBREY7QUFBQSxLQXRCQTtBQTRCQTtBQUFBLFNBQUEsOENBQUE7b0JBQUE7QUFDRSxNQUFBLENBQUMsQ0FBQyxNQUFGLEdBQVcsT0FBQSxDQUFRLENBQUMsQ0FBQyxJQUFWLEVBQWdCLEtBQUssQ0FBQyxPQUF0QixDQUFYLENBQUE7QUFBQSxNQUNBLENBQUMsQ0FBQyxNQUFGLEdBQVcsT0FBQSxDQUFRLENBQUMsQ0FBQyxFQUFWLEVBQWMsS0FBSyxDQUFDLE9BQXBCLENBRFgsQ0FERjtBQUFBLEtBNUJBO0FBZ0NBLFdBQU8sR0FBRyxDQUFDLEtBQUosQ0FBVSxDQUFWLENBQUEsR0FBZSxDQUF0QixDQWxDWTtFQUFBLENBM0pkLENBQUE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIm5nID0gYW5ndWxhci5tb2R1bGUgJ215QXBwJ1xuXG5uZy5kaXJlY3RpdmUgJ2NpcmN1aXRFZGl0b3InLCAtPlxuICByZXN0cmljdDogJ0UnXG4gIFxuICBzY29wZTpcbiAgICBkZWZzOiAnPSdcbiAgICBkYXRhOiAnPSdcbiAgICBcbiAgbGluazogKHNjb3BlLCBlbGVtLCBhdHRyKSAtPiAgICBcbiAgICBzdmcgPSBkMy5zZWxlY3QoZWxlbVswXSkuYXBwZW5kICdzdmcnXG4gICAgICAuYXR0ciBoZWlnaHQ6IFwiNjAlXCJcbiAgICBkaWFnID0gZDMuc3ZnLmRpYWdvbmFsKClcbiAgICAgIC5wcm9qZWN0aW9uIChkKSAtPiBbZC55LCBkLnhdICMgdW5kbyB0aGUgeC95IHJldmVyc2FsIGZyb20gZmluZFBpblxuICAgIFxuICAgIGxhc3RnID0gZ2FkZ2V0cyA9IHdpcmVzID0gbnVsbFxuICAgIFxuICAgIGdhZGdldERyYWcgPSBkMy5iZWhhdmlvci5kcmFnKClcbiAgICAgIC5vcmlnaW4gT2JqZWN0XG4gICAgICAub24gJ2RyYWdzdGFydCcsIChkKSAtPlxuICAgICAgICBAcGFyZW50Tm9kZS5hcHBlbmRDaGlsZCBAICMgbW92ZSB0byBmcm9udFxuICAgICAgICBkMy5ldmVudC5zb3VyY2VFdmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgLm9uICdkcmFnJywgKGQpIC0+XG4gICAgICAgIGQueCA9IGQzLmV2ZW50LnggfCAwICMgc3RheSBvbiBpbnQgY29vcmRpbmF0ZXNcbiAgICAgICAgZC55ID0gZDMuZXZlbnQueSB8IDAgIyBzdGF5IG9uIGludCBjb29yZGluYXRlc1xuICAgICAgICBkMy5zZWxlY3QoQCkuYXR0ciB0cmFuc2Zvcm06IChkKSAtPiBcInRyYW5zbGF0ZSgje2QueH0sI3tkLnl9KVwiXG4gICAgICAgICMgcmVjYWxjdWxhdGUgZW5kcG9pbnRzIGFuZCByZWRyYXcgYWxsIHdpcmVzIGF0dGFjaGVkIHRvIHRoaXMgZ2FkZ2V0XG4gICAgICAgIHdpcmVzLmZpbHRlciAodykgLT4gdy5zb3VyY2UuZyBpcyBkIG9yIHcudGFyZ2V0LmcgaXMgZFxuICAgICAgICAgIC5lYWNoIChkKSAtPlxuICAgICAgICAgICAgZC5zb3VyY2UgPSBmaW5kUGluIGQuZnJvbSwgc2NvcGUuZGF0YS5nYWRnZXRzXG4gICAgICAgICAgICBkLnRhcmdldCA9IGZpbmRQaW4gZC50bywgc2NvcGUuZGF0YS5nYWRnZXRzXG4gICAgICAgICAgLmF0dHIgZDogZGlhZ1xuICAgICAgLm9uICdkcmFnZW5kJywgKGQpIC0+XG4gICAgICAgIGNvbnNvbGUubG9nICdzYXZlIGdhZGdldCcsIGQgIyBUT0RPOiBzYXZlIHRvIHNlcnZlclxuXG4gICAgZHJhZ0luZm8gPSB7fVxuICAgIGRyYWdXaXJlID0gc3ZnLmFwcGVuZCgncGF0aCcpLmRhdHVtKGRyYWdJbmZvKS5hdHRyIGlkOiAnZHJhZydcbiAgICB3aXJlVW5kZXJDdXJzb3IgPSBudWxsXG5cbiAgICBwaW5EcmFnID0gZDMuYmVoYXZpb3IuZHJhZygpXG4gICAgICAub3JpZ2luIE9iamVjdFxuICAgICAgLm9uICdkcmFnc3RhcnQnLCAoZCkgLT5cbiAgICAgICAgZDMuZXZlbnQuc291cmNlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgQHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQgQCAjIG1vdmUgdG8gZnJvbnRcbiAgICAgICAgZHJhZ0luZm8uZnJvbSA9IGQucGluXG4gICAgICAgIGRlbGV0ZSBkcmFnSW5mby50b1xuICAgICAgICBkcmFnSW5mby5zb3VyY2UgPSBmaW5kUGluIGQucGluLCBzY29wZS5kYXRhLmdhZGdldHNcbiAgICAgIC5vbiAnZHJhZycsIChkKSAtPlxuICAgICAgICBbbXgsbXldID0gZDMubW91c2UoQClcbiAgICAgICAgb3JpZyA9IGRyYWdJbmZvLnNvdXJjZVxuICAgICAgICBkcmFnSW5mby50YXJnZXQgPSB4OiBvcmlnLngrbXktZC55LCB5OiBvcmlnLnkrbXgtZC54ICMgZmxpcHBlZFxuICAgICAgICBkcmFnV2lyZS5hdHRyIGNsYXNzOiAnZHJhd2luZycsIGZpbGw6ICdub25lJywgZDogZGlhZ1xuICAgICAgLm9uICdkcmFnZW5kJywgKGQpIC0+XG4gICAgICAgIGRyYWdXaXJlLmNsYXNzZWQgJ2RyYXdpbmcnLCBmYWxzZVxuICAgICAgICBpZiBkcmFnSW5mby50b1xuICAgICAgICAgIG53ID0gZnJvbTogZHJhZ0luZm8uZnJvbSwgdG86IGRyYWdJbmZvLnRvXG4gICAgICAgICAgdW5sZXNzIG53LmZyb20gaXMgbncudG9cbiAgICAgICAgICAgIGNvbnNvbGUubG9nICdhZGQgd2lyZScsIG53ICMgVE9ETzogc2F2ZSB0byBzZXJ2ZXJcbiAgICAgICAgICAgIHNjb3BlLmRhdGEud2lyZXMucHVzaCBud1xuICAgICAgICAgIHJlZHJhdygpXG5cbiAgICByZWRyYXcgPSAtPlxuICAgICAgbGFzdGcgPSBwcmVwYXJlRGF0YSBzY29wZS5kZWZzLCBzY29wZS5kYXRhXG4gICAgICBnYWRnZXRzID0gc3ZnLnNlbGVjdEFsbCgnLmdhZGdldCcpLmRhdGEgc2NvcGUuZGF0YS5nYWRnZXRzLCAoZCkgLT4gZC5pZFxuICAgICAgd2lyZXMgPSBzdmcuc2VsZWN0QWxsKCcud2lyZScpLmRhdGEgc2NvcGUuZGF0YS53aXJlcywgKGQpIC0+XG4gICAgICAgICAgICAgICAgXCIje2QuZnJvbX0vI3tkLnRvfVwiICMgZXNzZW50aWFsIGZvciBhZGRpbmcgb3IgcmVtb3Zpbmcgd2lyZXNcblxuICAgICAgZyA9IGdhZGdldHMuZW50ZXIoKS5hcHBlbmQoJ2cnKS5jYWxsKGdhZGdldERyYWcpXG4gICAgICAgIC5hdHRyIGNsYXNzOiAnZ2FkZ2V0J1xuICAgICAgZy5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAuZWFjaCAoZCkgLT5cbiAgICAgICAgICBkLmRlZiA9IHNjb3BlLmRlZnNbZC50eXBlXVxuICAgICAgICAgIGQuaHcgPSBkLmRlZi53aWR0aCAvIDJcbiAgICAgICAgICBkLmhoID0gZC5kZWYuaGVpZ2h0IC8gMlxuICAgICAgICAgIGQzLnNlbGVjdChAKS5hdHRyXG4gICAgICAgICAgICBjbGFzczogJ291dGxpbmUnXG4gICAgICAgICAgICAjIDFweCBsaW5lcyByZW5kZXIgc2hhcnBseSB3aGVuIG9uIGEgMC41cHggb2Zmc2V0XG4gICAgICAgICAgICB4OiAwLjUgLSBkLmh3LCB5OiAwLjUgLSBkLmhoXG4gICAgICAgICAgICB3aWR0aDogMiAqIGQuaHcsIGhlaWdodDogMiAqIGQuaGhcbiAgICAgICAgLnN0eWxlIGZpbGw6IChkKSAtPiBkLmRlZi5zaGFkZVxuICAgICAgZy5hcHBlbmQoJ3RleHQnKS50ZXh0IChkKSAtPiBkLnRpdGxlXG4gICAgICAgIC5hdHRyIGNsYXNzOiAndGl0bGUnLCB5OiAoZCkgLT4gMTIgLSBkLmhoXG4gICAgICBnLmFwcGVuZCgndGV4dCcpLnRleHQgKGQpIC0+IGQuZGVmLm5hbWVcbiAgICAgICAgLmF0dHIgY2xhc3M6ICd0eXBlJywgeTogKGQpIC0+IC00ICsgZC5oaFxuICAgICAgZy5hcHBlbmQoJ3RleHQnKS50ZXh0IChkKSAtPiBkLmRlZi5pY29uXG4gICAgICAgIC5hdHRyIGNsYXNzOiAnaWNvbmZvbnQnLCB4OiAwLCB5OiAwXG4gICAgICBnLmFwcGVuZCgndGV4dCcpLnRleHQgKGQpIC0+ICdcXHVmMDE0JyAjIGZhLXRyYXNoLW9cbiAgICAgICAgLmF0dHIgY2xhc3M6ICdpY29uZm9udCcsIHg6ICgoZCkgLT4gZC5ody04KSwgeTogKChkKSAtPiA4LWQuaGgpXG4gICAgICAgIC5zdHlsZSAnZm9udC1zaXplJzogJzEycHgnXG4gICAgICAgIC5vbiAnbW91c2Vkb3duJywgKGQpIC0+XG4gICAgICAgICAgZDMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAjIGRlbGV0ZSBhbGwgYXR0YWNoZWQgd2lyZXNcbiAgICAgICAgICBzZHcgPSBzY29wZS5kYXRhLndpcmVzXG4gICAgICAgICAgbiA9IHNkdy5sZW5ndGhcbiAgICAgICAgICB3aGlsZSBuXG4gICAgICAgICAgICB3ID0gc2R3Wy0tbl1cbiAgICAgICAgICAgIGlmIHcuZnJvbS5zcGxpdCgnLicpWzBdIGlzIGQuaWQgb3Igdy50by5zcGxpdCgnLicpWzBdIGlzIGQuaWRcbiAgICAgICAgICAgICAgY29uc29sZS5sb2cgJ2RlbCBhdHRhY2hlZCcsIHcgIyBUT0RPOiBzYXZlIHRvIHNlcnZlclxuICAgICAgICAgICAgICBzZHcuc3BsaWNlIG4sIDFcbiAgICAgICAgICBjb25zb2xlLmxvZyAnZGVsIGdhZGdldCcsIGQgIyBUT0RPOiBzYXZlIHRvIHNlcnZlclxuICAgICAgICAgIGZvciBpLCBnIG9mIHNjb3BlLmRhdGEuZ2FkZ2V0cyB3aGVuIGcgaXMgZFxuICAgICAgICAgICAgc2NvcGUuZGF0YS5nYWRnZXRzLnNwbGljZSBpLCAxXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIHJlZHJhdygpXG4gICAgICBnYWRnZXRzLmV4aXQoKS5yZW1vdmUoKVxuICAgICAgICBcbiAgICAgIHBpbnMgPSBnYWRnZXRzLnNlbGVjdEFsbCgnLnBpbicpLmRhdGEgKGQpIC0+XG4gICAgICAgIGQuY29ubiA9IGZvciBwIGluIGQuZGVmLnBpbnNcbiAgICAgICAgICB4OiBwLngsIHk6IHAueSwgbmFtZTogcC5uYW1lLCBkaXI6IHAuZGlyLCBwaW46IFwiI3tkLmlkfS4je3AubmFtZX1cIlxuICAgICAgcCA9IHBpbnMuZW50ZXIoKVxuICAgICAgcC5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAgIC5hdHRyIGNsYXNzOiAncGluJywgY3g6ICgoZCkgLT4gZC54Ky41KSwgY3k6ICgoZCkgLT4gZC55Ky41KSwgcjogM1xuICAgICAgcC5hcHBlbmQoJ2NpcmNsZScpLmNhbGwocGluRHJhZylcbiAgICAgICAgLmF0dHIgY2xhc3M6ICdoaXQnLCBjeDogKChkKSAtPiBkLngrLjUpLCBjeTogKChkKSAtPiBkLnkrLjUpLCByOiA3XG4gICAgICAgIC5vbiAnbW91c2V1cCcsIChkKSAtPiBkcmFnSW5mby50byA9IGQucGluXG4gICAgICBwLmFwcGVuZCgndGV4dCcpLnRleHQgKGQpIC0+IGQubmFtZVxuICAgICAgICAuYXR0clxuICAgICAgICAgIGNsYXNzOiAoZCkgLT4gZC5kaXJcbiAgICAgICAgICB4OiAoZCkgLT4gaWYgZC5kaXIgaXMgJ2luJyB0aGVuIGQueCArIDEwIGVsc2UgZC54IC0gMTBcbiAgICAgICAgICB5OiAoZCkgLT4gZC55ICsgNVxuICAgICAgcGlucy5leGl0KCkucmVtb3ZlKClcblxuICAgICAgd2lyZXMuZW50ZXIoKS5pbnNlcnQoJ3BhdGgnLCAnZycpICMgdXNlcyBpbnNlcnQgdG8gbW92ZSB0byBiYWNrIHJpZ2h0IGF3YXlcbiAgICAgICAgLmF0dHIgY2xhc3M6ICd3aXJlJywgZmlsbDogJ25vbmUnLCBkOiBkaWFnXG4gICAgICAgICMgY2FuJ3QgdXNlIG1vdXNlY2xpY2ssIHNlZVxuICAgICAgICAjIGh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vZC9tc2cvZDMtanMvZ0h6T2o5MVgyTkEvNjVCRWYyRHVSVjRKXG4gICAgICAgIC5vbiAnbW91c2VlbnRlcicsIChkKSAtPiB3aXJlVW5kZXJDdXJzb3IgPSBkXG4gICAgICAgIC5vbiAnbW91c2VsZWF2ZScsIChkKSAtPiB3aXJlVW5kZXJDdXJzb3IgPSBudWxsXG4gICAgICB3aXJlcy5leGl0KCkucmVtb3ZlKClcblxuICAgICAgZ2FkZ2V0cy5hdHRyIHRyYW5zZm9ybTogKGQpIC0+IFwidHJhbnNsYXRlKCN7ZC54fSwje2QueX0pXCJcbiAgICBcbiAgICByZWRyYXcoKVxuICAgIFxuICAgIHN2Zy5vbiAnbW91c2Vkb3duJywgLT5cbiAgICAgICMgcmV0dXJuICBpZiBkMy5ldmVudC5kZWZhdWx0UHJldmVudGVkXG4gICAgICBpZiB3aXJlVW5kZXJDdXJzb3JcbiAgICAgICAgY29uc29sZS5sb2cgJ2RlbCB3aXJlJywgd2lyZVVuZGVyQ3Vyc29yICMgVE9ETzogc2F2ZSB0byBzZXJ2ZXJcbiAgICAgICAgZm9yIGksIHcgb2Ygc2NvcGUuZGF0YS53aXJlcyB3aGVuIHcgaXMgd2lyZVVuZGVyQ3Vyc29yXG4gICAgICAgICAgc2NvcGUuZGF0YS53aXJlcy5zcGxpY2UgaSwgMVxuICAgICAgICAgIGJyZWFrXG4gICAgICBlbHNlXG4gICAgICAgIFt4LHldID0gZDMubW91c2UgQFxuICAgICAgICBuZyA9IGlkOiBcImcjeysrbGFzdGd9XCIsIHg6IHh8MCwgeTogeXwwLCB0aXRsZTogJ0dhZGdldCBUd28nLCB0eXBlOiAnUGlwZSdcbiAgICAgICAgY29uc29sZS5sb2cgXCJhZGQgZ2FkZ2V0XCIsIG5nICMgVE9ETzogc2F2ZSB0byBzZXJ2ZXJcbiAgICAgICAgc2NvcGUuZGF0YS5nYWRnZXRzLnB1c2ggbmdcbiAgICAgIHJlZHJhdygpXG5cbmZpbmRQaW4gPSAobmFtZSwgZ2RhdGEpIC0+XG4gIFtnaWQscG5hbWVdID0gbmFtZS5zcGxpdCAnLidcbiAgZm9yIGcgaW4gZ2RhdGEgd2hlbiBnaWQgaXMgZy5pZFxuICAgIGZvciBwIGluIGcuZGVmLnBpbnMgd2hlbiBwbmFtZSBpcyBwLm5hbWVcbiAgICAgICMgcmV2ZXJzZXMgeCBhbmQgeSBhbmQgdXNlcyBwcm9qZWN0aW9uIHRvIGdldCBob3Jpem9udGFsIHNwbGluZXNcbiAgICAgIHJldHVybiB5OiBnLnggKyBwLnggKyAuNSwgeDogZy55ICsgcC55ICsgLjUsIGc6IGcsIHA6IHBcblxucHJlcGFyZURhdGEgPSAoZ2RlZnMsIGdkYXRhKSAtPlxuICAjIHByZS1jYWxjdWxhdGUgc2l6ZXMgYW5kIHJlbGF0aXZlIHBpbiBjb29yZGluYXRlc1xuICBmb3IgbiwgZCBvZiBnZGVmc1xuICAgIGQubmFtZSBvcj0gblxuICAgIGlucyA9IDBcbiAgICBmb3IgcCBpbiBkLnBpbnNcbiAgICAgIHAueCA9IGQud2lkdGggLyAyXG4gICAgICBpZiBwLmRpciBpcyAnaW4nXG4gICAgICAgIHAueCA9IC1wLnhcbiAgICAgICAgKytpbnNcbiAgICBvdXRzID0gZC5waW5zLmxlbmd0aCAtIGluc1xuICAgIHN0ZXAgPSAyMFxuICAgIHlJbiA9IC0gKGlucyAtIDEpICogc3RlcCAvIDJcbiAgICB5T3V0ID0gLSAob3V0cyAtIDEpICogc3RlcCAvIDJcbiAgICBmb3IgcCBpbiBkLnBpbnNcbiAgICAgIGlmIHAuZGlyIGlzICdpbidcbiAgICAgICAgcC55ID0geUluXG4gICAgICAgIHlJbiArPSBzdGVwXG4gICAgICBlbHNlXG4gICAgICAgIHAueSA9IHlPdXRcbiAgICAgICAgeU91dCArPSBzdGVwXG4gICAgZC5oZWlnaHQgPSA0MCArIHN0ZXAgKiAoaWYgaW5zID4gb3V0cyB0aGVuIGlucyBlbHNlIG91dHMpXG5cbiAgc2VxID0gJycgIyBmaW5kIHRoZSBsYXJnZXN0IFwiZzxuPlwiIGlkIHRvIGhlbHAgZ2VuZXJhdGUgdGhlIG5leHQgb25lXG4gIGZvciBkIGluIGdkYXRhLmdhZGdldHNcbiAgICBzZXEgPSBkLmlkICBpZiAvXmdcXGQrJC8udGVzdChkLmlkKSBhbmQgZC5pZCA+IHNlcVxuICAgIGQuZGVmID0gZ2RlZnNbZC50eXBlXVxuICAgIGQuaHcgPSBkLmRlZi53aWR0aCAvIDJcbiAgICBkLmhoID0gZC5kZWYuaGVpZ2h0IC8gMlxuXG4gIGZvciBkIGluIGdkYXRhLndpcmVzXG4gICAgZC5zb3VyY2UgPSBmaW5kUGluIGQuZnJvbSwgZ2RhdGEuZ2FkZ2V0c1xuICAgIGQudGFyZ2V0ID0gZmluZFBpbiBkLnRvLCBnZGF0YS5nYWRnZXRzXG4gICAgXG4gIHJldHVybiBzZXEuc2xpY2UoMSkgfCAwICMgZHJvcCB0aGUgbGVhZGluZyBcImdcIiwgcmV0dXJuIGFzIGludFxuIl19
