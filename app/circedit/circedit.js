(function() {
  var findPin, ng, prepareData,
    __slice = [].slice;

  ng = angular.module('myApp');

  ng.directive('jbCircuitEditor', function() {
    return {
      restrict: 'E',
      scope: {
        defs: '=',
        data: '='
      },
      link: function(scope, elem, attr) {
        var diag, dragInfo, dragWire, emit, gadgetDrag, gadgets, pinDrag, redraw, svg, wireUnderCursor, wires;
        svg = d3.select(elem[0]).append('svg').attr({
          height: '60%'
        });
        diag = d3.svg.diagonal().projection(function(d) {
          return [d.y, d.x];
        });
        gadgets = wires = null;
        emit = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return scope.$apply(function() {
            var _ref;
            return scope.$emit.apply(scope, [(_ref = attr.event) != null ? _ref : 'circuit'].concat(__slice.call(args)));
          });
        };
        gadgetDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          d3.event.sourceEvent.stopPropagation();
          return this.parentNode.appendChild(this);
        }).on('drag', function(d) {
          d.x = d3.event.x | 0;
          d.y = d3.event.y | 0;
          d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
          return wires.filter(function(w) {
            return w.source.g === d || w.target.g === d;
          }).each(function(d) {
            d.source = findPin(d.from, scope.data.gadgets);
            return d.target = findPin(d.to, scope.data.gadgets);
          }).attr({
            d: diag
          });
        }).on('dragend', function(d) {
          return emit('moveGadget', d.id, d.x, d.y);
        });
        dragInfo = {};
        dragWire = svg.append('path').datum(dragInfo).attr({
          id: 'drag'
        });
        wireUnderCursor = null;
        pinDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          d3.event.sourceEvent.stopPropagation();
          dragInfo.from = d.pin;
          delete dragInfo.to;
          return dragInfo.source = findPin(d.pin, scope.data.gadgets);
        }).on('drag', function(d) {
          var mx, my, orig, _ref;
          _ref = d3.mouse(this), mx = _ref[0], my = _ref[1];
          orig = dragInfo.source;
          dragInfo.target = {
            x: orig.x + my - d.y,
            y: orig.y + mx - d.x
          };
          return dragWire.attr({
            "class": 'drawing',
            fill: 'none',
            d: diag
          });
        }).on('dragend', function(d) {
          var nw;
          dragWire.classed('drawing', false);
          if (dragInfo.to) {
            nw = {
              from: dragInfo.from,
              to: dragInfo.to
            };
            if (nw.from !== nw.to) {
              emit('addWire', nw.from, nw.to);
            }
            return redraw();
          }
        });
        redraw = function() {
          var g, p, pins;
          prepareData(scope.defs, scope.data);
          gadgets = svg.selectAll('.gadget').data(scope.data.gadgets, function(d) {
            return d.id;
          });
          wires = svg.selectAll('.wire').data(scope.data.wires, function(d) {
            return d.id;
          });
          g = gadgets.enter().append('g').call(gadgetDrag).attr({
            "class": 'gadget'
          });
          g.append('rect').each(function(d) {
            return d3.select(this).attr({
              "class": 'outline',
              x: 0.5 - d.hw,
              y: 0.5 - d.hh,
              width: 2 * d.hw,
              height: 2 * d.hh
            });
          }).on('mousedown', function(d) {
            return emit('selectGadget', d.id);
          }).style({
            fill: function(d) {
              return d.def.shade;
            }
          });
          g.append('text').text(function(d) {
            return d.title || d.def.name;
          }).attr({
            "class": 'title',
            y: function(d) {
              return 12 - d.hh;
            }
          });
          g.append('text').text(function(d) {
            return "" + d.type + " - " + d.id;
          }).attr({
            "class": 'type',
            y: function(d) {
              return -4 + d.hh;
            }
          });
          g.append('text').text(function(d) {
            return d.def.icon;
          }).attr({
            "class": 'iconfont',
            x: 0,
            y: 0
          });
          g.append('text').text(function(d) {
            return '\uf014';
          }).attr({
            "class": 'iconfont',
            x: (function(d) {
              return d.hw - 8;
            }),
            y: (function(d) {
              return 8 - d.hh;
            })
          }).style({
            'font-size': '12px'
          }).on('mousedown', function(d) {
            d3.event.stopPropagation();
            emit('delGadget', d.id);
            return redraw();
          });
          gadgets.exit().remove();
          pins = gadgets.selectAll('.pin').data(function(d) {
            return d.pins;
          });
          p = pins.enter();
          p.append('circle').attr({
            "class": 'pin',
            cx: (function(d) {
              return d.x + .5;
            }),
            cy: (function(d) {
              return d.y + .5;
            }),
            r: 3
          });
          p.append('circle').call(pinDrag).attr({
            "class": 'hit',
            cx: (function(d) {
              return d.x + .5;
            }),
            cy: (function(d) {
              return d.y + .5;
            }),
            r: 7
          }).on('mouseup', function(d) {
            return dragInfo.to = d.pin;
          });
          p.append('text').text(function(d) {
            return d.name;
          }).attr({
            "class": function(d) {
              return d.dir;
            },
            x: function(d) {
              if (d.dir === 'in') {
                return d.x + 10;
              } else {
                return d.x - 10;
              }
            },
            y: function(d) {
              return d.y + 5;
            }
          });
          pins.exit().remove();
          wires.enter().insert('path', 'g').attr({
            "class": 'wire',
            fill: 'none',
            d: diag
          }).on('mouseenter', function(d) {
            return wireUnderCursor = d;
          }).on('mouseleave', function(d) {
            return wireUnderCursor = null;
          });
          wires.exit().remove();
          return gadgets.attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
        };
        redraw();
        return svg.on('mousedown', function() {
          var x, y, _ref;
          if (wireUnderCursor) {
            emit('delWire', wireUnderCursor.from, wireUnderCursor.to);
            wireUnderCursor = null;
          } else {
            _ref = d3.mouse(this), x = _ref[0], y = _ref[1];
            emit('addGadget', x | 0, y | 0);
          }
          return redraw();
        });
      }
    };
  });

  findPin = function(pin, gdata) {
    var g, gid, p, pname, _i, _j, _len, _len1, _ref, _ref1;
    _ref = pin.split('.'), gid = _ref[0], pname = _ref[1];
    for (_i = 0, _len = gdata.length; _i < _len; _i++) {
      g = gdata[_i];
      if (gid === g.id) {
        _ref1 = g.pins;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          if (pname === p.name) {
            return {
              y: g.x + p.x + .5,
              x: g.y + p.y + .5,
              g: g
            };
          }
        }
      }
    }
  };

  prepareData = function(gdefs, gdata) {
    var d, ins, outs, placePins, width, ystep, _i, _j, _len, _len1, _ref, _ref1, _results;
    ystep = 20;
    width = 140;
    _ref = gdata.gadgets;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      d = _ref[_i];
      d.def = gdefs[d.type];
      d.pins = [];
      placePins = function(pnames, dir, x) {
        var name, nlist, y, _j, _len1;
        nlist = (pnames != null ? pnames : '').split(' ');
        y = -ystep * (nlist.length - 1) >> 1;
        for (_j = 0, _len1 = nlist.length; _j < _len1; _j++) {
          name = nlist[_j];
          d.pins.push({
            x: x,
            y: y,
            name: name,
            dir: dir,
            pin: "" + d.id + "." + name
          });
          y += ystep;
        }
        return nlist.length;
      };
      d.hw = width / 2;
      ins = placePins(d.def.inputs, 'in', -d.hw);
      outs = placePins(d.def.outputs, 'out', d.hw);
      d.height = 40 + ystep * (ins > outs ? ins : outs);
      d.hh = d.height / 2;
    }
    _ref1 = gdata.wires;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      d = _ref1[_j];
      d.id = "" + d.from + "/" + d.to;
      d.source = findPin(d.from, gdata.gadgets);
      _results.push(d.target = findPin(d.to, gdata.gadgets));
    }
    return _results;
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
