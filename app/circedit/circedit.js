(function() {
  var findPin, ng, prepareData;

  ng = angular.module('myApp');

  ng.directive('circuitEditor', function() {
    return {
      restrict: 'E',
      scope: {
        defs: '=',
        data: '=',
        type: '=',
        select: '='
      },
      link: function(scope, elem, attr) {
        var diag, dragInfo, dragWire, gadgetDrag, gadgets, k, lastg, pinDrag, redraw, svg, updateSelect, wireUnderCursor, wires;
        for (k in scope.defs) {
          scope.type = k;
          break;
        }
        svg = d3.select(elem[0]).append('svg').attr({
          height: '60%'
        });
        diag = d3.svg.diagonal().projection(function(d) {
          return [d.y, d.x];
        });
        lastg = gadgets = wires = null;
        updateSelect = function(d) {
          return scope.$apply(function() {
            return scope.select = d;
          });
        };
        gadgetDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          this.parentNode.appendChild(this);
          return d3.event.sourceEvent.stopPropagation();
        }).on('drag', function(d) {
          d.moved = true;
          d.x = d3.event.x | 0;
          d.y = d3.event.y | 0;
          d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
          return wires.filter(function(w) {
            return w.source.g === d || w.target.g === d;
          }).each(function(d) {
            d.source = findPin(d.from, scope.data.gadgets);
            return d.target = findPin(d.to, scope.data.gadgets);
          }).attr({
            d: diag
          });
        }).on('dragend', function(d) {
          if (d.moved) {
            delete d.moved;
            return console.log('save gadget', d);
          }
        });
        dragInfo = {};
        dragWire = svg.append('path').datum(dragInfo).attr({
          id: 'drag'
        });
        wireUnderCursor = null;
        pinDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          d3.event.sourceEvent.stopPropagation();
          this.parentNode.appendChild(this);
          dragInfo.from = d.pin;
          delete dragInfo.to;
          return dragInfo.source = findPin(d.pin, scope.data.gadgets);
        }).on('drag', function(d) {
          var mx, my, orig, _ref;
          _ref = d3.mouse(this), mx = _ref[0], my = _ref[1];
          orig = dragInfo.source;
          dragInfo.target = {
            x: orig.x + my - d.y,
            y: orig.y + mx - d.x
          };
          return dragWire.attr({
            "class": 'drawing',
            fill: 'none',
            d: diag
          });
        }).on('dragend', function(d) {
          var nw;
          dragWire.classed('drawing', false);
          if (dragInfo.to) {
            nw = {
              from: dragInfo.from,
              to: dragInfo.to
            };
            if (nw.from !== nw.to) {
              console.log('add wire', nw);
              scope.data.wires.push(nw);
            }
            return redraw();
          }
        });
        redraw = function(cb) {
          var g, p, pins;
          lastg = prepareData(scope.defs, scope.data);
          gadgets = svg.selectAll('.gadget').data(scope.data.gadgets, function(d) {
            return d.id;
          });
          wires = svg.selectAll('.wire').data(scope.data.wires, function(d) {
            return "" + d.from + "/" + d.to;
          });
          g = gadgets.enter().append('g').call(gadgetDrag).attr({
            "class": 'gadget'
          });
          g.append('rect').each(function(d) {
            d.def = scope.defs[d.type];
            d.hw = d.def.width / 2;
            d.hh = d.def.height / 2;
            return d3.select(this).attr({
              "class": 'outline',
              x: 0.5 - d.hw,
              y: 0.5 - d.hh,
              width: 2 * d.hw,
              height: 2 * d.hh
            });
          }).on('mousedown', updateSelect).style({
            fill: function(d) {
              return d.def.shade;
            }
          });
          g.append('text').text(function(d) {
            return d.title || ("" + d.type + " " + d.id);
          }).attr({
            "class": 'title',
            y: function(d) {
              return 12 - d.hh;
            }
          });
          g.append('text').text(function(d) {
            return d.def.name;
          }).attr({
            "class": 'type',
            y: function(d) {
              return -4 + d.hh;
            }
          });
          g.append('text').text(function(d) {
            return d.def.icon;
          }).attr({
            "class": 'iconfont',
            x: 0,
            y: 0
          });
          g.append('text').text(function(d) {
            return '\uf014';
          }).attr({
            "class": 'iconfont',
            x: (function(d) {
              return d.hw - 8;
            }),
            y: (function(d) {
              return 8 - d.hh;
            })
          }).style({
            'font-size': '12px'
          }).on('mousedown', function(d) {
            var i, n, sdw, w, _ref;
            d3.event.stopPropagation();
            sdw = scope.data.wires;
            n = sdw.length;
            while (n) {
              w = sdw[--n];
              if (w.from.split('.')[0] === d.id || w.to.split('.')[0] === d.id) {
                console.log('del attached', w);
                sdw.splice(n, 1);
              }
            }
            console.log('del gadget', d);
            _ref = scope.data.gadgets;
            for (i in _ref) {
              g = _ref[i];
              if (!(g === d)) {
                continue;
              }
              scope.data.gadgets.splice(i, 1);
              updateSelect(null);
              break;
            }
            return redraw();
          });
          gadgets.exit().remove();
          pins = gadgets.selectAll('.pin').data(function(d) {
            var p;
            return d.conn = (function() {
              var _i, _len, _ref, _results;
              _ref = d.def.pins;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                p = _ref[_i];
                _results.push({
                  x: p.x,
                  y: p.y,
                  name: p.name,
                  dir: p.dir,
                  pin: "" + d.id + "." + p.name
                });
              }
              return _results;
            })();
          });
          p = pins.enter();
          p.append('circle').attr({
            "class": 'pin',
            cx: (function(d) {
              return d.x + .5;
            }),
            cy: (function(d) {
              return d.y + .5;
            }),
            r: 3
          });
          p.append('circle').call(pinDrag).attr({
            "class": 'hit',
            cx: (function(d) {
              return d.x + .5;
            }),
            cy: (function(d) {
              return d.y + .5;
            }),
            r: 7
          }).on('mouseup', function(d) {
            return dragInfo.to = d.pin;
          });
          p.append('text').text(function(d) {
            return d.name;
          }).attr({
            "class": function(d) {
              return d.dir;
            },
            x: function(d) {
              if (d.dir === 'in') {
                return d.x + 10;
              } else {
                return d.x - 10;
              }
            },
            y: function(d) {
              return d.y + 5;
            }
          });
          pins.exit().remove();
          wires.enter().insert('path', 'g').attr({
            "class": 'wire',
            fill: 'none',
            d: diag
          }).on('mouseenter', function(d) {
            return wireUnderCursor = d;
          }).on('mouseleave', function(d) {
            return wireUnderCursor = null;
          });
          wires.exit().remove();
          gadgets.attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
          return typeof cb === "function" ? cb() : void 0;
        };
        redraw();
        return svg.on('mousedown', function() {
          var i, w, x, y, _ref, _ref1;
          if (wireUnderCursor) {
            console.log('del wire', wireUnderCursor);
            _ref = scope.data.wires;
            for (i in _ref) {
              w = _ref[i];
              if (!(w === wireUnderCursor)) {
                continue;
              }
              scope.data.wires.splice(i, 1);
              break;
            }
          } else {
            _ref1 = d3.mouse(this), x = _ref1[0], y = _ref1[1];
            ng = {
              id: "g" + (++lastg),
              x: x | 0,
              y: y | 0,
              type: scope.type
            };
            console.log('add gadget', ng);
            scope.data.gadgets.push(ng);
          }
          return redraw(function() {
            return updateSelect(ng);
          });
        });
      }
    };
  });

  findPin = function(name, gdata) {
    var g, gid, p, pname, _i, _j, _len, _len1, _ref, _ref1;
    _ref = name.split('.'), gid = _ref[0], pname = _ref[1];
    for (_i = 0, _len = gdata.length; _i < _len; _i++) {
      g = gdata[_i];
      if (gid === g.id) {
        _ref1 = g.def.pins;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          if (pname === p.name) {
            return {
              y: g.x + p.x + .5,
              x: g.y + p.y + .5,
              g: g,
              p: p
            };
          }
        }
      }
    }
  };

  prepareData = function(gdefs, gdata) {
    var d, ins, n, outs, p, seq, step, yIn, yOut, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
    for (n in gdefs) {
      d = gdefs[n];
      d.name || (d.name = n);
      ins = 0;
      _ref = d.pins;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.x = d.width / 2;
        if (p.dir === 'in') {
          p.x = -p.x;
          ++ins;
        }
      }
      outs = d.pins.length - ins;
      step = 20;
      yIn = -(ins - 1) * step / 2;
      yOut = -(outs - 1) * step / 2;
      _ref1 = d.pins;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        if (p.dir === 'in') {
          p.y = yIn;
          yIn += step;
        } else {
          p.y = yOut;
          yOut += step;
        }
      }
      d.height = 40 + step * (ins > outs ? ins : outs);
    }
    seq = 0;
    _ref2 = gdata.gadgets;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      d = _ref2[_k];
      if (/^g\d+$/.test(d.id)) {
        n = d.id.slice(1) | 0;
        if (n > seq) {
          seq = n;
        }
      }
      d.def = gdefs[d.type];
      d.hw = d.def.width / 2;
      d.hh = d.def.height / 2;
    }
    _ref3 = gdata.wires;
    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
      d = _ref3[_l];
      d.source = findPin(d.from, gdata.gadgets);
      d.target = findPin(d.to, gdata.gadgets);
    }
    return seq;
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
