(function() {
  var findPin, ng, prepareData;

  ng = angular.module('myApp');

  ng.directive('circuitEditor', function() {
    return {
      restrict: 'E',
      scope: {
        defs: '=',
        data: '=',
        type: '=',
        select: '='
      },
      link: function(scope, elem, attr) {
        var diag, dragInfo, dragWire, gadgetDrag, gadgets, k, lastg, pinDrag, redraw, svg, updateSelect, wireUnderCursor, wires;
        for (k in scope.defs) {
          scope.type = k;
          break;
        }
        svg = d3.select(elem[0]).append('svg').attr({
          height: '60%'
        });
        diag = d3.svg.diagonal().projection(function(d) {
          return [d.y, d.x];
        });
        lastg = gadgets = wires = null;
        updateSelect = function(d) {
          return scope.$apply(function() {
            return scope.select = d;
          });
        };
        gadgetDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          d3.event.sourceEvent.stopPropagation();
          return this.parentNode.appendChild(this);
        }).on('drag', function(d) {
          d.moved = true;
          d.x = d3.event.x | 0;
          d.y = d3.event.y | 0;
          d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
          return wires.filter(function(w) {
            return w.source.g === d || w.target.g === d;
          }).each(function(d) {
            d.source = findPin(d.from, scope.data.gadgets);
            return d.target = findPin(d.to, scope.data.gadgets);
          }).attr({
            d: diag
          });
        }).on('dragend', function(d) {
          if (d.moved) {
            delete d.moved;
            return console.log('move gadget', d.id, d.x, d.y);
          }
        });
        dragInfo = {};
        dragWire = svg.append('path').datum(dragInfo).attr({
          id: 'drag'
        });
        wireUnderCursor = null;
        pinDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          d3.event.sourceEvent.stopPropagation();
          dragInfo.from = d.pin;
          delete dragInfo.to;
          return dragInfo.source = findPin(d.pin, scope.data.gadgets);
        }).on('drag', function(d) {
          var mx, my, orig, _ref;
          _ref = d3.mouse(this), mx = _ref[0], my = _ref[1];
          orig = dragInfo.source;
          dragInfo.target = {
            x: orig.x + my - d.y,
            y: orig.y + mx - d.x
          };
          return dragWire.attr({
            "class": 'drawing',
            fill: 'none',
            d: diag
          });
        }).on('dragend', function(d) {
          var nw;
          dragWire.classed('drawing', false);
          if (dragInfo.to) {
            nw = {
              from: dragInfo.from,
              to: dragInfo.to
            };
            if (nw.from !== nw.to) {
              console.log('add wire', nw.from, nw.to);
              scope.data.wires.push(nw);
            }
            return redraw();
          }
        });
        redraw = function(cb) {
          var g, p, pins;
          lastg = prepareData(scope.defs, scope.data);
          gadgets = svg.selectAll('.gadget').data(scope.data.gadgets, function(d) {
            return d.id;
          });
          wires = svg.selectAll('.wire').data(scope.data.wires, function(d) {
            return "" + d.from + "/" + d.to;
          });
          g = gadgets.enter().append('g').call(gadgetDrag).attr({
            "class": 'gadget'
          });
          g.append('rect').each(function(d) {
            d.def = scope.defs[d.type];
            d.hw = d.def.width / 2;
            d.hh = d.def.height / 2;
            return d3.select(this).attr({
              "class": 'outline',
              x: 0.5 - d.hw,
              y: 0.5 - d.hh,
              width: 2 * d.hw,
              height: 2 * d.hh
            });
          }).on('mousedown', updateSelect).style({
            fill: function(d) {
              return d.def.shade;
            }
          });
          g.append('text').text(function(d) {
            return d.title || ("" + d.type + " " + d.id);
          }).attr({
            "class": 'title',
            y: function(d) {
              return 12 - d.hh;
            }
          });
          g.append('text').text(function(d) {
            return d.def.name;
          }).attr({
            "class": 'type',
            y: function(d) {
              return -4 + d.hh;
            }
          });
          g.append('text').text(function(d) {
            return d.def.icon;
          }).attr({
            "class": 'iconfont',
            x: 0,
            y: 0
          });
          g.append('text').text(function(d) {
            return '\uf014';
          }).attr({
            "class": 'iconfont',
            x: (function(d) {
              return d.hw - 8;
            }),
            y: (function(d) {
              return 8 - d.hh;
            })
          }).style({
            'font-size': '12px'
          }).on('mousedown', function(d) {
            var i, n, sdw, w, _ref;
            d3.event.stopPropagation();
            sdw = scope.data.wires;
            n = sdw.length;
            while (n) {
              w = sdw[--n];
              if (w.from.split('.')[0] === d.id || w.to.split('.')[0] === d.id) {
                console.log('del attached', w.from, w.to);
                sdw.splice(n, 1);
              }
            }
            console.log('del gadget', d.id);
            _ref = scope.data.gadgets;
            for (i in _ref) {
              g = _ref[i];
              if (!(g === d)) {
                continue;
              }
              scope.data.gadgets.splice(i, 1);
              updateSelect(null);
              break;
            }
            return redraw();
          });
          gadgets.exit().remove();
          pins = gadgets.selectAll('.pin').data(function(d) {
            var p;
            return d.conn = (function() {
              var _i, _len, _ref, _results;
              _ref = d.def.pins;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                p = _ref[_i];
                _results.push({
                  x: p.x,
                  y: p.y,
                  name: p.name,
                  dir: p.dir,
                  pin: "" + d.id + "." + p.name
                });
              }
              return _results;
            })();
          });
          p = pins.enter();
          p.append('circle').attr({
            "class": 'pin',
            cx: (function(d) {
              return d.x + .5;
            }),
            cy: (function(d) {
              return d.y + .5;
            }),
            r: 3
          });
          p.append('circle').call(pinDrag).attr({
            "class": 'hit',
            cx: (function(d) {
              return d.x + .5;
            }),
            cy: (function(d) {
              return d.y + .5;
            }),
            r: 7
          }).on('mouseup', function(d) {
            return dragInfo.to = d.pin;
          });
          p.append('text').text(function(d) {
            return d.name;
          }).attr({
            "class": function(d) {
              return d.dir;
            },
            x: function(d) {
              if (d.dir === 'in') {
                return d.x + 10;
              } else {
                return d.x - 10;
              }
            },
            y: function(d) {
              return d.y + 5;
            }
          });
          pins.exit().remove();
          wires.enter().insert('path', 'g').attr({
            "class": 'wire',
            fill: 'none',
            d: diag
          }).on('mouseenter', function(d) {
            return wireUnderCursor = d;
          }).on('mouseleave', function(d) {
            return wireUnderCursor = null;
          });
          wires.exit().remove();
          gadgets.attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
          return typeof cb === "function" ? cb() : void 0;
        };
        redraw();
        return svg.on('mousedown', function() {
          var g, i, w, wuc, x, y, _ref, _ref1;
          wuc = wireUnderCursor;
          if (wuc) {
            console.log('del wire', wuc.from, wuc.to);
            _ref = scope.data.wires;
            for (i in _ref) {
              w = _ref[i];
              if (!(w === wuc)) {
                continue;
              }
              scope.data.wires.splice(i, 1);
              break;
            }
            wireUnderCursor = null;
          } else {
            _ref1 = d3.mouse(this), x = _ref1[0], y = _ref1[1];
            g = {
              id: "g" + (++lastg),
              x: x | 0,
              y: y | 0,
              type: scope.type
            };
            console.log('add gadget', g.id, g.x, g.y, g.type);
            scope.data.gadgets.push(g);
          }
          return redraw(function() {
            return updateSelect(g);
          });
        });
      }
    };
  });

  findPin = function(name, gdata) {
    var g, gid, p, pname, _i, _j, _len, _len1, _ref, _ref1;
    _ref = name.split('.'), gid = _ref[0], pname = _ref[1];
    for (_i = 0, _len = gdata.length; _i < _len; _i++) {
      g = gdata[_i];
      if (gid === g.id) {
        _ref1 = g.def.pins;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          if (pname === p.name) {
            return {
              y: g.x + p.x + .5,
              x: g.y + p.y + .5,
              g: g,
              p: p
            };
          }
        }
      }
    }
  };

  prepareData = function(gdefs, gdata) {
    var d, ins, n, outs, p, seq, step, yIn, yOut, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
    for (n in gdefs) {
      d = gdefs[n];
      d.name || (d.name = n);
      ins = 0;
      _ref = d.pins;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.x = d.width / 2;
        if (p.dir === 'in') {
          p.x = -p.x;
          ++ins;
        }
      }
      outs = d.pins.length - ins;
      step = 20;
      yIn = -(ins - 1) * step / 2;
      yOut = -(outs - 1) * step / 2;
      _ref1 = d.pins;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        if (p.dir === 'in') {
          p.y = yIn;
          yIn += step;
        } else {
          p.y = yOut;
          yOut += step;
        }
      }
      d.height = 40 + step * (ins > outs ? ins : outs);
    }
    seq = 0;
    _ref2 = gdata.gadgets;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      d = _ref2[_k];
      if (/^g\d+$/.test(d.id)) {
        n = d.id.slice(1) | 0;
        if (n > seq) {
          seq = n;
        }
      }
      d.def = gdefs[d.type];
      d.hw = d.def.width / 2;
      d.hh = d.def.height / 2;
    }
    _ref3 = gdata.wires;
    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
      d = _ref3[_l];
      d.source = findPin(d.from, gdata.gadgets);
      d.target = findPin(d.to, gdata.gadgets);
    }
    return seq;
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2lyY2VkaXQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSx3QkFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLFNBQUgsQ0FBYSxlQUFiLEVBQThCLFNBQUEsR0FBQTtXQUM1QjtBQUFBLE1BQUEsUUFBQSxFQUFVLEdBQVY7QUFBQSxNQUVBLEtBQUEsRUFDRTtBQUFBLFFBQUEsSUFBQSxFQUFNLEdBQU47QUFBQSxRQUNBLElBQUEsRUFBTSxHQUROO0FBQUEsUUFFQSxJQUFBLEVBQU0sR0FGTjtBQUFBLFFBR0EsTUFBQSxFQUFRLEdBSFI7T0FIRjtBQUFBLE1BUUEsSUFBQSxFQUFNLFNBQUMsS0FBRCxFQUFRLElBQVIsRUFBYyxJQUFkLEdBQUE7QUFDSixZQUFBLG1IQUFBO0FBQUEsYUFBQSxlQUFBLEdBQUE7QUFDRSxVQUFBLEtBQUssQ0FBQyxJQUFOLEdBQWEsQ0FBYixDQUFBO0FBQ0EsZ0JBRkY7QUFBQSxTQUFBO0FBQUEsUUFJQSxHQUFBLEdBQU0sRUFBRSxDQUFDLE1BQUgsQ0FBVSxJQUFLLENBQUEsQ0FBQSxDQUFmLENBQWtCLENBQUMsTUFBbkIsQ0FBMEIsS0FBMUIsQ0FDSixDQUFDLElBREcsQ0FDRTtBQUFBLFVBQUEsTUFBQSxFQUFRLEtBQVI7U0FERixDQUpOLENBQUE7QUFBQSxRQU1BLElBQUEsR0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVAsQ0FBQSxDQUNMLENBQUMsVUFESSxDQUNPLFNBQUMsQ0FBRCxHQUFBO2lCQUFPLENBQUMsQ0FBQyxDQUFDLENBQUgsRUFBTSxDQUFDLENBQUMsQ0FBUixFQUFQO1FBQUEsQ0FEUCxDQU5QLENBQUE7QUFBQSxRQVNBLEtBQUEsR0FBUSxPQUFBLEdBQVUsS0FBQSxHQUFRLElBVDFCLENBQUE7QUFBQSxRQVdBLFlBQUEs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QyxHQUFHLENBQUMsS0FBTixHQUFjLENBSnJCLENBQUE7QUFBQSxNQUtBLENBQUMsQ0FBQyxFQUFGLEdBQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFOLEdBQWUsQ0FMdEIsQ0FERjtBQUFBLEtBdEJBO0FBOEJBO0FBQUEsU0FBQSw4Q0FBQTtvQkFBQTtBQUNFLE1BQUEsQ0FBQyxDQUFDLE1BQUYsR0FBVyxPQUFBLENBQVEsQ0FBQyxDQUFDLElBQVYsRUFBZ0IsS0FBSyxDQUFDLE9BQXRCLENBQVgsQ0FBQTtBQUFBLE1BQ0EsQ0FBQyxDQUFDLE1BQUYsR0FBVyxPQUFBLENBQVEsQ0FBQyxDQUFDLEVBQVYsRUFBYyxLQUFLLENBQUMsT0FBcEIsQ0FEWCxDQURGO0FBQUEsS0E5QkE7QUFrQ0EsV0FBTyxHQUFQLENBcENZO0VBQUEsQ0EzS2QsQ0FBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsibmcgPSBhbmd1bGFyLm1vZHVsZSAnbXlBcHAnXG5cbm5nLmRpcmVjdGl2ZSAnY2lyY3VpdEVkaXRvcicsIC0+XG4gIHJlc3RyaWN0OiAnRSdcbiAgXG4gIHNjb3BlOlxuICAgIGRlZnM6ICc9J1xuICAgIGRhdGE6ICc9J1xuICAgIHR5cGU6ICc9J1xuICAgIHNlbGVjdDogJz0nXG4gICAgXG4gIGxpbms6IChzY29wZSwgZWxlbSwgYXR0cikgLT5cbiAgICBmb3IgayBvZiBzY29wZS5kZWZzXG4gICAgICBzY29wZS50eXBlID0gayAjIHNldCBpbml0aWFsIHR5cGUgdG8gYSB2YWxpZCBrZXkgZnJvbSB0aGUgZGVmaW5pdGlvbnNcbiAgICAgIGJyZWFrXG4gICAgXG4gICAgc3ZnID0gZDMuc2VsZWN0KGVsZW1bMF0pLmFwcGVuZCAnc3ZnJ1xuICAgICAgLmF0dHIgaGVpZ2h0OiAnNjAlJ1xuICAgIGRpYWcgPSBkMy5zdmcuZGlhZ29uYWwoKVxuICAgICAgLnByb2plY3Rpb24gKGQpIC0+IFtkLnksIGQueF0gIyB1bmRvIHRoZSB4L3kgcmV2ZXJzYWwgZnJvbSBmaW5kUGluXG4gICAgXG4gICAgbGFzdGcgPSBnYWRnZXRzID0gd2lyZXMgPSBudWxsXG4gICAgXG4gICAgdXBkYXRlU2VsZWN0ID0gKGQpIC0+XG4gICAgICBzY29wZS4kYXBwbHkgLT4gc2NvcGUuc2VsZWN0ID0gZFxuICAgIFxuICAgIGdhZGdldERyYWcgPSBkMy5iZWhhdmlvci5kcmFnKClcbiAgICAgIC5vcmlnaW4gT2JqZWN0XG4gICAgICAub24gJ2RyYWdzdGFydCcsIChkKSAtPlxuICAgICAgICBkMy5ldmVudC5zb3VyY2VFdmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICBAcGFyZW50Tm9kZS5hcHBlbmRDaGlsZCBAICMgbW92ZSB0byBmcm9udFxuICAgICAgLm9uICdkcmFnJywgKGQpIC0+XG4gICAgICAgIGQubW92ZWQgPSB0cnVlXG4gICAgICAgIGQueCA9IGQzLmV2ZW50LnggfCAwICMgc3RheSBvbiBpbnQgY29vcmRpbmF0ZXNcbiAgICAgICAgZC55ID0gZDMuZXZlbnQueSB8IDAgIyBzdGF5IG9uIGludCBjb29yZGluYXRlc1xuICAgICAgICBkMy5zZWxlY3QoQCkuYXR0ciB0cmFuc2Zvcm06IChkKSAtPiBcInRyYW5zbGF0ZSgje2QueH0sI3tkLnl9KVwiXG4gICAgICAgICMgcmVjYWxjdWxhdGUgZW5kcG9pbnRzIGFuZCByZWRyYXcgYWxsIHdpcmVzIGF0dGFjaGVkIHRvIHRoaXMgZ2FkZ2V0XG4gICAgICAgIHdpcmVzLmZpbHRlciAodykgLT4gdy5zb3VyY2UuZyBpcyBkIG9yIHcudGFyZ2V0LmcgaXMgZFxuICAgICAgICAgIC5lYWNoIChkKSAtPlxuICAgICAgICAgICAgZC5zb3VyY2UgPSBmaW5kUGluIGQuZnJvbSwgc2NvcGUuZGF0YS5nYWRnZXRzXG4gICAgICAgICAgICBkLnRhcmdldCA9IGZpbmRQaW4gZC50bywgc2NvcGUuZGF0YS5nYWRnZXRzXG4gICAgICAgICAgLmF0dHIgZDogZGlhZ1xuICAgICAgLm9uICdkcmFnZW5kJywgKGQpIC0+XG4gICAgICAgIGlmIGQubW92ZWRcbiAgICAgICAgICBkZWxldGUgZC5tb3ZlZFxuICAgICAgICAgIGNvbnNvbGUubG9nICdtb3ZlIGdhZGdldCcsIGQuaWQsIGQueCwgZC55ICMgVE9ETzogc2F2ZSB0byBzZXJ2ZXJcblxuICAgIGRyYWdJbmZvID0ge31cbiAgICBkcmFnV2lyZSA9IHN2Zy5hcHBlbmQoJ3BhdGgnKS5kYXR1bShkcmFnSW5mbykuYXR0ciBpZDogJ2RyYWcnXG4gICAgd2lyZVVuZGVyQ3Vyc29yID0gbnVsbFxuXG4gICAgcGluRHJhZyA9IGQzLmJlaGF2aW9yLmRyYWcoKVxuICAgICAgLm9yaWdpbiBPYmplY3RcbiAgICAgIC5vbiAnZHJhZ3N0YXJ0JywgKGQpIC0+XG4gICAgICAgIGQzLmV2ZW50LnNvdXJjZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgIGRyYWdJbmZvLmZyb20gPSBkLnBpblxuICAgICAgICBkZWxldGUgZHJhZ0luZm8udG9cbiAgICAgICAgZHJhZ0luZm8uc291cmNlID0gZmluZFBpbiBkLnBpbiwgc2NvcGUuZGF0YS5nYWRnZXRzXG4gICAgICAub24gJ2RyYWcnLCAoZCkgLT5cbiAgICAgICAgW214LG15XSA9IGQzLm1vdXNlKEApXG4gICAgICAgIG9yaWcgPSBkcmFnSW5mby5zb3VyY2VcbiAgICAgICAgZHJhZ0luZm8udGFyZ2V0ID0geDogb3JpZy54K215LWQueSwgeTogb3JpZy55K214LWQueCAjIGZsaXBwZWRcbiAgICAgICAgZHJhZ1dpcmUuYXR0ciBjbGFzczogJ2RyYXdpbmcnLCBmaWxsOiAnbm9uZScsIGQ6IGRpYWdcbiAgICAgIC5vbiAnZHJhZ2VuZCcsIChkKSAtPlxuICAgICAgICBkcmFnV2lyZS5jbGFzc2VkICdkcmF3aW5nJywgZmFsc2VcbiAgICAgICAgaWYgZHJhZ0luZm8udG9cbiAgICAgICAgICBudyA9IGZyb206IGRyYWdJbmZvLmZyb20sIHRvOiBkcmFnSW5mby50b1xuICAgICAgICAgIHVubGVzcyBudy5mcm9tIGlzIG53LnRvXG4gICAgICAgICAgICBjb25zb2xlLmxvZyAnYWRkIHdpcmUnLCBudy5mcm9tLCBudy50byAjIFRPRE86IHNhdmUgdG8gc2VydmVyXG4gICAgICAgICAgICBzY29wZS5kYXRhLndpcmVzLnB1c2ggbndcbiAgICAgICAgICByZWRyYXcoKVxuXG4gICAgcmVkcmF3ID0gKGNiKSAtPlxuICAgICAgbGFzdGcgPSBwcmVwYXJlRGF0YSBzY29wZS5kZWZzLCBzY29wZS5kYXRhXG4gICAgICBnYWRnZXRzID0gc3ZnLnNlbGVjdEFsbCgnLmdhZGdldCcpLmRhdGEgc2NvcGUuZGF0YS5nYWRnZXRzLCAoZCkgLT4gZC5pZFxuICAgICAgd2lyZXMgPSBzdmcuc2VsZWN0QWxsKCcud2lyZScpLmRhdGEgc2NvcGUuZGF0YS53aXJlcywgKGQpIC0+XG4gICAgICAgICAgICAgICAgXCIje2QuZnJvbX0vI3tkLnRvfVwiICMgZXNzZW50aWFsIGZvciBhZGRpbmcgb3IgcmVtb3Zpbmcgd2lyZXNcblxuICAgICAgZyA9IGdhZGdldHMuZW50ZXIoKS5hcHBlbmQoJ2cnKS5jYWxsKGdhZGdldERyYWcpXG4gICAgICAgIC5hdHRyIGNsYXNzOiAnZ2FkZ2V0J1xuICAgICAgZy5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAuZWFjaCAoZCkgLT5cbiAgICAgICAgICBkLmRlZiA9IHNjb3BlLmRlZnNbZC50eXBlXVxuICAgICAgICAgIGQuaHcgPSBkLmRlZi53aWR0aCAvIDJcbiAgICAgICAgICBkLmhoID0gZC5kZWYuaGVpZ2h0IC8gMlxuICAgICAgICAgIGQzLnNlbGVjdChAKS5hdHRyXG4gICAgICAgICAgICBjbGFzczogJ291dGxpbmUnXG4gICAgICAgICAgICAjIDFweCBsaW5lcyByZW5kZXIgc2hhcnBseSB3aGVuIG9uIGEgMC41cHggb2Zmc2V0XG4gICAgICAgICAgICB4OiAwLjUgLSBkLmh3LCB5OiAwLjUgLSBkLmhoXG4gICAgICAgICAgICB3aWR0aDogMiAqIGQuaHcsIGhlaWdodDogMiAqIGQuaGhcbiAgICAgICAgLm9uICdtb3VzZWRvd24nLCB1cGRhdGVTZWxlY3QgIyBzYW1lIGFzOiAoZCkgLT4gdXBkYXRlU2VsZWN0IGRcbiAgICAgICAgLnN0eWxlIGZpbGw6IChkKSAtPiBkLmRlZi5zaGFkZVxuICAgICAgZy5hcHBlbmQoJ3RleHQnKS50ZXh0IChkKSAtPiBkLnRpdGxlIG9yIFwiI3tkLnR5cGV9ICN7ZC5pZH1cIlxuICAgICAgICAuYXR0ciBjbGFzczogJ3RpdGxlJywgeTogKGQpIC0+IDEyIC0gZC5oaFxuICAgICAgZy5hcHBlbmQoJ3RleHQnKS50ZXh0IChkKSAtPiBkLmRlZi5uYW1lXG4gICAgICAgIC5hdHRyIGNsYXNzOiAndHlwZScsIHk6IChkKSAtPiAtNCArIGQuaGhcbiAgICAgIGcuYXBwZW5kKCd0ZXh0JykudGV4dCAoZCkgLT4gZC5kZWYuaWNvblxuICAgICAgICAuYXR0ciBjbGFzczogJ2ljb25mb250JywgeDogMCwgeTogMFxuICAgICAgZy5hcHBlbmQoJ3RleHQnKS50ZXh0IChkKSAtPiAnXFx1ZjAxNCcgIyBmYS10cmFzaC1vXG4gICAgICAgIC5hdHRyIGNsYXNzOiAnaWNvbmZvbnQnLCB4OiAoKGQpIC0+IGQuaHctOCksIHk6ICgoZCkgLT4gOC1kLmhoKVxuICAgICAgICAuc3R5bGUgJ2ZvbnQtc2l6ZSc6ICcxMnB4J1xuICAgICAgICAub24gJ21vdXNlZG93bicsIChkKSAtPlxuICAgICAgICAgIGQzLmV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgIyBkZWxldGUgYWxsIGF0dGFjaGVkIHdpcmVzXG4gICAgICAgICAgc2R3ID0gc2NvcGUuZGF0YS53aXJlc1xuICAgICAgICAgIG4gPSBzZHcubGVuZ3RoXG4gICAgICAgICAgd2hpbGUgblxuICAgICAgICAgICAgdyA9IHNkd1stLW5dXG4gICAgICAgICAgICBpZiB3LmZyb20uc3BsaXQoJy4nKVswXSBpcyBkLmlkIG9yIHcudG8uc3BsaXQoJy4nKVswXSBpcyBkLmlkXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nICdkZWwgYXR0YWNoZWQnLCB3LmZyb20sIHcudG8gIyBUT0RPOiBzYXZlIHRvIHNlcnZlclxuICAgICAgICAgICAgICBzZHcuc3BsaWNlIG4sIDFcbiAgICAgICAgICBjb25zb2xlLmxvZyAnZGVsIGdhZGdldCcsIGQuaWQgIyBUT0RPOiBzYXZlIHRvIHNlcnZlclxuICAgICAgICAgIGZvciBpLCBnIG9mIHNjb3BlLmRhdGEuZ2FkZ2V0cyB3aGVuIGcgaXMgZFxuICAgICAgICAgICAgc2NvcGUuZGF0YS5nYWRnZXRzLnNwbGljZSBpLCAxXG4gICAgICAgICAgICB1cGRhdGVTZWxlY3QgbnVsbFxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICByZWRyYXcoKVxuICAgICAgZ2FkZ2V0cy5leGl0KCkucmVtb3ZlKClcbiAgICAgICAgXG4gICAgICBwaW5zID0gZ2FkZ2V0cy5zZWxlY3RBbGwoJy5waW4nKS5kYXRhIChkKSAtPlxuICAgICAgICBkLmNvbm4gPSBmb3IgcCBpbiBkLmRlZi5waW5zXG4gICAgICAgICAgeDogcC54LCB5OiBwLnksIG5hbWU6IHAubmFtZSwgZGlyOiBwLmRpciwgcGluOiBcIiN7ZC5pZH0uI3twLm5hbWV9XCJcbiAgICAgIHAgPSBwaW5zLmVudGVyKClcbiAgICAgIHAuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAuYXR0ciBjbGFzczogJ3BpbicsIGN4OiAoKGQpIC0+IGQueCsuNSksIGN5OiAoKGQpIC0+IGQueSsuNSksIHI6IDNcbiAgICAgIHAuYXBwZW5kKCdjaXJjbGUnKS5jYWxsKHBpbkRyYWcpXG4gICAgICAgIC5hdHRyIGNsYXNzOiAnaGl0JywgY3g6ICgoZCkgLT4gZC54Ky41KSwgY3k6ICgoZCkgLT4gZC55Ky41KSwgcjogN1xuICAgICAgICAub24gJ21vdXNldXAnLCAoZCkgLT4gZHJhZ0luZm8udG8gPSBkLnBpblxuICAgICAgcC5hcHBlbmQoJ3RleHQnKS50ZXh0IChkKSAtPiBkLm5hbWVcbiAgICAgICAgLmF0dHJcbiAgICAgICAgICBjbGFzczogKGQpIC0+IGQuZGlyXG4gICAgICAgICAgeDogKGQpIC0+IGlmIGQuZGlyIGlzICdpbicgdGhlbiBkLnggKyAxMCBlbHNlIGQueCAtIDEwXG4gICAgICAgICAgeTogKGQpIC0+IGQueSArIDVcbiAgICAgIHBpbnMuZXhpdCgpLnJlbW92ZSgpXG5cbiAgICAgIHdpcmVzLmVudGVyKCkuaW5zZXJ0KCdwYXRoJywgJ2cnKSAjIHVzZXMgaW5zZXJ0IHRvIG1vdmUgdG8gYmFjayByaWdodCBhd2F5XG4gICAgICAgIC5hdHRyIGNsYXNzOiAnd2lyZScsIGZpbGw6ICdub25lJywgZDogZGlhZ1xuICAgICAgICAjIGNhbid0IHVzZSBtb3VzZWNsaWNrLCBzZWVcbiAgICAgICAgIyBodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2QvbXNnL2QzLWpzL2dIek9qOTFYMk5BLzY1QkVmMkR1UlY0SlxuICAgICAgICAub24gJ21vdXNlZW50ZXInLCAoZCkgLT4gd2lyZVVuZGVyQ3Vyc29yID0gZFxuICAgICAgICAub24gJ21vdXNlbGVhdmUnLCAoZCkgLT4gd2lyZVVuZGVyQ3Vyc29yID0gbnVsbFxuICAgICAgd2lyZXMuZXhpdCgpLnJlbW92ZSgpXG5cbiAgICAgIGdhZGdldHMuYXR0ciB0cmFuc2Zvcm06IChkKSAtPiBcInRyYW5zbGF0ZSgje2QueH0sI3tkLnl9KVwiXG4gICAgICBjYj8oKVxuICAgIFxuICAgIHJlZHJhdygpXG4gICAgXG4gICAgc3ZnLm9uICdtb3VzZWRvd24nLCAtPlxuICAgICAgIyByZXR1cm4gIGlmIGQzLmV2ZW50LmRlZmF1bHRQcmV2ZW50ZWRcbiAgICAgIHd1YyA9IHdpcmVVbmRlckN1cnNvclxuICAgICAgaWYgd3VjXG4gICAgICAgIGNvbnNvbGUubG9nICdkZWwgd2lyZScsIHd1Yy5mcm9tLCB3dWMudG8gIyBUT0RPOiBzYXZlIHRvIHNlcnZlclxuICAgICAgICBmb3IgaSwgdyBvZiBzY29wZS5kYXRhLndpcmVzIHdoZW4gdyBpcyB3dWNcbiAgICAgICAgICBzY29wZS5kYXRhLndpcmVzLnNwbGljZSBpLCAxXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgd2lyZVVuZGVyQ3Vyc29yID0gbnVsbFxuICAgICAgZWxzZVxuICAgICAgICBbeCx5XSA9IGQzLm1vdXNlIEBcbiAgICAgICAgZyA9IGlkOiBcImcjeysrbGFzdGd9XCIsIHg6IHh8MCwgeTogeXwwLCB0eXBlOiBzY29wZS50eXBlXG4gICAgICAgIGNvbnNvbGUubG9nICdhZGQgZ2FkZ2V0JywgZy5pZCwgZy54LCBnLnksIGcudHlwZSAjIFRPRE86IHNhdmUgdG8gc2VydmVyXG4gICAgICAgIHNjb3BlLmRhdGEuZ2FkZ2V0cy5wdXNoIGdcbiAgICAgIHJlZHJhdyAtPiB1cGRhdGVTZWxlY3QgZyAjIHVwZGF0ZSBzY29wZSBhZnRlciBnIGhhcyBiZWVuIGZpbGxlZCBpblxuXG5maW5kUGluID0gKG5hbWUsIGdkYXRhKSAtPlxuICBbZ2lkLHBuYW1lXSA9IG5hbWUuc3BsaXQgJy4nXG4gIGZvciBnIGluIGdkYXRhIHdoZW4gZ2lkIGlzIGcuaWRcbiAgICBmb3IgcCBpbiBnLmRlZi5waW5zIHdoZW4gcG5hbWUgaXMgcC5uYW1lXG4gICAgICAjIHJldmVyc2VzIHggYW5kIHkgYW5kIHVzZXMgcHJvamVjdGlvbiB0byBnZXQgaG9yaXpvbnRhbCBzcGxpbmVzXG4gICAgICByZXR1cm4geTogZy54ICsgcC54ICsgLjUsIHg6IGcueSArIHAueSArIC41LCBnOiBnLCBwOiBwXG5cbnByZXBhcmVEYXRhID0gKGdkZWZzLCBnZGF0YSkgLT5cbiAgIyBwcmUtY2FsY3VsYXRlIHNpemVzIGFuZCByZWxhdGl2ZSBwaW4gY29vcmRpbmF0ZXNcbiAgZm9yIG4sIGQgb2YgZ2RlZnNcbiAgICBkLm5hbWUgb3I9IG5cbiAgICBpbnMgPSAwXG4gICAgZm9yIHAgaW4gZC5waW5zXG4gICAgICBwLnggPSBkLndpZHRoIC8gMlxuICAgICAgaWYgcC5kaXIgaXMgJ2luJ1xuICAgICAgICBwLnggPSAtcC54XG4gICAgICAgICsraW5zXG4gICAgb3V0cyA9IGQucGlucy5sZW5ndGggLSBpbnNcbiAgICBzdGVwID0gMjBcbiAgICB5SW4gPSAtIChpbnMgLSAxKSAqIHN0ZXAgLyAyXG4gICAgeU91dCA9IC0gKG91dHMgLSAxKSAqIHN0ZXAgLyAyXG4gICAgZm9yIHAgaW4gZC5waW5zXG4gICAgICBpZiBwLmRpciBpcyAnaW4nXG4gICAgICAgIHAueSA9IHlJblxuICAgICAgICB5SW4gKz0gc3RlcFxuICAgICAgZWxzZVxuICAgICAgICBwLnkgPSB5T3V0XG4gICAgICAgIHlPdXQgKz0gc3RlcFxuICAgIGQuaGVpZ2h0ID0gNDAgKyBzdGVwICogKGlmIGlucyA+IG91dHMgdGhlbiBpbnMgZWxzZSBvdXRzKVxuXG4gIHNlcSA9IDAgIyBmaW5kIHRoZSBsYXJnZXN0IFwiZzxuPlwiIGlkIHRvIGhlbHAgZ2VuZXJhdGUgdGhlIG5leHQgb25lXG4gIGZvciBkIGluIGdkYXRhLmdhZGdldHNcbiAgICBpZiAvXmdcXGQrJC8udGVzdChkLmlkKVxuICAgICAgbiA9IGQuaWQuc2xpY2UoMSkgfCAwICMgZHJvcCB0aGUgbGVhZGluZyBcImdcIiBhbmQgY29udmVydCB0byBpbnRcbiAgICAgIHNlcSA9IG4gIGlmIG4gPiBzZXFcbiAgICBkLmRlZiA9IGdkZWZzW2QudHlwZV1cbiAgICBkLmh3ID0gZC5kZWYud2lkdGggLyAyXG4gICAgZC5oaCA9IGQuZGVmLmhlaWdodCAvIDJcblxuICBmb3IgZCBpbiBnZGF0YS53aXJlc1xuICAgIGQuc291cmNlID0gZmluZFBpbiBkLmZyb20sIGdkYXRhLmdhZGdldHNcbiAgICBkLnRhcmdldCA9IGZpbmRQaW4gZC50bywgZ2RhdGEuZ2FkZ2V0c1xuICAgIFxuICByZXR1cm4gc2VxXG4iXX0=
