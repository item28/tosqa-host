(function() {
  var ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  ng.directive('jbCircuitEditor', function() {
    return {
      restrict: 'E',
      scope: {
        defs: '=',
        data: '='
      },
      link: function(scope, elem, attr) {
        var diag, dragInfo, dragWire, emit, findPin, gadgetDrag, gadgets, glist, pinDrag, prepareData, redraw, svg, wireUnderCursor, wires, wlist;
        svg = d3.select(elem[0]).append('svg').attr({
          height: '60%'
        });
        diag = d3.svg.diagonal().projection(function(d) {
          return [d.y, d.x];
        });
        glist = wlist = gadgets = wires = null;
        emit = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return scope.$apply(function() {
            var _ref;
            return scope.$emit.apply(scope, [(_ref = attr.event) != null ? _ref : 'circuit'].concat(__slice.call(args)));
          });
        };
        gadgetDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          d3.event.sourceEvent.stopPropagation();
          return this.parentNode.appendChild(this);
        }).on('drag', function(d) {
          d.x = d3.event.x | 0;
          d.y = d3.event.y | 0;
          d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
          return wires.filter(function(w) {
            return w.source.id === d.id || w.target.id === d.id;
          }).each(function(d) {
            d.source = findPin(d.from);
            return d.target = findPin(d.to);
          }).attr({
            d: diag
          });
        }).on('dragend', function(d) {
          var g;
          g = scope.data.gadgets[d.id];
          if (!(g.x === d.x && g.y === d.y)) {
            return emit('moveGadget', d.id, d.x, d.y);
          }
        });
        dragInfo = {};
        dragWire = svg.append('path').datum(dragInfo).attr({
          id: 'drag'
        });
        wireUnderCursor = null;
        pinDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          d3.event.sourceEvent.stopPropagation();
          dragInfo.from = d.pin;
          delete dragInfo.to;
          return dragInfo.source = findPin(d.pin);
        }).on('drag', function(d) {
          var mx, my, orig, _ref;
          _ref = d3.mouse(this), mx = _ref[0], my = _ref[1];
          orig = dragInfo.source;
          dragInfo.target = {
            x: orig.x + my - d.y,
            y: orig.y + mx - d.x
          };
          return dragWire.attr({
            "class": 'drawing',
            fill: 'none',
            d: diag
          });
        }).on('dragend', function(d) {
          dragWire.classed('drawing', false);
          if (dragInfo.to && dragInfo.to !== dragInfo.from) {
            return emit('addWire', dragInfo.from, dragInfo.to);
          }
        });
        redraw = function() {
          var g, p, pins;
          prepareData();
          gadgets = svg.selectAll('.gadget').data(glist, function(d) {
            return d.id;
          });
          wires = svg.selectAll('.wire').data(wlist, function(d) {
            return d.id;
          });
          g = gadgets.enter().append('g').call(gadgetDrag).attr({
            "class": 'gadget'
          });
          g.append('rect').each(function(d) {
            return d3.select(this).attr({
              "class": 'outline',
              x: 0.5 - d.hw,
              y: 0.5 - d.hh,
              width: 2 * d.hw,
              height: 2 * d.hh
            });
          }).on('mousedown', function(d) {
            return emit('selectGadget', d.id);
          }).style({
            fill: function(d) {
              return d.def.shade;
            }
          });
          g.append('text').text(function(d) {
            return d.title || d.def.name;
          }).attr({
            "class": 'title',
            y: function(d) {
              return 12 - d.hh;
            }
          });
          g.append('text').text(function(d) {
            return "" + d.type + " - " + d.id;
          }).attr({
            "class": 'type',
            y: function(d) {
              return -4 + d.hh;
            }
          });
          g.append('text').text(function(d) {
            return d.def.icon;
          }).attr({
            "class": 'iconfont',
            x: 0,
            y: 0
          });
          g.append('text').text(function(d) {
            return '\uf014';
          }).attr({
            "class": 'iconfont',
            x: (function(d) {
              return d.hw - 8;
            }),
            y: (function(d) {
              return 8 - d.hh;
            })
          }).style({
            'font-size': '12px'
          }).on('mousedown', function(d) {
            d3.event.stopPropagation();
            return emit('delGadget', d.id);
          });
          gadgets.exit().remove();
          pins = gadgets.selectAll('.pin').data(function(d) {
            return d.pins;
          });
          p = pins.enter();
          p.append('circle').attr({
            "class": 'pin',
            cx: (function(d) {
              return d.x + .5;
            }),
            cy: (function(d) {
              return d.y + .5;
            }),
            r: 3
          });
          p.append('circle').call(pinDrag).attr({
            "class": 'hit',
            cx: (function(d) {
              return d.x + .5;
            }),
            cy: (function(d) {
              return d.y + .5;
            }),
            r: 7
          }).on('mouseup', function(d) {
            return dragInfo.to = d.pin;
          });
          p.append('text').text(function(d) {
            return d.name;
          }).attr({
            "class": function(d) {
              return d.dir;
            },
            x: function(d) {
              if (d.dir === 'in') {
                return d.x + 10;
              } else {
                return d.x - 10;
              }
            },
            y: function(d) {
              return d.y + 5;
            }
          });
          pins.exit().remove();
          wires.enter().insert('path', 'g').attr({
            "class": 'wire',
            fill: 'none',
            d: diag
          }).on('mouseenter', function(d) {
            return wireUnderCursor = d;
          }).on('mouseleave', function(d) {
            return wireUnderCursor = null;
          });
          wires.exit().remove();
          return gadgets.attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
        };
        svg.on('mousedown', function() {
          var x, y, _ref;
          if (wireUnderCursor) {
            return emit('delWire', wireUnderCursor.from, wireUnderCursor.to);
          } else {
            _ref = d3.mouse(this), x = _ref[0], y = _ref[1];
            return emit('addGadget', x | 0, y | 0);
          }
        });
        findPin = function(pin) {
          var g, gid, p, pname, _i, _j, _len, _len1, _ref, _ref1;
          _ref = pin.split('.'), gid = _ref[0], pname = _ref[1];
          for (_i = 0, _len = glist.length; _i < _len; _i++) {
            g = glist[_i];
            if (gid === g.id) {
              _ref1 = g.pins;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                p = _ref1[_j];
                if (pname === p.name) {
                  return {
                    y: g.x + p.x + .5,
                    x: g.y + p.y + .5,
                    id: gid
                  };
                }
              }
            }
          }
        };
        prepareData = function() {
          var cap, def, from, g, height, hh, hw, id, ins, outs, pins, placePins, source, target, title, to, type, width, x, y, ystep;
          ystep = 20;
          width = 140;
          glist = (function() {
            var _ref, _results;
            _ref = scope.data.gadgets;
            _results = [];
            for (id in _ref) {
              g = _ref[id];
              x = g.x, y = g.y, title = g.title, type = g.type;
              def = scope.defs[type];
              pins = [];
              placePins = function(pnames, dir, xi) {
                var name, nlist, yi, _i, _len;
                nlist = pnames ? pnames.split(' ') : [];
                yi = -ystep * (nlist.length - 1) >> 1;
                for (_i = 0, _len = nlist.length; _i < _len; _i++) {
                  name = nlist[_i];
                  pins.push({
                    x: xi,
                    y: yi,
                    name: name,
                    dir: dir,
                    pin: "" + id + "." + name
                  });
                  yi += ystep;
                }
                return nlist.length;
              };
              hw = width / 2;
              ins = placePins(def.inputs, 'in', -hw);
              outs = placePins(def.outputs, 'out', hw);
              height = 40 + ystep * (ins > outs ? ins : outs);
              hh = height / 2;
              _results.push({
                id: id,
                x: x,
                y: y,
                title: title,
                type: type,
                def: def,
                pins: pins,
                hw: hw,
                hh: hh,
                height: height
              });
            }
            return _results;
          })();
          return wlist = (function() {
            var _ref, _ref1, _results;
            _ref = scope.data.wires;
            _results = [];
            for (id in _ref) {
              cap = _ref[id];
              _ref1 = id.split('/'), from = _ref1[0], to = _ref1[1];
              source = findPin(from);
              target = findPin(to);
              _results.push({
                id: id,
                from: from,
                to: to,
                source: source,
                target: target,
                cap: cap
              });
            }
            return _results;
          })();
        };
        scope.$watch("data", (function() {
          console.log("gadgets changed");
          return redraw();
        }), true);
        return redraw();
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
