(function() {
  var ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  console.log('NG', angular.version.full);

  ng.config(function($urlRouterProvider, $locationProvider) {
    $urlRouterProvider.otherwise('/');
    return $locationProvider.html5Mode(true);
  });

  ng.factory('jeebus', function($rootScope, $q) {
    var attach, connect, gadget, get, keys, processRpcReply, put, rpc, rpcPromises, send, seqNum, ws;
    ws = null;
    seqNum = 0;
    rpcPromises = {};
    processRpcReply = function() {
      var deferred, emitter, msg, n, reply, timer, _ref;
      n = arguments[0], msg = arguments[1], reply = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      _ref = rpcPromises[n], timer = _ref.timer, deferred = _ref.deferred, emitter = _ref.emitter;
      if (deferred) {
        clearTimeout(timer);
        if (msg === true) {
          rpcPromises[n].deferred = null;
          deferred.resolve(function(ee) {
            return rpcPromises[n].emitter = ee;
          });
          return;
        }
        if (msg === "" && reply.length) {
          deferred.resolve(reply[0]);
        } else if (msg && reply.length === 0) {
          console.error(msg);
          deferred.reject(msg);
        } else {
          console.error.apply(console, ["bad rpc reply", n, msg].concat(__slice.call(reply)));
        }
        return delete rpcPromises[n];
      } else if (emitter) {
        if (msg && reply.length) {
          return emitter.emit(msg, reply[0]);
        } else {
          delete rpcPromises[n];
          return emitter.emit('close', reply[0]);
        }
      } else {
        return console.error.apply(console, ["spurious rpc reply", n, msg].concat(__slice.call(reply)));
      }
    };
    connect = function(appTag) {
      var reconnect;
      reconnect = function(firstCall) {
        var wsProto;
        wsProto = ("https:" === document.location.protocol ? "wss://" : "ws://");
        ws = new WebSocket("" + wsProto + location.host + "/ws", [appTag]);
        ws.onopen = function() {
          console.log('WS Open');
          return $rootScope.$apply(function() {
            return $rootScope.$broadcast('ws-open');
          });
        };
        ws.onmessage = function(m) {
          if (m.data instanceof ArrayBuffer) {
            console.log('binary msg', m);
          }
          return $rootScope.$apply(function() {
            var data, e, _i, _len, _ref, _results;
            data = JSON.parse(m.data);
            switch (typeof data) {
              case 'object':
                if (Array.isArray(data)) {
                  return processRpcReply.apply(null, data);
                } else {
                  return console.log({
                    "spurious object received": m
                  });
                }
                break;
              case 'boolean':
                if (data) {
                  return window.location.reload(true);
                } else {
                  console.log("CSS Reload");
                  _ref = document.getElementsByTagName('link');
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    e = _ref[_i];
                    if (e.href && /stylesheet/i.test(e.rel)) {
                      _results.push(e.href = "" + (e.href.replace(/\?.*/, '')) + "?" + (Date.now()));
                    } else {
                      _results.push(void 0);
                    }
                  }
                  return _results;
                }
                break;
              default:
                return console.log('Server msg:', data);
            }
          });
        };
        return ws.onclose = function() {
          console.log('WS Lost');
          $rootScope.$apply(function() {
            return $rootScope.$broadcast('ws-lost');
          });
          return setTimeout(reconnect, 1000);
        };
      };
      return reconnect(true);
    };
    send = function(payload) {
      ws.send(angular.toJson(payload));
      return this;
    };
    keys = function(prefix) {
      return rpc('db-keys', prefix);
    };
    get = function(key) {
      return rpc('db-get', key);
    };
    put = function(key, value) {
      return send([0, 'db-put', key, value]);
    };
    rpc = function() {
      var args, d, n, t;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      d = $q.defer();
      n = ++seqNum;
      send([n].concat(__slice.call(args)));
      t = setTimeout(function() {
        console.error("RPC " + n + ": no reponse", args);
        delete rpcPromises[n];
        return $rootScope.$apply(function() {
          return d.reject();
        });
      }, 10000);
      rpcPromises[n] = {
        timer: t,
        deferred: d
      };
      return d.promise;
    };
    gadget = function() {
      var args, e;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      e = new EventEmitter;
      rpc.apply(null, args).then(function(eeSetter) {
        return eeSetter(e);
      });
      return e;
    };
    attach = function(table, rowHandler) {
      var g;
      g = gadget('Attach', {
        In: "/" + table + "/"
      });
      g.get = function(key) {
        return this.rows[this.keys[key]];
      };
      g.set = function(key, row) {
        var _base, _name;
        row.id = key;
        if ((_base = this.keys)[_name = row.id] == null) {
          _base[_name] = this.rows.length;
        }
        return this.rows[this.keys[row.id]] = row;
      };
      g.put = function(key, row) {
        this.set(key, row);
        return put("/" + table + "/" + key, row);
      };
      g.on('Out', function(m) {
        switch (m.Tag) {
          case '<range>':
            return this.emit('init', table);
          case '<sync>':
            return this.emit('sync', table);
          default:
            return this.emit('data', m.Tag.slice(2 + table.length), m.Msg);
        }
      });
      g.on('data', rowHandler != null ? rowHandler : g.set);
      g.rows = [];
      g.keys = {};
      return g;
    };
    return {
      connect: connect,
      send: send,
      keys: keys,
      get: get,
      put: put,
      rpc: rpc,
      gadget: gadget,
      attach: attach
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiamVlYnVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsRUFBQTtJQUFBLGtCQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLE9BQU8sQ0FBQyxNQUFSLENBQWUsT0FBZixDQUFMLENBQUE7O0FBQUEsRUFFQSxPQUFPLENBQUMsR0FBUixDQUFZLElBQVosRUFBa0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFsQyxDQUZBLENBQUE7O0FBQUEsRUFJQSxFQUFFLENBQUMsTUFBSCxDQUFVLFNBQUMsa0JBQUQsRUFBcUIsaUJBQXJCLEdBQUE7QUFDUixJQUFBLGtCQUFrQixDQUFDLFNBQW5CLENBQTZCLEdBQTdCLENBQUEsQ0FBQTtXQUNBLGlCQUFpQixDQUFDLFNBQWxCLENBQTRCLElBQTVCLEVBRlE7RUFBQSxDQUFWLENBSkEsQ0FBQTs7QUFBQSxFQVVBLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxFQUFxQixTQUFDLFVBQUQsRUFBYSxFQUFiLEdBQUE7QUFDbkIsUUFBQSw0RkFBQTtBQUFBLElBQUEsRUFBQSxHQUFLLElBQUwsQ0FBQTtBQUFBLElBQ0EsTUFBQSxHQUFTLENBRFQsQ0FBQTtBQUFBLElBRUEsV0FBQSxHQUFjLEVBRmQsQ0FBQTtBQUFBLElBS0EsZUFBQSxHQUFrQixTQUFBLEdBQUE7QUFDaEIsVUFBQSw2Q0FBQTtBQUFBLE1BRGlCLGtCQUFHLG9CQUFLLCtEQUN6QixDQUFBO0FBQUEsTUFBQSxPQUEyQixXQUFZLENBQUEsQ0FBQSxDQUF2QyxFQUFDLGFBQUEsS0FBRCxFQUFPLGdCQUFBLFFBQVAsRUFBZ0IsZUFBQSxPQUFoQixDQUFBO0FBQ0EsTUFBQSxJQUFHLFFBQUg7QUFDRSxRQUFBLFlBQUEsQ0FBYSxLQUFiLENBQUEsQ0FBQTtBQUNBLFFBQUEsSUFBRyxHQUFBLEtBQU8sSUFBVjtBQUNFLFVBQUEsV0FBWSxDQUFBLENBQUEsQ0FBRSxDQUFDLFFBQWYsR0FB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O0FBQUEsTUFBdUIsS0FBQSxHQUF2QjtBQUFBLE1BQTJCLEtBQUEsR0FBM0I7QUFBQSxNQUErQixRQUFBLE1BQS9CO0FBQUEsTUFBc0MsUUFBQSxNQUF0QztNQWhKbUI7RUFBQSxDQUFyQixDQVZBLENBQUE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIm5nID0gYW5ndWxhci5tb2R1bGUgJ215QXBwJ1xuXG5jb25zb2xlLmxvZyAnTkcnLCBhbmd1bGFyLnZlcnNpb24uZnVsbFxuXG5uZy5jb25maWcgKCR1cmxSb3V0ZXJQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIC0+XG4gICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UgJy8nXG4gICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSB0cnVlXG4gIFxuIyBUaGUgXCJqZWVidXNcIiBzZXJ2aWNlIGJlbG93IGlzIHRoZSBzYW1lIGZvciBhbGwgY2xpZW50LXNpZGUgYXBwbGljYXRpb25zLlxuIyBJdCBsZXRzIGFuZ3VsYXIgY29ubmVjdCB0byB0aGUgSmVlQnVzIHNlcnZlciBhbmQgc2VuZC9yZWNlaXZlIG1lc3NhZ2VzLlxubmcuZmFjdG9yeSAnamVlYnVzJywgKCRyb290U2NvcGUsICRxKSAtPlxuICB3cyA9IG51bGwgICAgICAgICAgIyB0aGUgd2Vic29ja2V0IG9iamVjdCwgd2hpbGUgb3BlblxuICBzZXFOdW0gPSAwICAgICAgICAgIyB1bmlxdWUgc2VxdWVuY2UgbnVtYmVycyBmb3IgZWFjaCBSUEMgcmVxdWVzdFxuICBycGNQcm9taXNlcyA9IHt9ICAgIyBtYXBzIHNlcU51bSB0byBhIHBlbmRpbmcge3RpbWVyLGRlZmVycmVkLGVtaXR0ZXJ9IGVudHJ5XG5cbiAgIyBSZXNvbHZlIG9yIHJlamVjdCBhIHBlbmRpbmcgcnBjIHByb21pc2UuIEFsc28gaGFuZGxlIHN0cmVhbWVkIHJlc3VsdHMuXG4gIHByb2Nlc3NScGNSZXBseSA9IChuLCBtc2csIHJlcGx5Li4uKSAtPlxuICAgIHt0aW1lcixkZWZlcnJlZCxlbWl0dGVyfSA9IHJwY1Byb21pc2VzW25dXG4gICAgaWYgZGVmZXJyZWRcbiAgICAgIGNsZWFyVGltZW91dCB0aW1lclxuICAgICAgaWYgbXNnIGlzIHRydWUgIyBzdGFydCBzdHJlYW1pbmdcbiAgICAgICAgcnBjUHJvbWlzZXNbbl0uZGVmZXJyZWQgPSBudWxsXG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUgKGVlKSAtPlxuICAgICAgICAgIHJwY1Byb21pc2VzW25dLmVtaXR0ZXIgPSBlZVxuICAgICAgICByZXR1cm5cbiAgICAgIGlmIG1zZyBpcyBcIlwiIGFuZCByZXBseS5sZW5ndGhcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSByZXBseVswXVxuICAgICAgZWxzZSBpZiBtc2cgYW5kIHJlcGx5Lmxlbmd0aCA9PSAwXG4gICAgICAgIGNvbnNvbGUuZXJyb3IgbXNnXG4gICAgICAgIGRlZmVycmVkLnJlamVjdCBtc2dcbiAgICAgIGVsc2VcbiAgICAgICAgY29uc29sZS5lcnJvciBcImJhZCBycGMgcmVwbHlcIiwgbiwgbXNnLCByZXBseS4uLlxuICAgICAgZGVsZXRlIHJwY1Byb21pc2VzW25dXG4gICAgZWxzZSBpZiBlbWl0dGVyXG4gICAgICBpZiBtc2cgYW5kIHJlcGx5Lmxlbmd0aFxuICAgICAgICBlbWl0dGVyLmVtaXQgbXNnLCByZXBseVswXVxuICAgICAgZWxzZVxuICAgICAgICBkZWxldGUgcnBjUHJvbWlzZXNbbl0gIyBzdG9wIHN0cmVhbWluZ1xuICAgICAgICBlbWl0dGVyLmVtaXQgJ2Nsb3NlJywgcmVwbHlbMF1cbiAgICBlbHNlXG4gICAgICBjb25zb2xlLmVycm9yIFwic3B1cmlvdXMgcnBjIHJlcGx5XCIsIG4sIG1zZywgcmVwbHkuLi5cblxuICAjIFNldCB1cCBhIHdlYnNvY2tldCBjb25uZWN0aW9uIHRvIHRoZSBKZWVCdXMgc2VydmVyLlxuICAjIFRoZSBhcHBUYWcgaXMgdGhlIGRlZmF1bHQgdGFnIHRvIHVzZSB3aGVuIHNlbmRpbmcgcmVxdWVzdHMgdG8gaXQuXG4gIGNvbm5lY3QgPSAoYXBwVGFnKSAtPlxuXG4gICAgcmVjb25uZWN0ID0gKGZpcnN0Q2FsbCkgLT5cbiAgICAgICMgdGhlIHdlYnNvY2tldCBpcyBzZXJ2ZWQgZnJvbSB0aGUgc2FtZSBzaXRlIGFzIHRoZSB3ZWIgcGFnZVxuICAgICAgd3NQcm90byA9IChpZiBcImh0dHBzOlwiIGlzIGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sIHRoZW4gXCJ3c3M6Ly9cIiBlbHNlIFwid3M6Ly9cIilcbiAgICAgIHdzID0gbmV3IFdlYlNvY2tldCBcIiN7d3NQcm90b30je2xvY2F0aW9uLmhvc3R9L3dzXCIsIFthcHBUYWddXG5cbiAgICAgIHdzLm9ub3BlbiA9IC0+XG4gICAgICAgICMgbG9jYXRpb24ucmVsb2FkKCkgIHVubGVzcyBmaXJzdENhbGxcbiAgICAgICAgY29uc29sZS5sb2cgJ1dTIE9wZW4nXG4gICAgICAgICRyb290U2NvcGUuJGFwcGx5IC0+XG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0ICd3cy1vcGVuJ1xuXG4gICAgICB3cy5vbm1lc3NhZ2UgPSAobSkgLT5cbiAgICAgICAgaWYgbS5kYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXJcbiAgICAgICAgICBjb25zb2xlLmxvZyAnYmluYXJ5IG1zZycsIG1cbiAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkgLT5cbiAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZSBtLmRhdGFcbiAgICAgICAgICBzd2l0Y2ggdHlwZW9mIGRhdGFcbiAgICAgICAgICAgIHdoZW4gJ29iamVjdCdcbiAgICAgICAgICAgICAgaWYgQXJyYXkuaXNBcnJheSBkYXRhXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1JwY1JlcGx5IGRhdGEuLi5cbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nIFwic3B1cmlvdXMgb2JqZWN0IHJlY2VpdmVkXCI6IG1cbiAgICAgICAgICAgIHdoZW4gJ2Jvb2xlYW4nXG4gICAgICAgICAgICAgIGlmIGRhdGEgIyByZWxvYWQgYXBwXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCB0cnVlXG4gICAgICAgICAgICAgIGVsc2UgIyByZWZyZXNoIHN0eWxlc2hlZXRzXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cgXCJDU1MgUmVsb2FkXCJcbiAgICAgICAgICAgICAgICBmb3IgZSBpbiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSAnbGluaydcbiAgICAgICAgICAgICAgICAgIGlmIGUuaHJlZiBhbmQgL3N0eWxlc2hlZXQvaS50ZXN0IGUucmVsXG4gICAgICAgICAgICAgICAgICAgIGUuaHJlZiA9IFwiI3tlLmhyZWYucmVwbGFjZSAvXFw/LiovLCAnJ30/I3tEYXRlLm5vdygpfVwiXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nICdTZXJ2ZXIgbXNnOicsIGRhdGFcblxuICAgICAgIyB3cy5vbmVycm9yID0gKGUpIC0+XG4gICAgICAjICAgY29uc29sZS5sb2cgJ0Vycm9yJywgZVxuXG4gICAgICB3cy5vbmNsb3NlID0gLT5cbiAgICAgICAgY29uc29sZS5sb2cgJ1dTIExvc3QnXG4gICAgICAgICRyb290U2NvcGUuJGFwcGx5IC0+XG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0ICd3cy1sb3N0J1xuICAgICAgICBzZXRUaW1lb3V0IHJlY29ubmVjdCwgMTAwMFxuXG4gICAgcmVjb25uZWN0IHRydWVcbiAgIFxuICAjIFNlbmQgYSBwYXlsb2FkIHRvIHRoZSBKZWVCdXMgc2VydmVyIG92ZXIgdGhlIHdlYnNvY2tldCBjb25uZWN0aW9uLlxuICAjIFRoZSBwYXlsb2FkIHNob3VsZCBiZSBhbiBvYmplY3QgKGFueXRoaW5nIGJ1dCBhcnJheSBpcyBzdXBwb3J0ZWQgZm9yIG5vdykuXG4gIHNlbmQgPSAocGF5bG9hZCkgLT5cbiAgICB3cy5zZW5kIGFuZ3VsYXIudG9Kc29uIHBheWxvYWRcbiAgICBAXG5cbiAgIyBSZXR1cm4gbGlzdCBvZiBrZXlzIGFzIHByb21pc2UsIG1hdGNoaW5nIHRoZSBnaXZlbiBwcmVmaXggaW4gdGhlIGRhdGFiYXNlLlxuICBrZXlzID0gKHByZWZpeCkgLT4gcnBjICdkYi1rZXlzJywgcHJlZml4XG4gICAgICBcbiAgIyBGZXRjaCBhIGtleS92YWx1ZSBwYWlyIGZyb20gdGhlIHNlcnZlciBkYXRhYmFzZSwgdmFsdWUgcmV0dXJuZWQgYXMgcHJvbWlzZS5cbiAgZ2V0ID0gKGtleSkgLT4gcnBjICdkYi1nZXQnLCBrZXlcbiAgICAgIFxuICAjIFN0b3JlIGEga2V5L3ZhbHVlIHBhaXIgaW4gdGhlIHNlcnZlciBkYXRhYmFzZS5cbiAgcHV0ID0gKGtleSwgdmFsdWUpIC0+IHNlbmQgWzAsICdkYi1wdXQnLCBrZXksIHZhbHVlXVxuICAgICAgXG4gICMgUGVyZm9ybSBhbiBSUEMgY2FsbCwgaS5lLiByZWdpc3RlciByZXN1bHQgY2FsbGJhY2sgYW5kIHJldHVybiBhIHByb21pc2UuXG4gIHJwYyA9IChhcmdzLi4uKSAtPlxuICAgIGQgPSAkcS5kZWZlcigpXG4gICAgbiA9ICsrc2VxTnVtXG4gICAgc2VuZCBbbiwgYXJncy4uLl1cbiAgICB0ID0gc2V0VGltZW91dCAtPlxuICAgICAgY29uc29sZS5lcnJvciBcIlJQQyAje259OiBubyByZXBvbnNlXCIsIGFyZ3NcbiAgICAgIGRlbGV0ZSBycGNQcm9taXNlc1tuXVxuICAgICAgJHJvb3RTY29wZS4kYXBwbHkgLT5cbiAgICAgICAgZC5yZWplY3QoKVxuICAgICwgMTAwMDAgIyAxMCBzZWNvbmRzIHNob3VsZCBiZSBlbm91Z2ggdG8gY29tcGxldGUgYW55IHJlcXVlc3RcbiAgICBycGNQcm9taXNlc1tuXSA9IHRpbWVyOiB0LCBkZWZlcnJlZDogZFxuICAgIGQucHJvbWlzZVxuXG4gICMgTGF1bmNoIGEgZ2FkZ2V0IG9uIHRoZSBzZXJ2ZXIgYW5kIHJldHVybiBpdHMgcmVzdWx0cyB2aWEgZXZlbnRzLlxuICBnYWRnZXQgPSAoYXJncy4uLikgLT5cbiAgICBlID0gbmV3IEV2ZW50RW1pdHRlclxuICAgIHJwYyBhcmdzLi4uXG4gICAgICAudGhlbiAoZWVTZXR0ZXIpIC0+XG4gICAgICAgIGVlU2V0dGVyIGVcbiAgICBlXG4gIFxuICBhdHRhY2ggPSAodGFibGUsIHJvd0hhbmRsZXIpIC0+XG4gICAgZyA9IGdhZGdldCAnQXR0YWNoJywgSW46IFwiLyN7dGFibGV9L1wiXG5cbiAgICBnLmdldCA9IChrZXkpIC0+XG4gICAgICBAcm93c1tAa2V5c1trZXldXVxuICAgICAgXG4gICAgZy5zZXQgPSAoa2V5LCByb3cpIC0+ICMgc3RvcmUgY2hhbmdlcyBsb2NhbGx5XG4gICAgICByb3cuaWQgPSBrZXlcbiAgICAgIEBrZXlzW3Jvdy5pZF0gPz0gQHJvd3MubGVuZ3RoXG4gICAgICBAcm93c1tAa2V5c1tyb3cuaWRdXSA9IHJvd1xuICAgICAgXG4gICAgZy5wdXQgPSAoa2V5LCByb3cpIC0+ICMgc3RvcmUgY2hhbmdlcyBsb2NhbGx5IGFzIHdlbGwgYXMgb24gc2VydmVyXG4gICAgICBAc2V0IGtleSwgcm93XG4gICAgICBwdXQgXCIvI3t0YWJsZX0vI3trZXl9XCIsIHJvd1xuXG4gICAgZy5vbiAnT3V0JywgKG0pIC0+XG4gICAgICBzd2l0Y2ggbS5UYWdcbiAgICAgICAgd2hlbiAnPHJhbmdlPicgdGhlbiBAZW1pdCAnaW5pdCcsIHRhYmxlXG4gICAgICAgIHdoZW4gJzxzeW5jPicgdGhlbiBAZW1pdCAnc3luYycsIHRhYmxlXG4gICAgICAgIGVsc2UgQGVtaXQgJ2RhdGEnLCBtLlRhZy5zbGljZSgyICsgdGFibGUubGVuZ3RoKSwgbS5Nc2dcbiAgICBnLm9uICdkYXRhJywgcm93SGFuZGxlciA/IGcuc2V0XG5cbiAgICBnLnJvd3MgPSBbXVxuICAgIGcua2V5cyA9IHt9XG4gICAgZ1xuICAgIFxuICAjIHdpbmRvdy5zZW5kID0gc2VuZCAjIGNvbnNvbGUgYWNjZXNzLCBmb3IgZGVidWdnaW5nXG4gIHtjb25uZWN0LHNlbmQsa2V5cyxnZXQscHV0LHJwYyxnYWRnZXQsYXR0YWNofVxuIl19
